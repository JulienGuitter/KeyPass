
KeyPass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800e2c0  0800e2c0  0001e2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d4  0800e7d4  00020500  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7d4  0800e7d4  00020500  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7d4  0800e7d4  00020500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7d4  0800e7d4  0001e7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7d8  0800e7d8  0001e7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000500  20000000  0800e7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e28  20000500  0800ecdc  00020500  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001328  0800ecdc  00021328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020500  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7a0  00000000  00000000  00020529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005512  00000000  00000000  0003dcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  000431e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  000449c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da72  00000000  00000000  00045fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021895  00000000  00000000  00063a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092db0  00000000  00000000  000852d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000640c  00000000  00000000  001180d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000500 	.word	0x20000500
 8000128:	00000000 	.word	0x00000000
 800012c:	0800e2a8 	.word	0x0800e2a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000504 	.word	0x20000504
 8000148:	0800e2a8 	.word	0x0800e2a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
uint8_t tempBuff[RECIVE_BUFFER_SIZE];
uint8_t posInBuffer;

uint8_t ID, samplingTimes, ret;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, Rx_data, RECIVE_BUFFER_SIZE);
 8000164:	221a      	movs	r2, #26
 8000166:	4905      	ldr	r1, [pc, #20]	; (800017c <HAL_UART_RxCpltCallback+0x20>)
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <HAL_UART_RxCpltCallback+0x24>)
 800016a:	f007 f9b2 	bl	80074d2 <HAL_UART_Receive_IT>
	posInBuffer = BUFFER_SIZE;
 800016e:	4b05      	ldr	r3, [pc, #20]	; (8000184 <HAL_UART_RxCpltCallback+0x28>)
 8000170:	221a      	movs	r2, #26
 8000172:	701a      	strb	r2, [r3, #0]
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000538 	.word	0x20000538
 8000180:	200006c0 	.word	0x200006c0
 8000184:	20000536 	.word	0x20000536

08000188 <UART_Is_Available>:

bool UART_Is_Available(){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	if(posInBuffer != 0){
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <UART_Is_Available+0x1c>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <UART_Is_Available+0x10>
		return true;
 8000194:	2301      	movs	r3, #1
 8000196:	e000      	b.n	800019a <UART_Is_Available+0x12>
	}
	return false;
 8000198:	2300      	movs	r3, #0
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000536 	.word	0x20000536

080001a8 <UART_Read>:

uint8_t UART_Read(){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
	uint8_t tempReturnValue = Rx_data[0];
 80001ae:	4b16      	ldr	r3, [pc, #88]	; (8000208 <UART_Read+0x60>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	70fb      	strb	r3, [r7, #3]

	for(int i=0; i<BUFFER_SIZE-1; i++){
 80001b4:	2300      	movs	r3, #0
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	e00b      	b.n	80001d2 <UART_Read+0x2a>
		Rx_data[i] = Rx_data[i+1];
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	3301      	adds	r3, #1
 80001be:	4a12      	ldr	r2, [pc, #72]	; (8000208 <UART_Read+0x60>)
 80001c0:	5cd1      	ldrb	r1, [r2, r3]
 80001c2:	4a11      	ldr	r2, [pc, #68]	; (8000208 <UART_Read+0x60>)
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4413      	add	r3, r2
 80001c8:	460a      	mov	r2, r1
 80001ca:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<BUFFER_SIZE-1; i++){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3301      	adds	r3, #1
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b18      	cmp	r3, #24
 80001d6:	ddf0      	ble.n	80001ba <UART_Read+0x12>
	}
	Rx_data[posInBuffer-1] = '\0';
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <UART_Read+0x64>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	3b01      	subs	r3, #1
 80001de:	4a0a      	ldr	r2, [pc, #40]	; (8000208 <UART_Read+0x60>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	54d1      	strb	r1, [r2, r3]
	posInBuffer--;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <UART_Read+0x64>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	3b01      	subs	r3, #1
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <UART_Read+0x64>)
 80001ee:	701a      	strb	r2, [r3, #0]
	if(tempReturnValue == '\0'){
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d101      	bne.n	80001fa <UART_Read+0x52>
		return 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	e000      	b.n	80001fc <UART_Read+0x54>
	}
	return tempReturnValue;
 80001fa:	78fb      	ldrb	r3, [r7, #3]
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000538 	.word	0x20000538
 800020c:	20000536 	.word	0x20000536

08000210 <DFRobot_ID809_Init>:

void DFRobot_ID809_Init(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, Rx_data, RECIVE_BUFFER_SIZE);
 8000214:	221a      	movs	r2, #26
 8000216:	4903      	ldr	r1, [pc, #12]	; (8000224 <DFRobot_ID809_Init+0x14>)
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <DFRobot_ID809_Init+0x18>)
 800021a:	f007 f95a 	bl	80074d2 <HAL_UART_Receive_IT>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000538 	.word	0x20000538
 8000228:	200006c0 	.word	0x200006c0

0800022c <DFRobot_ID809_isConnected>:


bool DFRobot_ID809_isConnected(){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_TEST_CONNECTION, NULL, 0);
 8000232:	2300      	movs	r3, #0
 8000234:	2200      	movs	r2, #0
 8000236:	2101      	movs	r1, #1
 8000238:	20f0      	movs	r0, #240	; 0xf0
 800023a:	f000 fa23 	bl	8000684 <DFRobot_ID809_pack>
 800023e:	6078      	str	r0, [r7, #4]
    DFRobot_ID809_sendPacket(header);
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 fa99 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f00d fb86 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <DFRobot_ID809_isConnected+0x40>)
 800024e:	f000 faa7 	bl	80007a0 <DFRobot_ID809_responsePayload>
 8000252:	4603      	mov	r3, r0
 8000254:	70fb      	strb	r3, [r7, #3]
    if(ret == ERR_SUCCESS){
 8000256:	78fb      	ldrb	r3, [r7, #3]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d101      	bne.n	8000260 <DFRobot_ID809_isConnected+0x34>
        return true;
 800025c:	2301      	movs	r3, #1
 800025e:	e000      	b.n	8000262 <DFRobot_ID809_isConnected+0x36>
    }else{
        return false;
 8000260:	2300      	movs	r3, #0
    }
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	2000051c 	.word	0x2000051c

08000270 <DFRobot_ID809_getEmptyID>:
    data[0] = 4;
    uint8_t ret = DFRobot_ID809_getParam(data);
    return ret;
}

uint8_t DFRobot_ID809_getEmptyID(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
    char data[4] = {0};
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
    data[0] = 1;
 800027a:	2301      	movs	r3, #1
 800027c:	713b      	strb	r3, [r7, #4]
    data[2] = FINGERPRINT_CAPACITY;     //80 fingerprints at most, default to full range
 800027e:	2350      	movs	r3, #80	; 0x50
 8000280:	71bb      	strb	r3, [r7, #6]
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_GET_EMPTY_ID, data, 4);
 8000282:	1d3a      	adds	r2, r7, #4
 8000284:	2304      	movs	r3, #4
 8000286:	2145      	movs	r1, #69	; 0x45
 8000288:	20f0      	movs	r0, #240	; 0xf0
 800028a:	f000 f9fb 	bl	8000684 <DFRobot_ID809_pack>
 800028e:	60b8      	str	r0, [r7, #8]
    DFRobot_ID809_sendPacket(header);
 8000290:	68b8      	ldr	r0, [r7, #8]
 8000292:	f000 fa71 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 8000296:	68b8      	ldr	r0, [r7, #8]
 8000298:	f00d fb5e 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <DFRobot_ID809_getEmptyID+0x4c>)
 800029e:	f000 fa7f 	bl	80007a0 <DFRobot_ID809_responsePayload>
 80002a2:	4603      	mov	r3, r0
 80002a4:	73fb      	strb	r3, [r7, #15]
    if(ret == ERR_SUCCESS){
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d102      	bne.n	80002b2 <DFRobot_ID809_getEmptyID+0x42>
        ret = buf[0];
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <DFRobot_ID809_getEmptyID+0x4c>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	2000051c 	.word	0x2000051c

080002c0 <DFRobot_ID809_detectFinger>:





uint8_t DFRobot_ID809_detectFinger(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_FINGER_DETECT, NULL, 0);
 80002c6:	2300      	movs	r3, #0
 80002c8:	2200      	movs	r2, #0
 80002ca:	2121      	movs	r1, #33	; 0x21
 80002cc:	20f0      	movs	r0, #240	; 0xf0
 80002ce:	f000 f9d9 	bl	8000684 <DFRobot_ID809_pack>
 80002d2:	6038      	str	r0, [r7, #0]
    DFRobot_ID809_sendPacket(header);
 80002d4:	6838      	ldr	r0, [r7, #0]
 80002d6:	f000 fa4f 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 80002da:	6838      	ldr	r0, [r7, #0]
 80002dc:	f00d fb3c 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <DFRobot_ID809_detectFinger+0x40>)
 80002e2:	f000 fa5d 	bl	80007a0 <DFRobot_ID809_responsePayload>
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
    if(ret == ERR_SUCCESS){
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d102      	bne.n	80002f6 <DFRobot_ID809_detectFinger+0x36>
        ret = buf[0];
 80002f0:	4b03      	ldr	r3, [pc, #12]	; (8000300 <DFRobot_ID809_detectFinger+0x40>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	71fb      	strb	r3, [r7, #7]
    }
    return ret;
 80002f6:	79fb      	ldrb	r3, [r7, #7]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000051c 	.word	0x2000051c

08000304 <DFRobot_ID809_ctrlLED>:


uint8_t DFRobot_ID809_ctrlLED(eLEDMode_t mode,eLEDColor_t color,uint8_t blinkCount){
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	460b      	mov	r3, r1
 8000310:	71bb      	strb	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
    char data[4] = {0};
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  if(FINGERPRINT_CAPACITY == 80){
    data[0] = mode;
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	733b      	strb	r3, [r7, #12]
    data[2] = data[1] = color;
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	737b      	strb	r3, [r7, #13]
 8000322:	7b7b      	ldrb	r3, [r7, #13]
 8000324:	73bb      	strb	r3, [r7, #14]
    data[3] = blinkCount;
 8000326:	797b      	ldrb	r3, [r7, #5]
 8000328:	73fb      	strb	r3, [r7, #15]
	  data[2] = data[1] = 0x83;
	}else {
	  data[2] = data[1] = 0x87;
	}
  }
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_SLED_CTRL, data, 4);
 800032a:	f107 020c 	add.w	r2, r7, #12
 800032e:	2304      	movs	r3, #4
 8000330:	2124      	movs	r1, #36	; 0x24
 8000332:	20f0      	movs	r0, #240	; 0xf0
 8000334:	f000 f9a6 	bl	8000684 <DFRobot_ID809_pack>
 8000338:	6178      	str	r0, [r7, #20]
    DFRobot_ID809_sendPacket(header);
 800033a:	6978      	ldr	r0, [r7, #20]
 800033c:	f000 fa1c 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 8000340:	6978      	ldr	r0, [r7, #20]
 8000342:	f00d fb09 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <DFRobot_ID809_ctrlLED+0x58>)
 8000348:	f000 fa2a 	bl	80007a0 <DFRobot_ID809_responsePayload>
 800034c:	4603      	mov	r3, r0
 800034e:	74fb      	strb	r3, [r7, #19]
    return ret;
 8000350:	7cfb      	ldrb	r3, [r7, #19]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	2000051c 	.word	0x2000051c

08000360 <DFRobot_ID809_getImage>:



uint8_t DFRobot_ID809_getImage(){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_GET_IMAGE, NULL, 0);
 8000366:	2300      	movs	r3, #0
 8000368:	2200      	movs	r2, #0
 800036a:	2120      	movs	r1, #32
 800036c:	20f0      	movs	r0, #240	; 0xf0
 800036e:	f000 f989 	bl	8000684 <DFRobot_ID809_pack>
 8000372:	6078      	str	r0, [r7, #4]
    DFRobot_ID809_sendPacket(header);
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f9ff 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f00d faec 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <DFRobot_ID809_getImage+0x34>)
 8000382:	f000 fa0d 	bl	80007a0 <DFRobot_ID809_responsePayload>
 8000386:	4603      	mov	r3, r0
 8000388:	70fb      	strb	r3, [r7, #3]
    return ret;
 800038a:	78fb      	ldrb	r3, [r7, #3]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000051c 	.word	0x2000051c

08000398 <DFRobot_ID809_collectionFingerprint>:



uint8_t DFRobot_ID809_collectionFingerprint(uint16_t timeout,int ramNumber){  //Collect fingerprint
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	81fb      	strh	r3, [r7, #14]
    uint8_t ret;
    if(ramNumber == -1){
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d121      	bne.n	80003f4 <DFRobot_ID809_collectionFingerprint+0x5c>
		if(_number > 2){
 80003b0:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <DFRobot_ID809_collectionFingerprint+0xd0>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d91d      	bls.n	80003f4 <DFRobot_ID809_collectionFingerprint+0x5c>
			_error = eErrorGatherOut;
 80003b8:	4b2c      	ldr	r3, [pc, #176]	; (800046c <DFRobot_ID809_collectionFingerprint+0xd4>)
 80003ba:	2245      	movs	r2, #69	; 0x45
 80003bc:	701a      	strb	r2, [r3, #0]
			return ERR_ID809;
 80003be:	23ff      	movs	r3, #255	; 0xff
 80003c0:	e04e      	b.n	8000460 <DFRobot_ID809_collectionFingerprint+0xc8>
		}
    }
    while(!DFRobot_ID809_detectFinger()){
        if(timeout != 0){
 80003c2:	88fb      	ldrh	r3, [r7, #6]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d015      	beq.n	80003f4 <DFRobot_ID809_collectionFingerprint+0x5c>
            HAL_Delay(10);
 80003c8:	200a      	movs	r0, #10
 80003ca:	f002 fb21 	bl	8002a10 <HAL_Delay>
            if(++i > timeout*10){
 80003ce:	89fb      	ldrh	r3, [r7, #14]
 80003d0:	3301      	adds	r3, #1
 80003d2:	81fb      	strh	r3, [r7, #14]
 80003d4:	89f9      	ldrh	r1, [r7, #14]
 80003d6:	88fa      	ldrh	r2, [r7, #6]
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4299      	cmp	r1, r3
 80003e2:	dd07      	ble.n	80003f4 <DFRobot_ID809_collectionFingerprint+0x5c>
                _error = eErrorTimeOut;
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <DFRobot_ID809_collectionFingerprint+0xd4>)
 80003e6:	2223      	movs	r2, #35	; 0x23
 80003e8:	701a      	strb	r2, [r3, #0]
                _state = 0;
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <DFRobot_ID809_collectionFingerprint+0xd8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
                return ERR_ID809;
 80003f0:	23ff      	movs	r3, #255	; 0xff
 80003f2:	e035      	b.n	8000460 <DFRobot_ID809_collectionFingerprint+0xc8>
    while(!DFRobot_ID809_detectFinger()){
 80003f4:	f7ff ff64 	bl	80002c0 <DFRobot_ID809_detectFinger>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0e1      	beq.n	80003c2 <DFRobot_ID809_collectionFingerprint+0x2a>
            }
       }
    }
    ret = DFRobot_ID809_getImage();
 80003fe:	f7ff ffaf 	bl	8000360 <DFRobot_ID809_getImage>
 8000402:	4603      	mov	r3, r0
 8000404:	737b      	strb	r3, [r7, #13]
    if(ret != ERR_SUCCESS){
 8000406:	7b7b      	ldrb	r3, [r7, #13]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <DFRobot_ID809_collectionFingerprint+0x7e>
        _state = 0;
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <DFRobot_ID809_collectionFingerprint+0xd8>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
        return ERR_ID809;
 8000412:	23ff      	movs	r3, #255	; 0xff
 8000414:	e024      	b.n	8000460 <DFRobot_ID809_collectionFingerprint+0xc8>
    }
   if(ramNumber != -1){
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800041c:	d007      	beq.n	800042e <DFRobot_ID809_collectionFingerprint+0x96>
     ret = DFRobot_ID809_generate(ramNumber);
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	b2db      	uxtb	r3, r3
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f848 	bl	80004b8 <DFRobot_ID809_generate>
 8000428:	4603      	mov	r3, r0
 800042a:	737b      	strb	r3, [r7, #13]
 800042c:	e006      	b.n	800043c <DFRobot_ID809_collectionFingerprint+0xa4>
   } else{
     ret = DFRobot_ID809_generate(_number);
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <DFRobot_ID809_collectionFingerprint+0xd0>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f840 	bl	80004b8 <DFRobot_ID809_generate>
 8000438:	4603      	mov	r3, r0
 800043a:	737b      	strb	r3, [r7, #13]
   }
    if(ret != ERR_SUCCESS){
 800043c:	7b7b      	ldrb	r3, [r7, #13]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d004      	beq.n	800044c <DFRobot_ID809_collectionFingerprint+0xb4>
        _state = 0;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <DFRobot_ID809_collectionFingerprint+0xd8>)
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]
        return ERR_ID809;
 8000448:	23ff      	movs	r3, #255	; 0xff
 800044a:	e009      	b.n	8000460 <DFRobot_ID809_collectionFingerprint+0xc8>
    }
    _number++;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <DFRobot_ID809_collectionFingerprint+0xd0>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	3301      	adds	r3, #1
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <DFRobot_ID809_collectionFingerprint+0xd0>)
 8000456:	701a      	strb	r2, [r3, #0]
    _state = 1;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <DFRobot_ID809_collectionFingerprint+0xd8>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
    return ret;
 800045e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000530 	.word	0x20000530
 800046c:	20000532 	.word	0x20000532
 8000470:	20000531 	.word	0x20000531

08000474 <DFRobot_ID809_detectFingers>:

uint8_t DFRobot_ID809_detectFingers(){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_FINGER_DETECT, NULL, 0);
 800047a:	2300      	movs	r3, #0
 800047c:	2200      	movs	r2, #0
 800047e:	2121      	movs	r1, #33	; 0x21
 8000480:	20f0      	movs	r0, #240	; 0xf0
 8000482:	f000 f8ff 	bl	8000684 <DFRobot_ID809_pack>
 8000486:	6038      	str	r0, [r7, #0]
    DFRobot_ID809_sendPacket(header);
 8000488:	6838      	ldr	r0, [r7, #0]
 800048a:	f000 f975 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 800048e:	6838      	ldr	r0, [r7, #0]
 8000490:	f00d fa62 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 8000494:	4807      	ldr	r0, [pc, #28]	; (80004b4 <DFRobot_ID809_detectFingers+0x40>)
 8000496:	f000 f983 	bl	80007a0 <DFRobot_ID809_responsePayload>
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
    if(ret == ERR_SUCCESS){
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d102      	bne.n	80004aa <DFRobot_ID809_detectFingers+0x36>
        ret = buf[0];
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <DFRobot_ID809_detectFingers+0x40>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	71fb      	strb	r3, [r7, #7]
    }
    return ret;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000051c 	.word	0x2000051c

080004b8 <DFRobot_ID809_generate>:

uint8_t DFRobot_ID809_generate(uint8_t RamBufferID){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
    char data[2] = {0};
 80004c2:	2300      	movs	r3, #0
 80004c4:	813b      	strh	r3, [r7, #8]
    data[0] = RamBufferID;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	723b      	strb	r3, [r7, #8]
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_GENERATE, (const char *)data, 2);
 80004ca:	f107 0208 	add.w	r2, r7, #8
 80004ce:	2302      	movs	r3, #2
 80004d0:	2160      	movs	r1, #96	; 0x60
 80004d2:	20f0      	movs	r0, #240	; 0xf0
 80004d4:	f000 f8d6 	bl	8000684 <DFRobot_ID809_pack>
 80004d8:	60f8      	str	r0, [r7, #12]
    DFRobot_ID809_sendPacket(header);
 80004da:	68f8      	ldr	r0, [r7, #12]
 80004dc:	f000 f94c 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f00d fa39 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <DFRobot_ID809_generate+0x44>)
 80004e8:	f000 f95a 	bl	80007a0 <DFRobot_ID809_responsePayload>
 80004ec:	4603      	mov	r3, r0
 80004ee:	72fb      	strb	r3, [r7, #11]
    return ret;
 80004f0:	7afb      	ldrb	r3, [r7, #11]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000051c 	.word	0x2000051c

08000500 <DFRobot_ID809_search>:

uint8_t DFRobot_ID809_search(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
    if(_state == 1){
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <DFRobot_ID809_search+0x68>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d127      	bne.n	800055e <DFRobot_ID809_search+0x5e>
        char data[6] = {0};
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	80bb      	strh	r3, [r7, #4]
        data[2] = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	70bb      	strb	r3, [r7, #2]
        data[4] = FINGERPRINT_CAPACITY;
 800051a:	2350      	movs	r3, #80	; 0x50
 800051c:	713b      	strb	r3, [r7, #4]
        _number = 0;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <DFRobot_ID809_search+0x6c>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
        pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_SEARCH, data, 6);
 8000524:	463a      	mov	r2, r7
 8000526:	2306      	movs	r3, #6
 8000528:	2163      	movs	r1, #99	; 0x63
 800052a:	20f0      	movs	r0, #240	; 0xf0
 800052c:	f000 f8aa 	bl	8000684 <DFRobot_ID809_pack>
 8000530:	60b8      	str	r0, [r7, #8]
        DFRobot_ID809_sendPacket(header);
 8000532:	68b8      	ldr	r0, [r7, #8]
 8000534:	f000 f920 	bl	8000778 <DFRobot_ID809_sendPacket>
        free(header);
 8000538:	68b8      	ldr	r0, [r7, #8]
 800053a:	f00d fa0d 	bl	800d958 <free>
        uint8_t ret = DFRobot_ID809_responsePayload(buf);
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <DFRobot_ID809_search+0x70>)
 8000540:	f000 f92e 	bl	80007a0 <DFRobot_ID809_responsePayload>
 8000544:	4603      	mov	r3, r0
 8000546:	73fb      	strb	r3, [r7, #15]
        if(ret == ERR_SUCCESS){
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <DFRobot_ID809_search+0x56>
            ret = buf[0];
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <DFRobot_ID809_search+0x70>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e001      	b.n	800055a <DFRobot_ID809_search+0x5a>
        }else{
            ret = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]
        }
        return ret;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	e000      	b.n	8000560 <DFRobot_ID809_search+0x60>
    }
    return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000531 	.word	0x20000531
 800056c:	20000530 	.word	0x20000530
 8000570:	2000051c 	.word	0x2000051c

08000574 <DFRobot_ID809_delFingerprint>:

uint8_t DFRobot_ID809_delFingerprint(uint8_t ID)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  char data[4] = {0};
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  if(ID == DELALL) {
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2bff      	cmp	r3, #255	; 0xff
 8000586:	d104      	bne.n	8000592 <DFRobot_ID809_delFingerprint+0x1e>
    data[0] = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	733b      	strb	r3, [r7, #12]
    data[2] = FINGERPRINT_CAPACITY;
 800058c:	2350      	movs	r3, #80	; 0x50
 800058e:	73bb      	strb	r3, [r7, #14]
 8000590:	e003      	b.n	800059a <DFRobot_ID809_delFingerprint+0x26>
  } else {
    data[0] = data[2] = ID;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	73bb      	strb	r3, [r7, #14]
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	733b      	strb	r3, [r7, #12]
  }
  pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_DEL_CHAR, data, 4);
 800059a:	f107 020c 	add.w	r2, r7, #12
 800059e:	2304      	movs	r3, #4
 80005a0:	2144      	movs	r1, #68	; 0x44
 80005a2:	20f0      	movs	r0, #240	; 0xf0
 80005a4:	f000 f86e 	bl	8000684 <DFRobot_ID809_pack>
 80005a8:	6178      	str	r0, [r7, #20]
  DFRobot_ID809_sendPacket(header);
 80005aa:	6978      	ldr	r0, [r7, #20]
 80005ac:	f000 f8e4 	bl	8000778 <DFRobot_ID809_sendPacket>
  free(header);
 80005b0:	6978      	ldr	r0, [r7, #20]
 80005b2:	f00d f9d1 	bl	800d958 <free>
  uint8_t ret = DFRobot_ID809_responsePayload(buf);
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <DFRobot_ID809_delFingerprint+0x58>)
 80005b8:	f000 f8f2 	bl	80007a0 <DFRobot_ID809_responsePayload>
 80005bc:	4603      	mov	r3, r0
 80005be:	74fb      	strb	r3, [r7, #19]
  return ret;
 80005c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000051c 	.word	0x2000051c

080005d0 <DFRobot_ID809_storeFingerprint>:


uint8_t DFRobot_ID809_storeFingerprint(uint8_t ID){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
    char data[4] = {0};
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
    uint8_t ret;
    ret = DFRobot_ID809_merge();
 80005de:	f000 f829 	bl	8000634 <DFRobot_ID809_merge>
 80005e2:	4603      	mov	r3, r0
 80005e4:	75fb      	strb	r3, [r7, #23]
    if(ret != ERR_SUCCESS){
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <DFRobot_ID809_storeFingerprint+0x20>
        return ERR_ID809;
 80005ec:	23ff      	movs	r3, #255	; 0xff
 80005ee:	e018      	b.n	8000622 <DFRobot_ID809_storeFingerprint+0x52>
    }
    _number = 0;
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <DFRobot_ID809_storeFingerprint+0x5c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
    data[0] = ID;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	733b      	strb	r3, [r7, #12]
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_STORE_CHAR, data, 4);
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	2304      	movs	r3, #4
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	20f0      	movs	r0, #240	; 0xf0
 8000604:	f000 f83e 	bl	8000684 <DFRobot_ID809_pack>
 8000608:	6138      	str	r0, [r7, #16]
    DFRobot_ID809_sendPacket(header);
 800060a:	6938      	ldr	r0, [r7, #16]
 800060c:	f000 f8b4 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 8000610:	6938      	ldr	r0, [r7, #16]
 8000612:	f00d f9a1 	bl	800d958 <free>
    ret = DFRobot_ID809_responsePayload(buf);
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <DFRobot_ID809_storeFingerprint+0x60>)
 8000618:	f000 f8c2 	bl	80007a0 <DFRobot_ID809_responsePayload>
 800061c:	4603      	mov	r3, r0
 800061e:	75fb      	strb	r3, [r7, #23]
    return ret;
 8000620:	7dfb      	ldrb	r3, [r7, #23]

}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000530 	.word	0x20000530
 8000630:	2000051c 	.word	0x2000051c

08000634 <DFRobot_ID809_merge>:

uint8_t DFRobot_ID809_merge(){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
    char data[3] = {0};
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <DFRobot_ID809_merge+0x44>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	803b      	strh	r3, [r7, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	70bb      	strb	r3, [r7, #2]
    data[2] = _number;
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <DFRobot_ID809_merge+0x48>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	70bb      	strb	r3, [r7, #2]
    pCmdPacketHeader_t header = DFRobot_ID809_pack(CMD_TYPE, CMD_MERGE, data, 3);
 800064a:	463a      	mov	r2, r7
 800064c:	2303      	movs	r3, #3
 800064e:	2161      	movs	r1, #97	; 0x61
 8000650:	20f0      	movs	r0, #240	; 0xf0
 8000652:	f000 f817 	bl	8000684 <DFRobot_ID809_pack>
 8000656:	6078      	str	r0, [r7, #4]
    DFRobot_ID809_sendPacket(header);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f88d 	bl	8000778 <DFRobot_ID809_sendPacket>
    free(header);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f00d f97a 	bl	800d958 <free>
    uint8_t ret = DFRobot_ID809_responsePayload(buf);
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <DFRobot_ID809_merge+0x4c>)
 8000666:	f000 f89b 	bl	80007a0 <DFRobot_ID809_responsePayload>
 800066a:	4603      	mov	r3, r0
 800066c:	70fb      	strb	r3, [r7, #3]
    return ret;
 800066e:	78fb      	ldrb	r3, [r7, #3]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	0800e2c0 	.word	0x0800e2c0
 800067c:	20000530 	.word	0x20000530
 8000680:	2000051c 	.word	0x2000051c

08000684 <DFRobot_ID809_pack>:





pCmdPacketHeader_t DFRobot_ID809_pack(uint8_t type, uint16_t cmd, const char *payload, uint16_t len){
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	60ba      	str	r2, [r7, #8]
 800068c:	461a      	mov	r2, r3
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	460b      	mov	r3, r1
 8000694:	81bb      	strh	r3, [r7, #12]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
    pCmdPacketHeader_t header;
    uint16_t cks=0;
 800069a:	2300      	movs	r3, #0
 800069c:	827b      	strh	r3, [r7, #18]
    uint16_t dataLen;
    if(type == CMD_TYPE){    //Structure of command packet, fixed 26 bytes：10(frame header)+14(data)+2(CKS)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	2bf0      	cmp	r3, #240	; 0xf0
 80006a2:	d124      	bne.n	80006ee <DFRobot_ID809_pack+0x6a>
        if((header = (pCmdPacketHeader_t)malloc(sizeof(sCmdPacketHeader_t)+16+2)) == NULL){
 80006a4:	201a      	movs	r0, #26
 80006a6:	f00d f94f 	bl	800d948 <malloc>
 80006aa:	4603      	mov	r3, r0
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <DFRobot_ID809_pack+0x34>
            return NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e058      	b.n	800076a <DFRobot_ID809_pack+0xe6>
        }
        header->PREFIX = CMD_PREFIX_CODE;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	2200      	movs	r2, #0
 80006bc:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f062 0255 	orn	r2, r2, #85	; 0x55
 80006c8:	705a      	strb	r2, [r3, #1]
        for(int i=0;i<16;i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e008      	b.n	80006e2 <DFRobot_ID809_pack+0x5e>
            header->payload[i] = 0;
 80006d0:	69fa      	ldr	r2, [r7, #28]
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	4413      	add	r3, r2
 80006d6:	3308      	adds	r3, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
        for(int i=0;i<16;i++){
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	ddf3      	ble.n	80006d0 <DFRobot_ID809_pack+0x4c>
        }
        dataLen = 16;   //Length of data to be replicated
 80006e8:	2310      	movs	r3, #16
 80006ea:	837b      	strh	r3, [r7, #26]
 80006ec:	e016      	b.n	800071c <DFRobot_ID809_pack+0x98>
    }else{                   //Structure of command data packet, unfixed length：10(frame header)+LEN(data)+2(CKS)
        if((header = (pCmdPacketHeader_t)malloc(sizeof(sCmdPacketHeader_t)+len+2)) == NULL){
 80006ee:	88fb      	ldrh	r3, [r7, #6]
 80006f0:	330a      	adds	r3, #10
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00d f928 	bl	800d948 <malloc>
 80006f8:	4603      	mov	r3, r0
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d101      	bne.n	8000706 <DFRobot_ID809_pack+0x82>
            return NULL;
 8000702:	2300      	movs	r3, #0
 8000704:	e031      	b.n	800076a <DFRobot_ID809_pack+0xe6>
        }
        header->PREFIX = CMD_DATA_PREFIX_CODE;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	2200      	movs	r2, #0
 800070a:	f042 025a 	orr.w	r2, r2, #90	; 0x5a
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	f062 025a 	orn	r2, r2, #90	; 0x5a
 8000716:	705a      	strb	r2, [r3, #1]
        dataLen = len;   //Length of data to be replicated
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	837b      	strh	r3, [r7, #26]
    }
    header->SID = 0;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2200      	movs	r2, #0
 8000720:	709a      	strb	r2, [r3, #2]
    header->DID = 0;
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2200      	movs	r2, #0
 8000726:	70da      	strb	r2, [r3, #3]
    header->CMD = cmd;
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	89ba      	ldrh	r2, [r7, #12]
 800072c:	809a      	strh	r2, [r3, #4]
    header->LEN = len;
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	80da      	strh	r2, [r3, #6]
    if(len){
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <DFRobot_ID809_pack+0xc4>
        memcpy(header->payload, payload, len);
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3308      	adds	r3, #8
 800073e:	88fa      	ldrh	r2, [r7, #6]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4618      	mov	r0, r3
 8000744:	f00d f910 	bl	800d968 <memcpy>
    }
    cks = DFRobot_ID809_getCmdCKS(header);
 8000748:	69f8      	ldr	r0, [r7, #28]
 800074a:	f000 f97e 	bl	8000a4a <DFRobot_ID809_getCmdCKS>
 800074e:	4603      	mov	r3, r0
 8000750:	827b      	strh	r3, [r7, #18]
    memcpy(&header->payload[dataLen],&cks,2);
 8000752:	8b7b      	ldrh	r3, [r7, #26]
 8000754:	3308      	adds	r3, #8
 8000756:	69fa      	ldr	r2, [r7, #28]
 8000758:	4413      	add	r3, r2
 800075a:	8a7a      	ldrh	r2, [r7, #18]
 800075c:	801a      	strh	r2, [r3, #0]
    _PacketSize = sizeof(sCmdPacketHeader_t) + dataLen +2;
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	330a      	adds	r3, #10
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <DFRobot_ID809_pack+0xf0>)
 8000766:	801a      	strh	r2, [r3, #0]
    return header;
 8000768:	69fb      	ldr	r3, [r7, #28]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000534 	.word	0x20000534

08000778 <DFRobot_ID809_sendPacket>:

void DFRobot_ID809_sendPacket(pCmdPacketHeader_t header){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, header, _PacketSize, 0xFFFF);
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <DFRobot_ID809_sendPacket+0x20>)
 8000782:	881a      	ldrh	r2, [r3, #0]
 8000784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <DFRobot_ID809_sendPacket+0x24>)
 800078c:	f006 fe0f 	bl	80073ae <HAL_UART_Transmit>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000534 	.word	0x20000534
 800079c:	200006c0 	.word	0x200006c0

080007a0 <DFRobot_ID809_responsePayload>:

uint8_t DFRobot_ID809_responsePayload(void* buf){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    sRcmPacketHeader_t header;
    uint16_t dataLen,dataCount,cks;
    uint8_t ch,ret;
    int16_t type;
    type = DFRobot_ID809_readPrefix(&header);
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f87f 	bl	80008b0 <DFRobot_ID809_readPrefix>
 80007b2:	4603      	mov	r3, r0
 80007b4:	82fb      	strh	r3, [r7, #22]
    if(type == 1){
 80007b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d104      	bne.n	80007c8 <DFRobot_ID809_responsePayload+0x28>
        _error = eErrorRecvTimeout;
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <DFRobot_ID809_responsePayload+0x10c>)
 80007c0:	2246      	movs	r2, #70	; 0x46
 80007c2:	701a      	strb	r2, [r3, #0]
        return ERR_ID809;
 80007c4:	23ff      	movs	r3, #255	; 0xff
 80007c6:	e06d      	b.n	80008a4 <DFRobot_ID809_responsePayload+0x104>
    }
    pRcmPacketHeader_t packet;
    if(type == RCM_TYPE){    //Structure of response packet, fixed 26 bytes: 10(frame header)+14(data)+2(CKS)
 80007c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007cc:	2bf0      	cmp	r3, #240	; 0xf0
 80007ce:	d10a      	bne.n	80007e6 <DFRobot_ID809_responsePayload+0x46>
        packet = (pRcmPacketHeader_t)malloc(sizeof(sRcmPacketHeader_t)+14+2);
 80007d0:	201a      	movs	r0, #26
 80007d2:	f00d f8b9 	bl	800d948 <malloc>
 80007d6:	4603      	mov	r3, r0
 80007d8:	61bb      	str	r3, [r7, #24]
        dataLen = 14+2;      //Length of data+CKS
 80007da:	2310      	movs	r3, #16
 80007dc:	83fb      	strh	r3, [r7, #30]
        if(packet == NULL){
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10d      	bne.n	8000800 <DFRobot_ID809_responsePayload+0x60>
            printf("");
            while(1);
 80007e4:	e7fe      	b.n	80007e4 <DFRobot_ID809_responsePayload+0x44>
        }
    }else{                   //Structure of response data packet, unfixed length: 10(frame header)+(LEN-2)(data)+2(CKS)
        packet = (pRcmPacketHeader_t)malloc(sizeof(sRcmPacketHeader_t)+header.LEN);
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	330a      	adds	r3, #10
 80007ea:	4618      	mov	r0, r3
 80007ec:	f00d f8ac 	bl	800d948 <malloc>
 80007f0:	4603      	mov	r3, r0
 80007f2:	61bb      	str	r3, [r7, #24]
        dataLen = header.LEN;  //Length of data+CKS
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	83fb      	strh	r3, [r7, #30]
        if(packet == NULL){
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d100      	bne.n	8000800 <DFRobot_ID809_responsePayload+0x60>
            printf("");
            while(1);
 80007fe:	e7fe      	b.n	80007fe <DFRobot_ID809_responsePayload+0x5e>
        }
    }
    memcpy(packet, &header, 10);
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	461a      	mov	r2, r3
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	cb03      	ldmia	r3!, {r0, r1}
 800080a:	6010      	str	r0, [r2, #0]
 800080c:	6051      	str	r1, [r2, #4]
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	8113      	strh	r3, [r2, #8]
    dataCount = DFRobot_ID809_readN(packet->payload, dataLen);
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	330a      	adds	r3, #10
 8000816:	8bfa      	ldrh	r2, [r7, #30]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f8d2 	bl	80009c4 <DFRobot_ID809_readN>
 8000820:	4603      	mov	r3, r0
 8000822:	82bb      	strh	r3, [r7, #20]
    cks = packet->payload[dataLen-2]+(packet->payload[dataLen-1]<<8);
 8000824:	8bfb      	ldrh	r3, [r7, #30]
 8000826:	3b02      	subs	r3, #2
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4413      	add	r3, r2
 800082c:	7a9b      	ldrb	r3, [r3, #10]
 800082e:	b29a      	uxth	r2, r3
 8000830:	8bfb      	ldrh	r3, [r7, #30]
 8000832:	3b01      	subs	r3, #1
 8000834:	69b9      	ldr	r1, [r7, #24]
 8000836:	440b      	add	r3, r1
 8000838:	7a9b      	ldrb	r3, [r3, #10]
 800083a:	b29b      	uxth	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	4413      	add	r3, r2
 8000842:	827b      	strh	r3, [r7, #18]
    ret = (header.RET&0xFF);
 8000844:	8a3b      	ldrh	r3, [r7, #16]
 8000846:	777b      	strb	r3, [r7, #29]
    _error = (eError_t)ret;
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <DFRobot_ID809_responsePayload+0x10c>)
 800084a:	7f7b      	ldrb	r3, [r7, #29]
 800084c:	7013      	strb	r3, [r2, #0]
    if(ret != ERR_SUCCESS){
 800084e:	7f7b      	ldrb	r3, [r7, #29]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <DFRobot_ID809_responsePayload+0xba>
        ret = ERR_ID809;
 8000854:	23ff      	movs	r3, #255	; 0xff
 8000856:	777b      	strb	r3, [r7, #29]
 8000858:	e01e      	b.n	8000898 <DFRobot_ID809_responsePayload+0xf8>
    }else if(dataLen != dataCount){
 800085a:	8bfa      	ldrh	r2, [r7, #30]
 800085c:	8abb      	ldrh	r3, [r7, #20]
 800085e:	429a      	cmp	r2, r3
 8000860:	d005      	beq.n	800086e <DFRobot_ID809_responsePayload+0xce>
        _error = eErrorRecvLength;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <DFRobot_ID809_responsePayload+0x10c>)
 8000864:	2242      	movs	r2, #66	; 0x42
 8000866:	701a      	strb	r2, [r3, #0]
        ret = ERR_ID809;
 8000868:	23ff      	movs	r3, #255	; 0xff
 800086a:	777b      	strb	r3, [r7, #29]
 800086c:	e014      	b.n	8000898 <DFRobot_ID809_responsePayload+0xf8>
    }else if(DFRobot_ID809_getRcmCKS(packet) != cks){
 800086e:	69b8      	ldr	r0, [r7, #24]
 8000870:	f000 f93f 	bl	8000af2 <DFRobot_ID809_getRcmCKS>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	8a7b      	ldrh	r3, [r7, #18]
 800087a:	4293      	cmp	r3, r2
 800087c:	d005      	beq.n	800088a <DFRobot_ID809_responsePayload+0xea>
        _error = eErrorRecvCks;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <DFRobot_ID809_responsePayload+0x10c>)
 8000880:	2243      	movs	r2, #67	; 0x43
 8000882:	701a      	strb	r2, [r3, #0]
        ret = ERR_ID809;
 8000884:	23ff      	movs	r3, #255	; 0xff
 8000886:	777b      	strb	r3, [r7, #29]
 8000888:	e006      	b.n	8000898 <DFRobot_ID809_responsePayload+0xf8>
    }else{
        memcpy(buf, packet->payload, dataLen);
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	330a      	adds	r3, #10
 800088e:	8bfa      	ldrh	r2, [r7, #30]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f00d f868 	bl	800d968 <memcpy>
    }
    free(packet);
 8000898:	69b8      	ldr	r0, [r7, #24]
 800089a:	f00d f85d 	bl	800d958 <free>
    packet = NULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
    return ret;
 80008a2:	7f7b      	ldrb	r3, [r7, #29]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000532 	.word	0x20000532

080008b0 <DFRobot_ID809_readPrefix>:

uint16_t DFRobot_ID809_readPrefix( pRcmPacketHeader_t header ){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
        RECV_HEADER_INIT,
        RECV_HEADER_AA,
        RECV_HEADER_A5,
        RECV_HEADER_OK
    }eRecvHeaderState;
    eRecvHeaderState state = RECV_HEADER_INIT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73bb      	strb	r3, [r7, #14]
    while(state != RECV_HEADER_OK){   //Can judge the received command packet and command data packet prefix at the same time
 80008bc:	e042      	b.n	8000944 <DFRobot_ID809_readPrefix+0x94>
        if(DFRobot_ID809_readN(&ch, 1) != 1){
 80008be:	f107 030d 	add.w	r3, r7, #13
 80008c2:	2101      	movs	r1, #1
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f87d 	bl	80009c4 <DFRobot_ID809_readN>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d004      	beq.n	80008da <DFRobot_ID809_readPrefix+0x2a>
            ret = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
            return ret;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	e070      	b.n	80009bc <DFRobot_ID809_readPrefix+0x10c>
        }
        if((ch == 0xAA) && (state == RECV_HEADER_INIT)){
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	2baa      	cmp	r3, #170	; 0xaa
 80008de:	d105      	bne.n	80008ec <DFRobot_ID809_readPrefix+0x3c>
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <DFRobot_ID809_readPrefix+0x3c>
            state = RECV_HEADER_AA;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73bb      	strb	r3, [r7, #14]
            continue;
 80008ea:	e02b      	b.n	8000944 <DFRobot_ID809_readPrefix+0x94>
        }else if((ch == 0xA5) && (state == RECV_HEADER_INIT)){
 80008ec:	7b7b      	ldrb	r3, [r7, #13]
 80008ee:	2ba5      	cmp	r3, #165	; 0xa5
 80008f0:	d105      	bne.n	80008fe <DFRobot_ID809_readPrefix+0x4e>
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <DFRobot_ID809_readPrefix+0x4e>
            state = RECV_HEADER_A5;
 80008f8:	2302      	movs	r3, #2
 80008fa:	73bb      	strb	r3, [r7, #14]
            continue;
 80008fc:	e022      	b.n	8000944 <DFRobot_ID809_readPrefix+0x94>
        }else if((ch == 0x55) && (state == RECV_HEADER_AA)){
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	2b55      	cmp	r3, #85	; 0x55
 8000902:	d107      	bne.n	8000914 <DFRobot_ID809_readPrefix+0x64>
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d104      	bne.n	8000914 <DFRobot_ID809_readPrefix+0x64>
            state = RECV_HEADER_OK;
 800090a:	2303      	movs	r3, #3
 800090c:	73bb      	strb	r3, [r7, #14]
            ret = RCM_TYPE;
 800090e:	23f0      	movs	r3, #240	; 0xf0
 8000910:	73fb      	strb	r3, [r7, #15]
            continue;
 8000912:	e017      	b.n	8000944 <DFRobot_ID809_readPrefix+0x94>
        }else if((ch == 0x5A) && (state == RECV_HEADER_A5)){
 8000914:	7b7b      	ldrb	r3, [r7, #13]
 8000916:	2b5a      	cmp	r3, #90	; 0x5a
 8000918:	d107      	bne.n	800092a <DFRobot_ID809_readPrefix+0x7a>
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d104      	bne.n	800092a <DFRobot_ID809_readPrefix+0x7a>
            state = RECV_HEADER_OK;
 8000920:	2303      	movs	r3, #3
 8000922:	73bb      	strb	r3, [r7, #14]
            ret = DATA_TYPE;
 8000924:	230f      	movs	r3, #15
 8000926:	73fb      	strb	r3, [r7, #15]
            continue;
 8000928:	e00c      	b.n	8000944 <DFRobot_ID809_readPrefix+0x94>
        }else{
            state = RECV_HEADER_INIT;
 800092a:	2300      	movs	r3, #0
 800092c:	73bb      	strb	r3, [r7, #14]
            if(ch == 0xAA){
 800092e:	7b7b      	ldrb	r3, [r7, #13]
 8000930:	2baa      	cmp	r3, #170	; 0xaa
 8000932:	d102      	bne.n	800093a <DFRobot_ID809_readPrefix+0x8a>
                state = RECV_HEADER_AA;
 8000934:	2301      	movs	r3, #1
 8000936:	73bb      	strb	r3, [r7, #14]
 8000938:	e004      	b.n	8000944 <DFRobot_ID809_readPrefix+0x94>
            }else if(ch == 0xA5){
 800093a:	7b7b      	ldrb	r3, [r7, #13]
 800093c:	2ba5      	cmp	r3, #165	; 0xa5
 800093e:	d101      	bne.n	8000944 <DFRobot_ID809_readPrefix+0x94>
                state = RECV_HEADER_A5;
 8000940:	2302      	movs	r3, #2
 8000942:	73bb      	strb	r3, [r7, #14]
    while(state != RECV_HEADER_OK){   //Can judge the received command packet and command data packet prefix at the same time
 8000944:	7bbb      	ldrb	r3, [r7, #14]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d1b9      	bne.n	80008be <DFRobot_ID809_readPrefix+0xe>
            }
        }
    }
    if(ret == RCM_TYPE){
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	2bf0      	cmp	r3, #240	; 0xf0
 800094e:	d109      	bne.n	8000964 <DFRobot_ID809_readPrefix+0xb4>
        header->PREFIX = RCM_PREFIX_CODE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	f062 0255 	orn	r2, r2, #85	; 0x55
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8000960:	705a      	strb	r2, [r3, #1]
 8000962:	e00b      	b.n	800097c <DFRobot_ID809_readPrefix+0xcc>
    }else if(ret == DATA_TYPE){
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b0f      	cmp	r3, #15
 8000968:	d108      	bne.n	800097c <DFRobot_ID809_readPrefix+0xcc>
        header->PREFIX = RCM_DATA_PREFIX_CODE;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f062 025a 	orn	r2, r2, #90	; 0x5a
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	f042 025a 	orr.w	r2, r2, #90	; 0x5a
 800097a:	705a      	strb	r2, [r3, #1]
    }
    DFRobot_ID809_readN(&header->SID, 1);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3302      	adds	r3, #2
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f81e 	bl	80009c4 <DFRobot_ID809_readN>
    DFRobot_ID809_readN(&header->DID, 1);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3303      	adds	r3, #3
 800098c:	2101      	movs	r1, #1
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f818 	bl	80009c4 <DFRobot_ID809_readN>
    DFRobot_ID809_readN(&header->RCM, 2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3304      	adds	r3, #4
 8000998:	2102      	movs	r1, #2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f812 	bl	80009c4 <DFRobot_ID809_readN>
    DFRobot_ID809_readN(&header->LEN, 2);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3306      	adds	r3, #6
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f80c 	bl	80009c4 <DFRobot_ID809_readN>
    DFRobot_ID809_readN(&header->RET, 2);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3308      	adds	r3, #8
 80009b0:	2102      	movs	r1, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f806 	bl	80009c4 <DFRobot_ID809_readN>
    return ret;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	b29b      	uxth	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <DFRobot_ID809_readN>:

size_t DFRobot_ID809_readN(void* buffer, size_t len){
 80009c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	b089      	sub	sp, #36	; 0x24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
    size_t offset = 0,left = len;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	61bb      	str	r3, [r7, #24]
    uint8_t *buf = (uint8_t*)buffer;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	617b      	str	r3, [r7, #20]
    long long curr = HAL_GetTick();
 80009dc:	f002 f80e 	bl	80029fc <HAL_GetTick>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2200      	movs	r2, #0
 80009e4:	469a      	mov	sl, r3
 80009e6:	4693      	mov	fp, r2
 80009e8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
    while(left){
 80009ec:	e022      	b.n	8000a34 <DFRobot_ID809_readN+0x70>
        if(UART_Is_Available()){
 80009ee:	f7ff fbcb 	bl	8000188 <UART_Is_Available>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00b      	beq.n	8000a10 <DFRobot_ID809_readN+0x4c>
        	buf[offset++] = UART_Read();
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	61fa      	str	r2, [r7, #28]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	18d6      	adds	r6, r2, r3
 8000a02:	f7ff fbd1 	bl	80001a8 <UART_Read>
 8000a06:	4603      	mov	r3, r0
 8000a08:	7033      	strb	r3, [r6, #0]
            left--;
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
        }
        if(HAL_GetTick() - curr > 5000){
 8000a10:	f001 fff4 	bl	80029fc <HAL_GetTick>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2200      	movs	r2, #0
 8000a18:	4698      	mov	r8, r3
 8000a1a:	4691      	mov	r9, r2
 8000a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a20:	ebb8 0402 	subs.w	r4, r8, r2
 8000a24:	eb69 0503 	sbc.w	r5, r9, r3
 8000a28:	f241 3389 	movw	r3, #5001	; 0x1389
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	f175 0300 	sbcs.w	r3, r5, #0
 8000a32:	da03      	bge.n	8000a3c <DFRobot_ID809_readN+0x78>
    while(left){
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1d9      	bne.n	80009ee <DFRobot_ID809_readN+0x2a>
 8000a3a:	e000      	b.n	8000a3e <DFRobot_ID809_readN+0x7a>
            break;
 8000a3c:	bf00      	nop
        }
    }
    return offset;
 8000a3e:	69fb      	ldr	r3, [r7, #28]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3724      	adds	r7, #36	; 0x24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a4a <DFRobot_ID809_getCmdCKS>:

uint16_t DFRobot_ID809_getCmdCKS(pCmdPacketHeader_t packet){
 8000a4a:	b480      	push	{r7}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
    uint16_t cks = 0xFF;
 8000a52:	23ff      	movs	r3, #255	; 0xff
 8000a54:	81fb      	strh	r3, [r7, #14]
    cks += packet->SID;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	4413      	add	r3, r2
 8000a60:	81fb      	strh	r3, [r7, #14]
    cks += packet->DID;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	78db      	ldrb	r3, [r3, #3]
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	81fb      	strh	r3, [r7, #14]
    cks += packet->CMD&0xFF;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	889b      	ldrh	r3, [r3, #4]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	81fb      	strh	r3, [r7, #14]
    cks += packet->CMD>>8;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	89fb      	ldrh	r3, [r7, #14]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	81fb      	strh	r3, [r7, #14]
    cks += packet->LEN&0xFF;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	81fb      	strh	r3, [r7, #14]
    cks += packet->LEN>>8;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	88db      	ldrh	r3, [r3, #6]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	4413      	add	r3, r2
 8000aac:	81fb      	strh	r3, [r7, #14]
    if(packet->LEN > 0){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	88db      	ldrh	r3, [r3, #6]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d016      	beq.n	8000ae6 <DFRobot_ID809_getCmdCKS+0x9c>
        uint8_t *p = packet->payload;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3308      	adds	r3, #8
 8000abc:	60bb      	str	r3, [r7, #8]
        for(uint16_t i = 0; i < packet->LEN; i++){
 8000abe:	2300      	movs	r3, #0
 8000ac0:	81bb      	strh	r3, [r7, #12]
 8000ac2:	e00a      	b.n	8000ada <DFRobot_ID809_getCmdCKS+0x90>
            cks += p[i];
 8000ac4:	89bb      	ldrh	r3, [r7, #12]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	81fb      	strh	r3, [r7, #14]
        for(uint16_t i = 0; i < packet->LEN; i++){
 8000ad4:	89bb      	ldrh	r3, [r7, #12]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81bb      	strh	r3, [r7, #12]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	89ba      	ldrh	r2, [r7, #12]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3ee      	bcc.n	8000ac4 <DFRobot_ID809_getCmdCKS+0x7a>
        }
    }
    return cks&0xFFFF;
 8000ae6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <DFRobot_ID809_getRcmCKS>:

uint16_t DFRobot_ID809_getRcmCKS(pRcmPacketHeader_t packet){
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
    uint16_t cks = 0xFF;
 8000afa:	23ff      	movs	r3, #255	; 0xff
 8000afc:	81fb      	strh	r3, [r7, #14]
    cks += packet->SID;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	789b      	ldrb	r3, [r3, #2]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	4413      	add	r3, r2
 8000b08:	81fb      	strh	r3, [r7, #14]
    cks += packet->DID;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	78db      	ldrb	r3, [r3, #3]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	4413      	add	r3, r2
 8000b14:	81fb      	strh	r3, [r7, #14]
    cks += packet->RCM&0xFF;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	4413      	add	r3, r2
 8000b24:	81fb      	strh	r3, [r7, #14]
    cks += packet->RCM>>8;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	889b      	ldrh	r3, [r3, #4]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	4413      	add	r3, r2
 8000b34:	81fb      	strh	r3, [r7, #14]
    cks += packet->LEN&0xFF;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	88db      	ldrh	r3, [r3, #6]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	4413      	add	r3, r2
 8000b44:	81fb      	strh	r3, [r7, #14]
    cks += packet->LEN>>8;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	88db      	ldrh	r3, [r3, #6]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	4413      	add	r3, r2
 8000b54:	81fb      	strh	r3, [r7, #14]
    cks += packet->RET&0xFF;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	891b      	ldrh	r3, [r3, #8]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	89fb      	ldrh	r3, [r7, #14]
 8000b62:	4413      	add	r3, r2
 8000b64:	81fb      	strh	r3, [r7, #14]
    cks += packet->RET>>8;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	891b      	ldrh	r3, [r3, #8]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	4413      	add	r3, r2
 8000b74:	81fb      	strh	r3, [r7, #14]
    if(packet->LEN > 0){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	88db      	ldrh	r3, [r3, #6]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d017      	beq.n	8000bb0 <DFRobot_ID809_getRcmCKS+0xbe>
        uint8_t *p = packet->payload;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	330a      	adds	r3, #10
 8000b84:	60bb      	str	r3, [r7, #8]
        for(uint16_t i = 0; i < packet->LEN-2; i++){
 8000b86:	2300      	movs	r3, #0
 8000b88:	81bb      	strh	r3, [r7, #12]
 8000b8a:	e00a      	b.n	8000ba2 <DFRobot_ID809_getRcmCKS+0xb0>
            cks += p[i];
 8000b8c:	89bb      	ldrh	r3, [r7, #12]
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	4413      	add	r3, r2
 8000b9a:	81fb      	strh	r3, [r7, #14]
        for(uint16_t i = 0; i < packet->LEN-2; i++){
 8000b9c:	89bb      	ldrh	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	81bb      	strh	r3, [r7, #12]
 8000ba2:	89ba      	ldrh	r2, [r7, #12]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	88db      	ldrh	r3, [r3, #6]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	3b02      	subs	r3, #2
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbed      	blt.n	8000b8c <DFRobot_ID809_getRcmCKS+0x9a>
        }
    }
    return cks&0xFFFF;
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <testFingerPrint>:



bool testFingerPrint() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  DFRobot_ID809_ctrlLED(/*LEDMode = */eBreathing, /*LEDColor = */eLEDBlue, /*blinkCount = */0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2104      	movs	r1, #4
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fb9a 	bl	8000304 <DFRobot_ID809_ctrlLED>
  if ((DFRobot_ID809_collectionFingerprint(0, 0)) != ERR_ID809) {
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fbe0 	bl	8000398 <DFRobot_ID809_collectionFingerprint>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	d01f      	beq.n	8000c1e <testFingerPrint+0x62>
	  DFRobot_ID809_ctrlLED(/*LEDMode = */eFastBlink, /*LEDColor = */eLEDYellow, /*blinkCount = */3);
 8000bde:	2203      	movs	r2, #3
 8000be0:	2103      	movs	r1, #3
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fb8e 	bl	8000304 <DFRobot_ID809_ctrlLED>
    while (DFRobot_ID809_detectFingers());
 8000be8:	bf00      	nop
 8000bea:	f7ff fc43 	bl	8000474 <DFRobot_ID809_detectFingers>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1fa      	bne.n	8000bea <testFingerPrint+0x2e>
    ret = DFRobot_ID809_search();
 8000bf4:	f7ff fc84 	bl	8000500 <DFRobot_ID809_search>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
    if (ret != 0) {
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <testFingerPrint+0x54>
    	DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDGreen, /*blinkCount = */0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff fb7c 	bl	8000304 <DFRobot_ID809_ctrlLED>
    	return true;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e00c      	b.n	8000c2a <testFingerPrint+0x6e>
    } else {
    	DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDRed, /*blinkCount = */0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2102      	movs	r1, #2
 8000c14:	2003      	movs	r0, #3
 8000c16:	f7ff fb75 	bl	8000304 <DFRobot_ID809_ctrlLED>
    	return false;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e005      	b.n	8000c2a <testFingerPrint+0x6e>
    }
  } else {
  	DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDRed, /*blinkCount = */3);
 8000c1e:	2203      	movs	r2, #3
 8000c20:	2102      	movs	r1, #2
 8000c22:	2003      	movs	r0, #3
 8000c24:	f7ff fb6e 	bl	8000304 <DFRobot_ID809_ctrlLED>
  	return false;
 8000c28:	2300      	movs	r3, #0
  }
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <addFingerPrint>:

void addFingerPrint() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  if ((ID = DFRobot_ID809_getEmptyID()) == ERR_ID809) {
 8000c38:	f7ff fb1a 	bl	8000270 <DFRobot_ID809_getEmptyID>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <addFingerPrint+0xf4>)
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <addFingerPrint+0xf4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2bff      	cmp	r3, #255	; 0xff
 8000c4a:	d104      	bne.n	8000c56 <addFingerPrint+0x22>
    while (1) {
      HAL_Delay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c50:	f001 fede 	bl	8002a10 <HAL_Delay>
 8000c54:	e7fa      	b.n	8000c4c <addFingerPrint+0x18>
    }
  }
  samplingTimes = 0;   //Clear sampling times
 8000c56:	4b35      	ldr	r3, [pc, #212]	; (8000d2c <addFingerPrint+0xf8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
  while (samplingTimes < COLLECT_NUMBER) {
 8000c5c:	e032      	b.n	8000cc4 <addFingerPrint+0x90>
	  DFRobot_ID809_ctrlLED(/*LEDMode = */eBreathing, /*LEDColor = */eLEDBlue, /*blinkCount = */0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2104      	movs	r1, #4
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff fb4e 	bl	8000304 <DFRobot_ID809_ctrlLED>
	  writeOnLCD("   Press down your","       finger");
 8000c68:	4931      	ldr	r1, [pc, #196]	; (8000d30 <addFingerPrint+0xfc>)
 8000c6a:	4832      	ldr	r0, [pc, #200]	; (8000d34 <addFingerPrint+0x100>)
 8000c6c:	f000 fb82 	bl	8001374 <writeOnLCD>
    if ((DFRobot_ID809_collectionFingerprint(10, 0)) != ERR_ID809) {
 8000c70:	2100      	movs	r1, #0
 8000c72:	200a      	movs	r0, #10
 8000c74:	f7ff fb90 	bl	8000398 <DFRobot_ID809_collectionFingerprint>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2bff      	cmp	r3, #255	; 0xff
 8000c7c:	d00f      	beq.n	8000c9e <addFingerPrint+0x6a>
    	DFRobot_ID809_ctrlLED(/*LEDMode = */eFastBlink, /*LEDColor = */eLEDYellow, /*blinkCount = */3);
 8000c7e:	2203      	movs	r2, #3
 8000c80:	2103      	movs	r1, #3
 8000c82:	2002      	movs	r0, #2
 8000c84:	f7ff fb3e 	bl	8000304 <DFRobot_ID809_ctrlLED>
    	writeOnLCD("  Sampling succeeds","");
 8000c88:	492b      	ldr	r1, [pc, #172]	; (8000d38 <addFingerPrint+0x104>)
 8000c8a:	482c      	ldr	r0, [pc, #176]	; (8000d3c <addFingerPrint+0x108>)
 8000c8c:	f000 fb72 	bl	8001374 <writeOnLCD>
    	samplingTimes++;   //Sampling times +1
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <addFingerPrint+0xf8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <addFingerPrint+0xf8>)
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e008      	b.n	8000cb0 <addFingerPrint+0x7c>
    } else {
    	writeOnLCD("   Sampling failed","");
 8000c9e:	4926      	ldr	r1, [pc, #152]	; (8000d38 <addFingerPrint+0x104>)
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <addFingerPrint+0x10c>)
 8000ca2:	f000 fb67 	bl	8001374 <writeOnLCD>
    	DFRobot_ID809_ctrlLED(/*LEDMode = */eFastBlink, /*LEDColor = */eLEDWhite, /*blinkCount = */2);
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	2107      	movs	r1, #7
 8000caa:	2002      	movs	r0, #2
 8000cac:	f7ff fb2a 	bl	8000304 <DFRobot_ID809_ctrlLED>
    }
    writeOnLCD("    Release your","       finger");
 8000cb0:	491f      	ldr	r1, [pc, #124]	; (8000d30 <addFingerPrint+0xfc>)
 8000cb2:	4824      	ldr	r0, [pc, #144]	; (8000d44 <addFingerPrint+0x110>)
 8000cb4:	f000 fb5e 	bl	8001374 <writeOnLCD>
    while (DFRobot_ID809_detectFingers());
 8000cb8:	bf00      	nop
 8000cba:	f7ff fbdb 	bl	8000474 <DFRobot_ID809_detectFingers>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1fa      	bne.n	8000cba <addFingerPrint+0x86>
  while (samplingTimes < COLLECT_NUMBER) {
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <addFingerPrint+0xf8>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d9c8      	bls.n	8000c5e <addFingerPrint+0x2a>
  }

  if (DFRobot_ID809_storeFingerprint(/*Empty ID = */ID) != ERR_ID809) {
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <addFingerPrint+0xf4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc7d 	bl	80005d0 <DFRobot_ID809_storeFingerprint>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2bff      	cmp	r3, #255	; 0xff
 8000cda:	d016      	beq.n	8000d0a <addFingerPrint+0xd6>
	  writeOnLCD("   Saving succeed","");
 8000cdc:	4916      	ldr	r1, [pc, #88]	; (8000d38 <addFingerPrint+0x104>)
 8000cde:	481a      	ldr	r0, [pc, #104]	; (8000d48 <addFingerPrint+0x114>)
 8000ce0:	f000 fb48 	bl	8001374 <writeOnLCD>
	  DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDGreen, /*blinkCount = */0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f7ff fb0b 	bl	8000304 <DFRobot_ID809_ctrlLED>
	  HAL_Delay(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f001 fe8d 	bl	8002a10 <HAL_Delay>
    DFRobot_ID809_ctrlLED(/*LEDMode = */eNormalClose, /*LEDColor = */eLEDBlue, /*blinkCount = */0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff fb02 	bl	8000304 <DFRobot_ID809_ctrlLED>
    HAL_Delay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f001 fe84 	bl	8002a10 <HAL_Delay>
  } else {
	  writeOnLCD("    Saving failed","");
	    DFRobot_ID809_ctrlLED(/*LEDMode = */eFastBlink, /*LEDColor = */eLEDWhite, /*blinkCount = */4);
	    HAL_Delay(1000);
  }
}
 8000d08:	e00c      	b.n	8000d24 <addFingerPrint+0xf0>
	  writeOnLCD("    Saving failed","");
 8000d0a:	490b      	ldr	r1, [pc, #44]	; (8000d38 <addFingerPrint+0x104>)
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <addFingerPrint+0x118>)
 8000d0e:	f000 fb31 	bl	8001374 <writeOnLCD>
	    DFRobot_ID809_ctrlLED(/*LEDMode = */eFastBlink, /*LEDColor = */eLEDWhite, /*blinkCount = */4);
 8000d12:	2204      	movs	r2, #4
 8000d14:	2107      	movs	r1, #7
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff faf4 	bl	8000304 <DFRobot_ID809_ctrlLED>
	    HAL_Delay(1000);
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f001 fe76 	bl	8002a10 <HAL_Delay>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000552 	.word	0x20000552
 8000d2c:	20000553 	.word	0x20000553
 8000d30:	0800e2c4 	.word	0x0800e2c4
 8000d34:	0800e2d4 	.word	0x0800e2d4
 8000d38:	0800e2e8 	.word	0x0800e2e8
 8000d3c:	0800e2ec 	.word	0x0800e2ec
 8000d40:	0800e300 	.word	0x0800e300
 8000d44:	0800e314 	.word	0x0800e314
 8000d48:	0800e328 	.word	0x0800e328
 8000d4c:	0800e33c 	.word	0x0800e33c

08000d50 <delFingerPrint>:

void delFingerPrint() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71fb      	strb	r3, [r7, #7]
  DFRobot_ID809_ctrlLED(/*LEDMode = */eBreathing, /*LEDColor = */eLEDBlue, /*blinkCount = */0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fad0 	bl	8000304 <DFRobot_ID809_ctrlLED>
  writeOnLCD("   Press down your","       finger");
 8000d64:	4920      	ldr	r1, [pc, #128]	; (8000de8 <delFingerPrint+0x98>)
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <delFingerPrint+0x9c>)
 8000d68:	f000 fb04 	bl	8001374 <writeOnLCD>
  if ((DFRobot_ID809_collectionFingerprint(/*timeout=*/10, 0)) != ERR_ID809) {
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f7ff fb12 	bl	8000398 <DFRobot_ID809_collectionFingerprint>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d01e      	beq.n	8000db8 <delFingerPrint+0x68>
    ret = DFRobot_ID809_search();
 8000d7a:	f7ff fbc1 	bl	8000500 <DFRobot_ID809_search>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
    if (ret != 0) {
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00d      	beq.n	8000da4 <delFingerPrint+0x54>
    	DFRobot_ID809_delFingerprint(/*Fingerprint ID = */ret);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fbf2 	bl	8000574 <DFRobot_ID809_delFingerprint>
  	  writeOnLCD("   Delete succeeds","");
 8000d90:	4917      	ldr	r1, [pc, #92]	; (8000df0 <delFingerPrint+0xa0>)
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <delFingerPrint+0xa4>)
 8000d94:	f000 faee 	bl	8001374 <writeOnLCD>
      DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDGreen, /*blinkCount = */0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fab1 	bl	8000304 <DFRobot_ID809_ctrlLED>
 8000da2:	e012      	b.n	8000dca <delFingerPrint+0x7a>
    } else {
  	  writeOnLCD("   Fingerprint is","    unregistered");
 8000da4:	4914      	ldr	r1, [pc, #80]	; (8000df8 <delFingerPrint+0xa8>)
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <delFingerPrint+0xac>)
 8000da8:	f000 fae4 	bl	8001374 <writeOnLCD>
    	DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDRed, /*blinkCount = */0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	2003      	movs	r0, #3
 8000db2:	f7ff faa7 	bl	8000304 <DFRobot_ID809_ctrlLED>
 8000db6:	e008      	b.n	8000dca <delFingerPrint+0x7a>
    }
  } else {
	  writeOnLCD("   Capturing fails","");
 8000db8:	490d      	ldr	r1, [pc, #52]	; (8000df0 <delFingerPrint+0xa0>)
 8000dba:	4811      	ldr	r0, [pc, #68]	; (8000e00 <delFingerPrint+0xb0>)
 8000dbc:	f000 fada 	bl	8001374 <writeOnLCD>
	  DFRobot_ID809_ctrlLED(/*LEDMode = */eKeepsOn, /*LEDColor = */eLEDRed, /*blinkCount = */0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f7ff fa9d 	bl	8000304 <DFRobot_ID809_ctrlLED>
  }
  writeOnLCD("    Release your","       finger");
 8000dca:	4907      	ldr	r1, [pc, #28]	; (8000de8 <delFingerPrint+0x98>)
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <delFingerPrint+0xb4>)
 8000dce:	f000 fad1 	bl	8001374 <writeOnLCD>
  while (DFRobot_ID809_detectFinger());
 8000dd2:	bf00      	nop
 8000dd4:	f7ff fa74 	bl	80002c0 <DFRobot_ID809_detectFinger>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1fa      	bne.n	8000dd4 <delFingerPrint+0x84>
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800e2c4 	.word	0x0800e2c4
 8000dec:	0800e2d4 	.word	0x0800e2d4
 8000df0:	0800e2e8 	.word	0x0800e2e8
 8000df4:	0800e350 	.word	0x0800e350
 8000df8:	0800e364 	.word	0x0800e364
 8000dfc:	0800e378 	.word	0x0800e378
 8000e00:	0800e38c 	.word	0x0800e38c
 8000e04:	0800e314 	.word	0x0800e314

08000e08 <writePasswordHID>:

void CDC_Send_Message(uint8_t *data){
	CDC_Transmit(0, data, strlen(data));
}

void writePasswordHID(char *str){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] ; i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e05b      	b.n	8000ece <writePasswordHID+0xc6>
		for(int j=0; j<CHAR_LEN; j++){
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	e052      	b.n	8000ec2 <writePasswordHID+0xba>
			if(str[i] == listCharactere[j].lettre || (65 <= str[i] && str[i] <= 90 && str[i]+32 == listCharactere[j].lettre)){
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4936      	ldr	r1, [pc, #216]	; (8000f00 <writePasswordHID+0xf8>)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d016      	beq.n	8000e5e <writePasswordHID+0x56>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b40      	cmp	r3, #64	; 0x40
 8000e3a:	d93f      	bls.n	8000ebc <writePasswordHID+0xb4>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b5a      	cmp	r3, #90	; 0x5a
 8000e46:	d839      	bhi.n	8000ebc <writePasswordHID+0xb4>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3320      	adds	r3, #32
 8000e52:	492b      	ldr	r1, [pc, #172]	; (8000f00 <writePasswordHID+0xf8>)
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12e      	bne.n	8000ebc <writePasswordHID+0xb4>
				if((65 <= str[i] && str[i] <= 90) || (48 <= listCharactere[j].lettre && listCharactere[j].lettre <= 57)){
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b40      	cmp	r3, #64	; 0x40
 8000e68:	d905      	bls.n	8000e76 <writePasswordHID+0x6e>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b5a      	cmp	r3, #90	; 0x5a
 8000e74:	d90b      	bls.n	8000e8e <writePasswordHID+0x86>
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <writePasswordHID+0xf8>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000e7e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e80:	d909      	bls.n	8000e96 <writePasswordHID+0x8e>
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <writePasswordHID+0xf8>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000e8a:	2b39      	cmp	r3, #57	; 0x39
 8000e8c:	d803      	bhi.n	8000e96 <writePasswordHID+0x8e>
					keyboardhid.MODIFIER = 0x02;  // left Shift
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <writePasswordHID+0xfc>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e002      	b.n	8000e9c <writePasswordHID+0x94>
				}else{
					keyboardhid.MODIFIER = 0x00;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <writePasswordHID+0xfc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
				}
				keyboardhid.KEYCODE1 = listCharactere[j].value;  // press 'a'
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <writePasswordHID+0xf8>)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <writePasswordHID+0xfc>)
 8000eaa:	709a      	strb	r2, [r3, #2]
				USBD_HID_Keybaord_SendReport(&hUsbDevice, &keyboardhid, sizeof (keyboardhid));
 8000eac:	2208      	movs	r2, #8
 8000eae:	4915      	ldr	r1, [pc, #84]	; (8000f04 <writePasswordHID+0xfc>)
 8000eb0:	4815      	ldr	r0, [pc, #84]	; (8000f08 <writePasswordHID+0x100>)
 8000eb2:	f00b f93b 	bl	800c12c <USBD_HID_Keybaord_SendReport>
				HAL_Delay (50);
 8000eb6:	2032      	movs	r0, #50	; 0x32
 8000eb8:	f001 fdaa 	bl	8002a10 <HAL_Delay>
		for(int j=0; j<CHAR_LEN; j++){
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b2b      	cmp	r3, #43	; 0x2b
 8000ec6:	dda9      	ble.n	8000e1c <writePasswordHID+0x14>
	for(int i=0; str[i] ; i++){
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d19d      	bne.n	8000e16 <writePasswordHID+0xe>
			}
		}
	}
	keyboardhid.MODIFIER = 0x00;  // left Shift
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <writePasswordHID+0xfc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	keyboardhid.KEYCODE1 = 0x00;  // press 'a'
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <writePasswordHID+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	709a      	strb	r2, [r3, #2]
	USBD_HID_Keybaord_SendReport(&hUsbDevice, &keyboardhid, sizeof (keyboardhid));
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	4906      	ldr	r1, [pc, #24]	; (8000f04 <writePasswordHID+0xfc>)
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <writePasswordHID+0x100>)
 8000eec:	f00b f91e 	bl	800c12c <USBD_HID_Keybaord_SendReport>
	HAL_Delay (50);
 8000ef0:	2032      	movs	r0, #50	; 0x32
 8000ef2:	f001 fd8d 	bl	8002a10 <HAL_Delay>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000554 	.word	0x20000554
 8000f08:	20000a1c 	.word	0x20000a1c

08000f0c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f1e:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <MX_ADC1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f4a:	f001 fd85 	bl	8002a58 <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 fdf6 	bl	8001b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_ADC1_Init+0x74>)
 8000f6a:	f002 f80d 	bl	8002f88 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f74:	f000 fde6 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000055c 	.word	0x2000055c
 8000f84:	40012400 	.word	0x40012400

08000f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_ADC_MspInit+0x6c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d121      	bne.n	8000fec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_ADC_MspInit+0x70>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_ADC_MspInit+0x70>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_ADC_MspInit+0x70>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_ADC_MspInit+0x70>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_ADC_MspInit+0x70>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_ADC_MspInit+0x70>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_ADC_MspInit+0x74>)
 8000fe8:	f002 fbcc 	bl	8003784 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40012400 	.word	0x40012400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010800 	.word	0x40010800

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <MX_GPIO_Init+0xc0>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_GPIO_Init+0xc0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_GPIO_Init+0xc0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <MX_GPIO_Init+0xc0>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_GPIO_Init+0xc0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_GPIO_Init+0xc0>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_GPIO_Init+0xc0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin|I2C1_RES__Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_GPIO_Init+0xc4>)
 800107c:	f002 fd1d 	bl	8003aba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001080:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_GPIO_Init+0xc8>)
 8001096:	f002 fb75 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|I2C1_RES__Pin;
 800109a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_GPIO_Init+0xc4>)
 80010b4:	f002 fb66 	bl	8003784 <HAL_GPIO_Init>

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000

080010cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_I2C1_Init+0x50>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <MX_I2C1_Init+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_I2C1_Init+0x50>)
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_I2C1_Init+0x58>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_I2C1_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_I2C1_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_I2C1_Init+0x50>)
 80010ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_I2C1_Init+0x50>)
 800110a:	f002 fcef 	bl	8003aec <HAL_I2C_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001114:	f000 fd16 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000058c 	.word	0x2000058c
 8001120:	40005400 	.word	0x40005400
 8001124:	000186a0 	.word	0x000186a0

08001128 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <HAL_I2C_MspInit+0x70>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d123      	bne.n	8001190 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_I2C_MspInit+0x74>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_I2C_MspInit+0x74>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_I2C_MspInit+0x74>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001160:	23c0      	movs	r3, #192	; 0xc0
 8001162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_I2C_MspInit+0x78>)
 8001174:	f002 fb06 	bl	8003784 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_I2C_MspInit+0x74>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_I2C_MspInit+0x74>)
 800117e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_I2C_MspInit+0x74>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f023 030f 	bic.w	r3, r3, #15
 80011b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f043 030c 	orr.w	r3, r3, #12
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	f043 030c 	orr.w	r3, r3, #12
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2304      	movs	r3, #4
 80011ee:	214e      	movs	r1, #78	; 0x4e
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <lcd_send_cmd+0x5c>)
 80011f2:	f002 fdbf 	bl	8003d74 <HAL_I2C_Master_Transmit>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000058c 	.word	0x2000058c

08001204 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f023 030f 	bic.w	r3, r3, #15
 8001214:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f043 030d 	orr.w	r3, r3, #13
 8001222:	b2db      	uxtb	r3, r3
 8001224:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	f043 0309 	orr.w	r3, r3, #9
 800122c:	b2db      	uxtb	r3, r3
 800122e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	f043 030d 	orr.w	r3, r3, #13
 8001236:	b2db      	uxtb	r3, r3
 8001238:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f043 0309 	orr.w	r3, r3, #9
 8001240:	b2db      	uxtb	r3, r3
 8001242:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001244:	f107 0208 	add.w	r2, r7, #8
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2304      	movs	r3, #4
 800124e:	214e      	movs	r1, #78	; 0x4e
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <lcd_send_data+0x5c>)
 8001252:	f002 fd8f 	bl	8003d74 <HAL_I2C_Master_Transmit>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000058c 	.word	0x2000058c

08001264 <lcd_clear>:

void lcd_clear (void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800126a:	2080      	movs	r0, #128	; 0x80
 800126c:	f7ff ff9a 	bl	80011a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	e005      	b.n	8001282 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001276:	2020      	movs	r0, #32
 8001278:	f7ff ffc4 	bl	8001204 <lcd_send_data>
	for (int i=0; i<70; i++)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b45      	cmp	r3, #69	; 0x45
 8001286:	ddf6      	ble.n	8001276 <lcd_clear+0x12>
	}
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    switch (row)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <lcd_put_cur+0x18>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <lcd_put_cur+0x22>
 80012a8:	e009      	b.n	80012be <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	603b      	str	r3, [r7, #0]
            break;
 80012b2:	e004      	b.n	80012be <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012ba:	603b      	str	r3, [r7, #0]
            break;
 80012bc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff6e 	bl	80011a4 <lcd_send_cmd>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <lcd_init>:


void lcd_init (void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80012d4:	2032      	movs	r0, #50	; 0x32
 80012d6:	f001 fb9b 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012da:	2030      	movs	r0, #48	; 0x30
 80012dc:	f7ff ff62 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80012e0:	2005      	movs	r0, #5
 80012e2:	f001 fb95 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012e6:	2030      	movs	r0, #48	; 0x30
 80012e8:	f7ff ff5c 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 fb8f 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x30);
 80012f2:	2030      	movs	r0, #48	; 0x30
 80012f4:	f7ff ff56 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(10);
 80012f8:	200a      	movs	r0, #10
 80012fa:	f001 fb89 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80012fe:	2020      	movs	r0, #32
 8001300:	f7ff ff50 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(10);
 8001304:	200a      	movs	r0, #10
 8001306:	f001 fb83 	bl	8002a10 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800130a:	2028      	movs	r0, #40	; 0x28
 800130c:	f7ff ff4a 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f001 fb7d 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001316:	2008      	movs	r0, #8
 8001318:	f7ff ff44 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f001 fb77 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ff3e 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f001 fb71 	bl	8002a10 <HAL_Delay>
	HAL_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f001 fb6e 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001334:	2006      	movs	r0, #6
 8001336:	f7ff ff35 	bl	80011a4 <lcd_send_cmd>
	HAL_Delay(1);
 800133a:	2001      	movs	r0, #1
 800133c:	f001 fb68 	bl	8002a10 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001340:	200c      	movs	r0, #12
 8001342:	f7ff ff2f 	bl	80011a4 <lcd_send_cmd>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}

0800134a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001352:	e006      	b.n	8001362 <lcd_send_string+0x18>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff51 	bl	8001204 <lcd_send_data>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f4      	bne.n	8001354 <lcd_send_string+0xa>
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <writeOnLCD>:


void writeOnLCD(char *str1, char *str2){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	lcd_clear ();
 800137e:	f7ff ff71 	bl	8001264 <lcd_clear>
	lcd_put_cur(0, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff84 	bl	8001292 <lcd_put_cur>
	lcd_send_string (str1);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffdd 	bl	800134a <lcd_send_string>
	lcd_put_cur(1, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff ff7d 	bl	8001292 <lcd_put_cur>
	lcd_send_string(str2);
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f7ff ffd6 	bl	800134a <lcd_send_string>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f001 facd 	bl	800294c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(100);
 80013b2:	2064      	movs	r0, #100	; 0x64
 80013b4:	f001 fb2c 	bl	8002a10 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 fb68 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f7ff fe20 	bl	8001000 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80013c0:	f000 fe30 	bl	8002024 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80013c4:	f7ff fe82 	bl	80010cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013c8:	f000 fdae 	bl	8001f28 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80013cc:	f000 fc76 	bl	8001cbc <MX_SPI2_Init>
  MX_ADC1_Init();
 80013d0:	f7ff fd9c 	bl	8000f0c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  DFRobot_ID809_Init();
 80013d4:	f7fe ff1c 	bl	8000210 <DFRobot_ID809_Init>
  MX_USB_DEVICE_Init();
 80013d8:	f009 faa0 	bl	800a91c <MX_USB_DEVICE_Init>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 80013dc:	48b2      	ldr	r0, [pc, #712]	; (80016a8 <main+0x300>)
 80013de:	f001 ff67 	bl	80032b0 <HAL_ADCEx_Calibration_Start>

  HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	; 0x64
 80013e4:	f001 fb14 	bl	8002a10 <HAL_Delay>
  lcd_init ();
 80013e8:	f7ff ff72 	bl	80012d0 <lcd_init>
  lcd_clear ();
 80013ec:	f7ff ff3a 	bl	8001264 <lcd_clear>
  HAL_Delay(100);
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f001 fb0d 	bl	8002a10 <HAL_Delay>

  writeOnLCD("      KeyPass", "Loading ...");
 80013f6:	49ad      	ldr	r1, [pc, #692]	; (80016ac <main+0x304>)
 80013f8:	48ad      	ldr	r0, [pc, #692]	; (80016b0 <main+0x308>)
 80013fa:	f7ff ffbb 	bl	8001374 <writeOnLCD>

  uint8_t *data = "Hello World from USB CDC\n";
 80013fe:	4bad      	ldr	r3, [pc, #692]	; (80016b4 <main+0x30c>)
 8001400:	61bb      	str	r3, [r7, #24]
  CDC_Transmit(0, data, strlen(data));
 8001402:	69b8      	ldr	r0, [r7, #24]
 8001404:	f7fe fea2 	bl	800014c <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	69b9      	ldr	r1, [r7, #24]
 800140e:	2000      	movs	r0, #0
 8001410:	f009 fbda 	bl	800abc8 <CDC_Transmit>


  /* --------- differente commande for flash memeorie */
  W25qxx_Init();
 8001414:	f000 ff68 	bl	80022e8 <W25qxx_Init>
  //block 1 for nb of password and fingerprint nb
  HAL_Delay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f001 faf8 	bl	8002a10 <HAL_Delay>
  DFRobot_ID809_ctrlLED(eKeepsOn, eLEDRed, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	2003      	movs	r0, #3
 8001426:	f7fe ff6d 	bl	8000304 <DFRobot_ID809_ctrlLED>
  //printf("Start\n");

  while (DFRobot_ID809_isConnected() == false) {
 800142a:	e008      	b.n	800143e <main+0x96>
  	DFRobot_ID809_ctrlLED(eBreathing, eLEDWhite, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2107      	movs	r1, #7
 8001430:	2001      	movs	r0, #1
 8001432:	f7fe ff67 	bl	8000304 <DFRobot_ID809_ctrlLED>
	HAL_Delay(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143a:	f001 fae9 	bl	8002a10 <HAL_Delay>
  while (DFRobot_ID809_isConnected() == false) {
 800143e:	f7fe fef5 	bl	800022c <DFRobot_ID809_isConnected>
 8001442:	4603      	mov	r3, r0
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ee      	bne.n	800142c <main+0x84>
  }

  HAL_Delay(50);
 800144e:	2032      	movs	r0, #50	; 0x32
 8001450:	f001 fade 	bl	8002a10 <HAL_Delay>
  DFRobot_ID809_ctrlLED(eKeepsOn, eLEDGreen, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	2003      	movs	r0, #3
 800145a:	f7fe ff53 	bl	8000304 <DFRobot_ID809_ctrlLED>

  HAL_Delay(500);
 800145e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001462:	f001 fad5 	bl	8002a10 <HAL_Delay>

  codeState = e_MENU;
 8001466:	4b94      	ldr	r3, [pc, #592]	; (80016b8 <main+0x310>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  /* USER CODE END WHILE */
	  static uint8_t elementInMenu = 0;
	  switch(codeState){
 800146c:	4b92      	ldr	r3, [pc, #584]	; (80016b8 <main+0x310>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	2b05      	cmp	r3, #5
 8001474:	d8fa      	bhi.n	800146c <main+0xc4>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <main+0xd4>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	08001495 	.word	0x08001495
 8001480:	0800155f 	.word	0x0800155f
 8001484:	08001701 	.word	0x08001701
 8001488:	080018ed 	.word	0x080018ed
 800148c:	08001911 	.word	0x08001911
 8001490:	08001931 	.word	0x08001931
		  case e_MENU:{
			  static char* menuButtons[5] = {"   Load password", "    Add password", "     Add finger", "     Del finger", "   reset password"};
			  if(toSingleLoad){
 8001494:	4b89      	ldr	r3, [pc, #548]	; (80016bc <main+0x314>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d014      	beq.n	80014c6 <main+0x11e>
				  DFRobot_ID809_ctrlLED(eNormalClose, eLEDRed, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2102      	movs	r1, #2
 80014a0:	2004      	movs	r0, #4
 80014a2:	f7fe ff2f 	bl	8000304 <DFRobot_ID809_ctrlLED>
				  elementInMenu = 5;
 80014a6:	4b86      	ldr	r3, [pc, #536]	; (80016c0 <main+0x318>)
 80014a8:	2205      	movs	r2, #5
 80014aa:	701a      	strb	r2, [r3, #0]
				  toSingleLoad=false;
 80014ac:	4b83      	ldr	r3, [pc, #524]	; (80016bc <main+0x314>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
				  writeOnLCD(menuButtons[idButton],"          ->    ok");
 80014b2:	4b84      	ldr	r3, [pc, #528]	; (80016c4 <main+0x31c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b83      	ldr	r3, [pc, #524]	; (80016c8 <main+0x320>)
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	4983      	ldr	r1, [pc, #524]	; (80016cc <main+0x324>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff57 	bl	8001374 <writeOnLCD>
			  }
			  if(readButtonFinger()){
 80014c6:	f000 fac5 	bl	8001a54 <readButtonFinger>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d02a      	beq.n	8001526 <main+0x17e>
				  toSingleLoad = true;
 80014d0:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <main+0x314>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
				  switch(idButton){
 80014d6:	4b7b      	ldr	r3, [pc, #492]	; (80016c4 <main+0x31c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d820      	bhi.n	8001520 <main+0x178>
 80014de:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <main+0x13c>)
 80014e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e4:	080014f9 	.word	0x080014f9
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001509 	.word	0x08001509
 80014f0:	08001511 	.word	0x08001511
 80014f4:	08001519 	.word	0x08001519
				  	  case 0:
				  		codeState = e_PASSWORD;
 80014f8:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <main+0x310>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	701a      	strb	r2, [r3, #0]
				  		  break;
 80014fe:	e00f      	b.n	8001520 <main+0x178>
				  	  case 1:
				  		codeState = e_ADDPASSWORD;
 8001500:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <main+0x310>)
 8001502:	2203      	movs	r2, #3
 8001504:	701a      	strb	r2, [r3, #0]
				  		  break;
 8001506:	e00b      	b.n	8001520 <main+0x178>
				  	  case 2:
				  		codeState = e_ADDFINGER;
 8001508:	4b6b      	ldr	r3, [pc, #428]	; (80016b8 <main+0x310>)
 800150a:	2204      	movs	r2, #4
 800150c:	701a      	strb	r2, [r3, #0]
				  		  break;
 800150e:	e007      	b.n	8001520 <main+0x178>
				  	  case 3:
				  		codeState = e_DELFINGER;
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <main+0x310>)
 8001512:	2205      	movs	r2, #5
 8001514:	701a      	strb	r2, [r3, #0]
				  		  break;
 8001516:	e003      	b.n	8001520 <main+0x178>
				  	  case 4:
				  		  codeState = e_PASSRESET;
 8001518:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <main+0x310>)
 800151a:	2206      	movs	r2, #6
 800151c:	701a      	strb	r2, [r3, #0]
				  		  break;
 800151e:	bf00      	nop
				  }
				  idButton = 0;
 8001520:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <main+0x31c>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
			  }
			  if(readButton2()){
 8001526:	f000 fa51 	bl	80019cc <readButton2>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8221 	beq.w	8001974 <main+0x5cc>
				  toSingleLoad = true;
 8001532:	4b62      	ldr	r3, [pc, #392]	; (80016bc <main+0x314>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
				  if(idButton == elementInMenu-1){
 8001538:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <main+0x31c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <main+0x318>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3b01      	subs	r3, #1
 8001544:	429a      	cmp	r2, r3
 8001546:	d103      	bne.n	8001550 <main+0x1a8>
					  idButton = 0;
 8001548:	4b5e      	ldr	r3, [pc, #376]	; (80016c4 <main+0x31c>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
				  }else{
					  idButton++;
				  }
			  }
			  break;
 800154e:	e211      	b.n	8001974 <main+0x5cc>
					  idButton++;
 8001550:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <main+0x31c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <main+0x31c>)
 800155a:	701a      	strb	r2, [r3, #0]
			  break;
 800155c:	e20a      	b.n	8001974 <main+0x5cc>
		  }
		  case e_PASSWORD:{
			  if(toSingleLoad){
 800155e:	4b57      	ldr	r3, [pc, #348]	; (80016bc <main+0x314>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d028      	beq.n	80015b8 <main+0x210>
				  W25qxx_ReadBlock(indexFlash, 1, 0, 1);
 8001566:	2301      	movs	r3, #1
 8001568:	2200      	movs	r2, #0
 800156a:	2101      	movs	r1, #1
 800156c:	4858      	ldr	r0, [pc, #352]	; (80016d0 <main+0x328>)
 800156e:	f001 f965 	bl	800283c <W25qxx_ReadBlock>
				  toSingleLoad=false;
 8001572:	4b52      	ldr	r3, [pc, #328]	; (80016bc <main+0x314>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
				  if(indexFlash[0] > 0){
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <main+0x328>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d014      	beq.n	80015aa <main+0x202>
					  DFRobot_ID809_ctrlLED(eNormalClose, eLEDRed, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2102      	movs	r1, #2
 8001584:	2004      	movs	r0, #4
 8001586:	f7fe febd 	bl	8000304 <DFRobot_ID809_ctrlLED>
					  W25qxx_ReadBlock(buffer1, 2+(idButton*2)+1, 0, 100);
 800158a:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <main+0x31c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	3301      	adds	r3, #1
 8001594:	4619      	mov	r1, r3
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	2200      	movs	r2, #0
 800159a:	484e      	ldr	r0, [pc, #312]	; (80016d4 <main+0x32c>)
 800159c:	f001 f94e 	bl	800283c <W25qxx_ReadBlock>
					  writeOnLCD(buffer1,"  menu    ->    ok");
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <main+0x330>)
 80015a2:	484c      	ldr	r0, [pc, #304]	; (80016d4 <main+0x32c>)
 80015a4:	f7ff fee6 	bl	8001374 <writeOnLCD>
 80015a8:	e003      	b.n	80015b2 <main+0x20a>
				  }else{
					  writeOnLCD("     No password","    return");
 80015aa:	494c      	ldr	r1, [pc, #304]	; (80016dc <main+0x334>)
 80015ac:	484c      	ldr	r0, [pc, #304]	; (80016e0 <main+0x338>)
 80015ae:	f7ff fee1 	bl	8001374 <writeOnLCD>
				  }
				  codeState = e_PASSWORD;
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <main+0x310>)
 80015b4:	2202      	movs	r2, #2
 80015b6:	701a      	strb	r2, [r3, #0]
			  }
			  if(readButton2()){
 80015b8:	f000 fa08 	bl	80019cc <readButton2>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01b      	beq.n	80015fa <main+0x252>
				  codeState = e_PASSWORD;
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <main+0x310>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	701a      	strb	r2, [r3, #0]
				  if(indexFlash[0] > 0){
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <main+0x328>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d014      	beq.n	80015fa <main+0x252>
					  toSingleLoad = true;
 80015d0:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <main+0x314>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
					  if(idButton == indexFlash[0]-1){
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <main+0x31c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <main+0x328>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d103      	bne.n	80015ee <main+0x246>
						  idButton = 0;
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <main+0x31c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e005      	b.n	80015fa <main+0x252>
					  }else{
						  idButton++;
 80015ee:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <main+0x31c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <main+0x31c>)
 80015f8:	701a      	strb	r2, [r3, #0]
					  }
				  }
			  }
			  if(readButtonFinger()){
 80015fa:	f000 fa2b 	bl	8001a54 <readButtonFinger>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d040      	beq.n	8001686 <main+0x2de>
				  codeState = e_PASSWORD;
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <main+0x310>)
 8001606:	2202      	movs	r2, #2
 8001608:	701a      	strb	r2, [r3, #0]
				  toSingleLoad = true;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <main+0x314>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
				  if(indexFlash[0] > 0){
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <main+0x328>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d036      	beq.n	8001686 <main+0x2de>
					  writeOnLCD("    Check finger","       put it");
 8001618:	4932      	ldr	r1, [pc, #200]	; (80016e4 <main+0x33c>)
 800161a:	4833      	ldr	r0, [pc, #204]	; (80016e8 <main+0x340>)
 800161c:	f7ff feaa 	bl	8001374 <writeOnLCD>
					  while(DFRobot_ID809_detectFinger());
 8001620:	bf00      	nop
 8001622:	f7fe fe4d 	bl	80002c0 <DFRobot_ID809_detectFinger>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1fa      	bne.n	8001622 <main+0x27a>
					  if(testFingerPrint()){
 800162c:	f7ff fac6 	bl	8000bbc <testFingerPrint>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01f      	beq.n	8001676 <main+0x2ce>
						  writeOnLCD("    Start writing","      password");
 8001636:	492d      	ldr	r1, [pc, #180]	; (80016ec <main+0x344>)
 8001638:	482d      	ldr	r0, [pc, #180]	; (80016f0 <main+0x348>)
 800163a:	f7ff fe9b 	bl	8001374 <writeOnLCD>
						  W25qxx_ReadBlock(buffer1, 2+(idButton*2)+2, 0, 100);
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <main+0x31c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3302      	adds	r3, #2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4619      	mov	r1, r3
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	2200      	movs	r2, #0
 800164c:	4821      	ldr	r0, [pc, #132]	; (80016d4 <main+0x32c>)
 800164e:	f001 f8f5 	bl	800283c <W25qxx_ReadBlock>
						  writePasswordHID(buffer1);
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <main+0x32c>)
 8001654:	f7ff fbd8 	bl	8000e08 <writePasswordHID>
						  writeOnLCD("    Writing done","");
 8001658:	4926      	ldr	r1, [pc, #152]	; (80016f4 <main+0x34c>)
 800165a:	4827      	ldr	r0, [pc, #156]	; (80016f8 <main+0x350>)
 800165c:	f7ff fe8a 	bl	8001374 <writeOnLCD>
						  codeState = e_MENU;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <main+0x310>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
						  idButton=0;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <main+0x31c>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
						  HAL_Delay(1000);
 800166c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001670:	f001 f9ce 	bl	8002a10 <HAL_Delay>
 8001674:	e003      	b.n	800167e <main+0x2d6>
					  }else{
						  writeOnLCD("    Wrong finger","");
 8001676:	491f      	ldr	r1, [pc, #124]	; (80016f4 <main+0x34c>)
 8001678:	4820      	ldr	r0, [pc, #128]	; (80016fc <main+0x354>)
 800167a:	f7ff fe7b 	bl	8001374 <writeOnLCD>
					  }
					  HAL_Delay(1000);
 800167e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001682:	f001 f9c5 	bl	8002a10 <HAL_Delay>
				  }
			  }
			  if(readButton1()){
 8001686:	f000 f9c3 	bl	8001a10 <readButton1>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8173 	beq.w	8001978 <main+0x5d0>
				  codeState = e_MENU;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <main+0x310>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
				  toSingleLoad = true;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <main+0x314>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
				  idButton=0;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <main+0x31c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80016a4:	e168      	b.n	8001978 <main+0x5d0>
 80016a6:	bf00      	nop
 80016a8:	2000055c 	.word	0x2000055c
 80016ac:	0800e3a0 	.word	0x0800e3a0
 80016b0:	0800e3ac 	.word	0x0800e3ac
 80016b4:	0800e3bc 	.word	0x0800e3bc
 80016b8:	200005f4 	.word	0x200005f4
 80016bc:	20000160 	.word	0x20000160
 80016c0:	2000065e 	.word	0x2000065e
 80016c4:	2000065d 	.word	0x2000065d
 80016c8:	20000164 	.word	0x20000164
 80016cc:	0800e3d8 	.word	0x0800e3d8
 80016d0:	2000065c 	.word	0x2000065c
 80016d4:	200005e0 	.word	0x200005e0
 80016d8:	0800e3ec 	.word	0x0800e3ec
 80016dc:	0800e400 	.word	0x0800e400
 80016e0:	0800e40c 	.word	0x0800e40c
 80016e4:	0800e420 	.word	0x0800e420
 80016e8:	0800e430 	.word	0x0800e430
 80016ec:	0800e444 	.word	0x0800e444
 80016f0:	0800e454 	.word	0x0800e454
 80016f4:	0800e468 	.word	0x0800e468
 80016f8:	0800e46c 	.word	0x0800e46c
 80016fc:	0800e480 	.word	0x0800e480
		  }
		  case e_ADDPASSWORD:{
			  writeOnLCD("    Check finger","       put it");
 8001700:	499e      	ldr	r1, [pc, #632]	; (800197c <main+0x5d4>)
 8001702:	489f      	ldr	r0, [pc, #636]	; (8001980 <main+0x5d8>)
 8001704:	f7ff fe36 	bl	8001374 <writeOnLCD>
			  while(DFRobot_ID809_detectFinger());
 8001708:	bf00      	nop
 800170a:	f7fe fdd9 	bl	80002c0 <DFRobot_ID809_detectFinger>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1fa      	bne.n	800170a <main+0x362>
			  if(testFingerPrint()){
 8001714:	f7ff fa52 	bl	8000bbc <testFingerPrint>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80da 	beq.w	80018d4 <main+0x52c>
				  bool _Lettre_, _Number_, _SpeChar_, _Capitals_;

				  HAL_Delay(500);
 8001720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001724:	f001 f974 	bl	8002a10 <HAL_Delay>
				  DFRobot_ID809_ctrlLED(eNormalClose, eLEDRed, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2102      	movs	r1, #2
 800172c:	2004      	movs	r0, #4
 800172e:	f7fe fde9 	bl	8000304 <DFRobot_ID809_ctrlLED>

				  writeOnLCD("    Has lettre ?","    no       yes");
 8001732:	4994      	ldr	r1, [pc, #592]	; (8001984 <main+0x5dc>)
 8001734:	4894      	ldr	r0, [pc, #592]	; (8001988 <main+0x5e0>)
 8001736:	f7ff fe1d 	bl	8001374 <writeOnLCD>
				  while(!readButton1() && !(_Lettre_ = readButton2()));
 800173a:	bf00      	nop
 800173c:	f000 f968 	bl	8001a10 <readButton1>
 8001740:	4603      	mov	r3, r0
 8001742:	f083 0301 	eor.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <main+0x3b8>
 800174c:	f000 f93e 	bl	80019cc <readButton2>
 8001750:	4603      	mov	r3, r0
 8001752:	77fb      	strb	r3, [r7, #31]
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ed      	bne.n	800173c <main+0x394>
				  writeOnLCD("    Has number ?","    no       yes");
 8001760:	4988      	ldr	r1, [pc, #544]	; (8001984 <main+0x5dc>)
 8001762:	488a      	ldr	r0, [pc, #552]	; (800198c <main+0x5e4>)
 8001764:	f7ff fe06 	bl	8001374 <writeOnLCD>
				  while(!readButton1() && !(_Number_ = readButton2()));
 8001768:	bf00      	nop
 800176a:	f000 f951 	bl	8001a10 <readButton1>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <main+0x3e6>
 800177a:	f000 f927 	bl	80019cc <readButton2>
 800177e:	4603      	mov	r3, r0
 8001780:	77bb      	strb	r3, [r7, #30]
 8001782:	7fbb      	ldrb	r3, [r7, #30]
 8001784:	f083 0301 	eor.w	r3, r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <main+0x3c2>
				  writeOnLCD(" Has special char ?","    no       yes");
 800178e:	497d      	ldr	r1, [pc, #500]	; (8001984 <main+0x5dc>)
 8001790:	487f      	ldr	r0, [pc, #508]	; (8001990 <main+0x5e8>)
 8001792:	f7ff fdef 	bl	8001374 <writeOnLCD>
				  while(!readButton1() && !(_SpeChar_ = readButton2()));
 8001796:	bf00      	nop
 8001798:	f000 f93a 	bl	8001a10 <readButton1>
 800179c:	4603      	mov	r3, r0
 800179e:	f083 0301 	eor.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <main+0x414>
 80017a8:	f000 f910 	bl	80019cc <readButton2>
 80017ac:	4603      	mov	r3, r0
 80017ae:	777b      	strb	r3, [r7, #29]
 80017b0:	7f7b      	ldrb	r3, [r7, #29]
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ed      	bne.n	8001798 <main+0x3f0>
				  writeOnLCD("   Has capitals ?","    no       yes");
 80017bc:	4971      	ldr	r1, [pc, #452]	; (8001984 <main+0x5dc>)
 80017be:	4875      	ldr	r0, [pc, #468]	; (8001994 <main+0x5ec>)
 80017c0:	f7ff fdd8 	bl	8001374 <writeOnLCD>
				  while(!readButton1() && !(_Capitals_ = readButton2()));
 80017c4:	bf00      	nop
 80017c6:	f000 f923 	bl	8001a10 <readButton1>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <main+0x442>
 80017d6:	f000 f8f9 	bl	80019cc <readButton2>
 80017da:	4603      	mov	r3, r0
 80017dc:	773b      	strb	r3, [r7, #28]
 80017de:	7f3b      	ldrb	r3, [r7, #28]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ed      	bne.n	80017c6 <main+0x41e>
				  writeOnLCD(" Starting generation","");
 80017ea:	496b      	ldr	r1, [pc, #428]	; (8001998 <main+0x5f0>)
 80017ec:	486b      	ldr	r0, [pc, #428]	; (800199c <main+0x5f4>)
 80017ee:	f7ff fdc1 	bl	8001374 <writeOnLCD>

				  if(!_Number_ && !_SpeChar_) _Lettre_ = true;
 80017f2:	7fbb      	ldrb	r3, [r7, #30]
 80017f4:	f083 0301 	eor.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <main+0x466>
 80017fe:	7f7b      	ldrb	r3, [r7, #29]
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <main+0x466>
 800180a:	2301      	movs	r3, #1
 800180c:	77fb      	strb	r3, [r7, #31]

				  generatePassword(passwordStr, 10, _Lettre_, _Number_, _SpeChar_, _Capitals_);
 800180e:	7fb9      	ldrb	r1, [r7, #30]
 8001810:	7ffa      	ldrb	r2, [r7, #31]
 8001812:	7f3b      	ldrb	r3, [r7, #28]
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	7f7b      	ldrb	r3, [r7, #29]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	460b      	mov	r3, r1
 800181c:	210a      	movs	r1, #10
 800181e:	4860      	ldr	r0, [pc, #384]	; (80019a0 <main+0x5f8>)
 8001820:	f000 f996 	bl	8001b50 <generatePassword>

				  uint8_t namePass[21] = "Password  ";
 8001824:	4a5f      	ldr	r2, [pc, #380]	; (80019a4 <main+0x5fc>)
 8001826:	463b      	mov	r3, r7
 8001828:	ca07      	ldmia	r2, {r0, r1, r2}
 800182a:	c303      	stmia	r3!, {r0, r1}
 800182c:	801a      	strh	r2, [r3, #0]
 800182e:	3302      	adds	r3, #2
 8001830:	0c12      	lsrs	r2, r2, #16
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	f107 030b 	add.w	r3, r7, #11
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	811a      	strh	r2, [r3, #8]

				  W25qxx_ReadBlock(indexFlash, 1, 0, 1);
 8001840:	2301      	movs	r3, #1
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	4858      	ldr	r0, [pc, #352]	; (80019a8 <main+0x600>)
 8001848:	f000 fff8 	bl	800283c <W25qxx_ReadBlock>

				  namePass[9] = indexFlash[0]+'0';
 800184c:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <main+0x600>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3330      	adds	r3, #48	; 0x30
 8001852:	b2db      	uxtb	r3, r3
 8001854:	727b      	strb	r3, [r7, #9]

				  W25qxx_EraseBlock(2+((indexFlash[0])*2)+1);
 8001856:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <main+0x600>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	3301      	adds	r3, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fe13 	bl	800248c <W25qxx_EraseBlock>
				  W25qxx_EraseBlock(2+((indexFlash[0])*2)+2);
 8001866:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <main+0x600>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	3302      	adds	r3, #2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fe0c 	bl	800248c <W25qxx_EraseBlock>
				  W25qxx_WriteBlock(namePass, 2+((indexFlash[0])*2)+1, 0, 21);
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <main+0x600>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3301      	adds	r3, #1
 800187e:	4619      	mov	r1, r3
 8001880:	4638      	mov	r0, r7
 8001882:	2315      	movs	r3, #21
 8001884:	2200      	movs	r2, #0
 8001886:	f000 fef7 	bl	8002678 <W25qxx_WriteBlock>
				  W25qxx_WriteBlock(passwordStr, 2+((indexFlash[0])*2)+2, 0, 100);
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <main+0x600>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3302      	adds	r3, #2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4619      	mov	r1, r3
 8001894:	2364      	movs	r3, #100	; 0x64
 8001896:	2200      	movs	r2, #0
 8001898:	4841      	ldr	r0, [pc, #260]	; (80019a0 <main+0x5f8>)
 800189a:	f000 feed 	bl	8002678 <W25qxx_WriteBlock>

				  indexFlash[0]++;
 800189e:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <main+0x600>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <main+0x600>)
 80018a8:	701a      	strb	r2, [r3, #0]
				  W25qxx_EraseBlock(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f000 fdee 	bl	800248c <W25qxx_EraseBlock>
				  W25qxx_WriteBlock(indexFlash, 1, 0, 1);
 80018b0:	2301      	movs	r3, #1
 80018b2:	2200      	movs	r2, #0
 80018b4:	2101      	movs	r1, #1
 80018b6:	483c      	ldr	r0, [pc, #240]	; (80019a8 <main+0x600>)
 80018b8:	f000 fede 	bl	8002678 <W25qxx_WriteBlock>

				  writeOnLCD("  Password has been","      generated");
 80018bc:	493b      	ldr	r1, [pc, #236]	; (80019ac <main+0x604>)
 80018be:	483c      	ldr	r0, [pc, #240]	; (80019b0 <main+0x608>)
 80018c0:	f7ff fd58 	bl	8001374 <writeOnLCD>
				  HAL_Delay(1000);
 80018c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c8:	f001 f8a2 	bl	8002a10 <HAL_Delay>

				  codeState = e_MENU;
 80018cc:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <main+0x60c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
			  }else{
				  writeOnLCD("    Wrong finger","");
				  HAL_Delay(1000);
				  codeState = e_MENU;
			  }
			  break;
 80018d2:	e052      	b.n	800197a <main+0x5d2>
				  writeOnLCD("    Wrong finger","");
 80018d4:	4930      	ldr	r1, [pc, #192]	; (8001998 <main+0x5f0>)
 80018d6:	4838      	ldr	r0, [pc, #224]	; (80019b8 <main+0x610>)
 80018d8:	f7ff fd4c 	bl	8001374 <writeOnLCD>
				  HAL_Delay(1000);
 80018dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e0:	f001 f896 	bl	8002a10 <HAL_Delay>
				  codeState = e_MENU;
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <main+0x60c>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
			  break;
 80018ea:	e046      	b.n	800197a <main+0x5d2>
		  }
		  case e_ADDFINGER:{
			  writeOnLCD("  Your going to add","   finger print");
 80018ec:	4933      	ldr	r1, [pc, #204]	; (80019bc <main+0x614>)
 80018ee:	4834      	ldr	r0, [pc, #208]	; (80019c0 <main+0x618>)
 80018f0:	f7ff fd40 	bl	8001374 <writeOnLCD>
			  HAL_Delay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f001 f88a 	bl	8002a10 <HAL_Delay>
			  addFingerPrint();
 80018fc:	f7ff f99a 	bl	8000c34 <addFingerPrint>
			  HAL_Delay(500);
 8001900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001904:	f001 f884 	bl	8002a10 <HAL_Delay>
			  codeState = e_MENU;
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <main+0x60c>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
			  break;
 800190e:	e034      	b.n	800197a <main+0x5d2>
		  }
		  case e_DELFINGER:{
			  writeOnLCD("Your going to delete", "   finger print");
 8001910:	492a      	ldr	r1, [pc, #168]	; (80019bc <main+0x614>)
 8001912:	482c      	ldr	r0, [pc, #176]	; (80019c4 <main+0x61c>)
 8001914:	f7ff fd2e 	bl	8001374 <writeOnLCD>
			  delFingerPrint();
 8001918:	f7ff fa1a 	bl	8000d50 <delFingerPrint>
			  resetAllPassword();
 800191c:	f000 f9bc 	bl	8001c98 <resetAllPassword>
			  HAL_Delay(500);
 8001920:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001924:	f001 f874 	bl	8002a10 <HAL_Delay>
			  codeState = e_MENU;
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <main+0x60c>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
			  break;
 800192e:	e024      	b.n	800197a <main+0x5d2>
		  }
		  case e_PASSRESET:{
			  writeOnLCD("    Check finger","       put it");
 8001930:	4912      	ldr	r1, [pc, #72]	; (800197c <main+0x5d4>)
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <main+0x5d8>)
 8001934:	f7ff fd1e 	bl	8001374 <writeOnLCD>
			  while(DFRobot_ID809_detectFinger());
 8001938:	bf00      	nop
 800193a:	f7fe fcc1 	bl	80002c0 <DFRobot_ID809_detectFinger>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1fa      	bne.n	800193a <main+0x592>
			  if(testFingerPrint()){
 8001944:	f7ff f93a 	bl	8000bbc <testFingerPrint>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <main+0x5b4>
				  writeOnLCD("  Password has been","        reset");
 800194e:	491e      	ldr	r1, [pc, #120]	; (80019c8 <main+0x620>)
 8001950:	4817      	ldr	r0, [pc, #92]	; (80019b0 <main+0x608>)
 8001952:	f7ff fd0f 	bl	8001374 <writeOnLCD>
				  resetAllPassword();
 8001956:	f000 f99f 	bl	8001c98 <resetAllPassword>
 800195a:	e003      	b.n	8001964 <main+0x5bc>
			  }else{
				  writeOnLCD("    Wrong finger","");
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <main+0x5f0>)
 800195e:	4816      	ldr	r0, [pc, #88]	; (80019b8 <main+0x610>)
 8001960:	f7ff fd08 	bl	8001374 <writeOnLCD>
			  }
			  HAL_Delay(1000);
 8001964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001968:	f001 f852 	bl	8002a10 <HAL_Delay>
			  codeState = e_MENU;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <main+0x60c>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
			  break;
 8001972:	e002      	b.n	800197a <main+0x5d2>
			  break;
 8001974:	bf00      	nop
 8001976:	e579      	b.n	800146c <main+0xc4>
			  break;
 8001978:	bf00      	nop
  while (1){
 800197a:	e577      	b.n	800146c <main+0xc4>
 800197c:	0800e420 	.word	0x0800e420
 8001980:	0800e430 	.word	0x0800e430
 8001984:	0800e494 	.word	0x0800e494
 8001988:	0800e4a8 	.word	0x0800e4a8
 800198c:	0800e4bc 	.word	0x0800e4bc
 8001990:	0800e4d0 	.word	0x0800e4d0
 8001994:	0800e4e4 	.word	0x0800e4e4
 8001998:	0800e468 	.word	0x0800e468
 800199c:	0800e4f8 	.word	0x0800e4f8
 80019a0:	200005f8 	.word	0x200005f8
 80019a4:	0800e580 	.word	0x0800e580
 80019a8:	2000065c 	.word	0x2000065c
 80019ac:	0800e510 	.word	0x0800e510
 80019b0:	0800e520 	.word	0x0800e520
 80019b4:	200005f4 	.word	0x200005f4
 80019b8:	0800e480 	.word	0x0800e480
 80019bc:	0800e534 	.word	0x0800e534
 80019c0:	0800e544 	.word	0x0800e544
 80019c4:	0800e558 	.word	0x0800e558
 80019c8:	0800e570 	.word	0x0800e570

080019cc <readButton2>:
  }
  /* USER CODE END 3 */
}

bool readButton2(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	static bool lastPosBP1 = false;
	bool actualPosBP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <readButton2+0x3c>)
 80019d8:	f002 f858 	bl	8003a8c <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf14      	ite	ne
 80019e2:	2301      	movne	r3, #1
 80019e4:	2300      	moveq	r3, #0
 80019e6:	71fb      	strb	r3, [r7, #7]
	if(actualPosBP1 != lastPosBP1){
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <readButton2+0x40>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d004      	beq.n	80019fc <readButton2+0x30>
		lastPosBP1 = actualPosBP1;
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <readButton2+0x40>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	7013      	strb	r3, [r2, #0]
		return actualPosBP1;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	e000      	b.n	80019fe <readButton2+0x32>
	}
	return false;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	2000065f 	.word	0x2000065f

08001a10 <readButton1>:

bool readButton1(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
	static bool lastPosBP2 = false;
	bool actualPosBP2 = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	480c      	ldr	r0, [pc, #48]	; (8001a4c <readButton1+0x3c>)
 8001a1c:	f002 f836 	bl	8003a8c <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	71fb      	strb	r3, [r7, #7]
	if(actualPosBP2 != lastPosBP2){
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <readButton1+0x40>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	79fa      	ldrb	r2, [r7, #7]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d004      	beq.n	8001a40 <readButton1+0x30>
		lastPosBP2 = actualPosBP2;
 8001a36:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <readButton1+0x40>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	7013      	strb	r3, [r2, #0]
		return actualPosBP2;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	e000      	b.n	8001a42 <readButton1+0x32>
	}
	return false;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	20000660 	.word	0x20000660

08001a54 <readButtonFinger>:
bool readButtonFinger(void){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	static bool lastPosBP2 = false;
	bool actualPosBP2 = DFRobot_ID809_detectFinger();
 8001a5a:	f7fe fc31 	bl	80002c0 <DFRobot_ID809_detectFinger>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
	if(actualPosBP2 != lastPosBP2){
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <readButtonFinger+0x34>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d004      	beq.n	8001a7e <readButtonFinger+0x2a>
		lastPosBP2 = actualPosBP2;
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <readButtonFinger+0x34>)
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	7013      	strb	r3, [r2, #0]
		return actualPosBP2;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	e000      	b.n	8001a80 <readButtonFinger+0x2c>
	}
	return false;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000661 	.word	0x20000661

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	; 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a96:	2228      	movs	r2, #40	; 0x28
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00b ff72 	bl	800d984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aca:	2301      	movs	r3, #1
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ad8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001adc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 f91a 	bl	8005d1c <HAL_RCC_OscConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001aee:	f000 f829 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	230f      	movs	r3, #15
 8001af4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f004 fb86 	bl	8006220 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b1a:	f000 f813 	bl	8001b44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 fd0f 	bl	8006550 <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b38:	f000 f804 	bl	8001b44 <Error_Handler>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3750      	adds	r7, #80	; 0x50
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <Error_Handler+0x8>
	...

08001b50 <generatePassword>:
#define LENGTHNUMB			10
#define LENGTHSPECIALCHAR	7

extern ADC_HandleTypeDef hadc1;

void generatePassword(char *str, uint8_t length, bool hasLetter, bool hasNumber, bool hasSpecialChar, bool hasMajuscule){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	70fb      	strb	r3, [r7, #3]
 8001b62:	460b      	mov	r3, r1
 8001b64:	70bb      	strb	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	707b      	strb	r3, [r7, #1]
	static listAlpha[LENGTHALPHA] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	static listNumb[LENGTHNUMB] = {'0','1','2','3','4','5','6','7','8','9'};
	static listSpecialChar[LENGTHSPECIALCHAR] = {'-','_','&','$','!','ç','*'};
	if(length >= 100){
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	2b63      	cmp	r3, #99	; 0x63
 8001b6e:	d901      	bls.n	8001b74 <generatePassword+0x24>
		length = 100;
 8001b70:	2364      	movs	r3, #100	; 0x64
 8001b72:	70fb      	strb	r3, [r7, #3]
	}
	uint8_t i = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
	while(i<length){
 8001b78:	e05f      	b.n	8001c3a <generatePassword+0xea>
		switch(getRandomNumber(3)){
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f000 f86c 	bl	8001c58 <getRandomNumber>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d045      	beq.n	8001c12 <generatePassword+0xc2>
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	dc57      	bgt.n	8001c3a <generatePassword+0xea>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <generatePassword+0x44>
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d02b      	beq.n	8001bea <generatePassword+0x9a>
 8001b92:	e052      	b.n	8001c3a <generatePassword+0xea>
			case 0:{
				if(hasLetter){
 8001b94:	78bb      	ldrb	r3, [r7, #2]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04f      	beq.n	8001c3a <generatePassword+0xea>
					str[i] = (hasMajuscule && getRandomNumber(100) > 50) ? toupper(listAlpha[getRandomNumber(LENGTHALPHA)]) : listAlpha[getRandomNumber(LENGTHALPHA)];
 8001b9a:	7f3b      	ldrb	r3, [r7, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <generatePassword+0x78>
 8001ba0:	2064      	movs	r0, #100	; 0x64
 8001ba2:	f000 f859 	bl	8001c58 <getRandomNumber>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b32      	cmp	r3, #50	; 0x32
 8001baa:	d90d      	bls.n	8001bc8 <generatePassword+0x78>
 8001bac:	201a      	movs	r0, #26
 8001bae:	f000 f853 	bl	8001c58 <getRandomNumber>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <generatePassword+0xfc>)
 8001bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00c f809 	bl	800dbd4 <toupper>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e008      	b.n	8001bda <generatePassword+0x8a>
 8001bc8:	201a      	movs	r0, #26
 8001bca:	f000 f845 	bl	8001c58 <getRandomNumber>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <generatePassword+0xfc>)
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	440a      	add	r2, r1
 8001be0:	7013      	strb	r3, [r2, #0]
					i++;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	3301      	adds	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001be8:	e027      	b.n	8001c3a <generatePassword+0xea>
			}
			case 1:{
				if(hasNumber){
 8001bea:	787b      	ldrb	r3, [r7, #1]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d024      	beq.n	8001c3a <generatePassword+0xea>
					str[i] = listNumb[getRandomNumber(LENGTHNUMB)];
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f000 f831 	bl	8001c58 <getRandomNumber>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <generatePassword+0x100>)
 8001bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
					i++;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001c10:	e013      	b.n	8001c3a <generatePassword+0xea>
			}
			case 2:{
				if(hasSpecialChar){
 8001c12:	7e3b      	ldrb	r3, [r7, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00f      	beq.n	8001c38 <generatePassword+0xe8>
					str[i] = listSpecialChar[getRandomNumber(LENGTHSPECIALCHAR)];
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f000 f81d 	bl	8001c58 <getRandomNumber>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <generatePassword+0x104>)
 8001c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
					i++;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001c38:	bf00      	nop
	while(i<length){
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d39b      	bcc.n	8001b7a <generatePassword+0x2a>
			}
		}
	}
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000178 	.word	0x20000178
 8001c50:	200001e0 	.word	0x200001e0
 8001c54:	20000208 	.word	0x20000208

08001c58 <getRandomNumber>:

uint8_t getRandomNumber(uint8_t max){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	uint8_t random = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
	 // Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8001c66:	480b      	ldr	r0, [pc, #44]	; (8001c94 <getRandomNumber+0x3c>)
 8001c68:	f000 ffce 	bl	8002c08 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <getRandomNumber+0x3c>)
 8001c70:	f001 f878 	bl	8002d64 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	random = HAL_ADC_GetValue(&hadc1)%max;
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <getRandomNumber+0x3c>)
 8001c76:	f001 f97b 	bl	8002f70 <HAL_ADC_GetValue>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	73fb      	strb	r3, [r7, #15]
	return random;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000055c 	.word	0x2000055c

08001c98 <resetAllPassword>:

void resetAllPassword(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
	uint8_t tempPassBuff[1] = {0};
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	713b      	strb	r3, [r7, #4]
	W25qxx_EraseBlock(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 fbf2 	bl	800248c <W25qxx_EraseBlock>
	W25qxx_WriteBlock(tempPassBuff, 1, 0, 1);
 8001ca8:	1d38      	adds	r0, r7, #4
 8001caa:	2301      	movs	r3, #1
 8001cac:	2200      	movs	r2, #0
 8001cae:	2101      	movs	r1, #1
 8001cb0:	f000 fce2 	bl	8002678 <W25qxx_WriteBlock>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <MX_SPI2_Init+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001d08:	220a      	movs	r2, #10
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <MX_SPI2_Init+0x64>)
 8001d0e:	f004 fd95 	bl	800683c <HAL_SPI_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d18:	f7ff ff14 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000664 	.word	0x20000664
 8001d24:	40003800 	.word	0x40003800

08001d28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d131      	bne.n	8001dac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d78:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <HAL_SPI_MspInit+0x94>)
 8001d8e:	f001 fcf9 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_SPI_MspInit+0x94>)
 8001da8:	f001 fcec 	bl	8003784 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40003800 	.word	0x40003800
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010c00 	.word	0x40010c00

08001dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6193      	str	r3, [r2, #24]
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x5c>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_MspInit+0x5c>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_MspInit+0x5c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_MspInit+0x60>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_MspInit+0x60>)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6a:	f000 fdb5 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001e7a:	f002 fbb2 	bl	80045e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000704 	.word	0x20000704

08001e88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e8e:	f002 fba8 	bl	80045e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000704 	.word	0x20000704

08001e9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USART1_IRQHandler+0x10>)
 8001ea2:	f005 fb47 	bl	8007534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200006c0 	.word	0x200006c0

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f00b fd08 	bl	800d8f4 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20005000 	.word	0x20005000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	200006bc 	.word	0x200006bc
 8001f18:	20001328 	.word	0x20001328

08001f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <MX_USART1_UART_Init+0x50>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_USART1_UART_Init+0x4c>)
 8001f60:	f005 f9d8 	bl	8007314 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f6a:	f7ff fdeb 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200006c0 	.word	0x200006c0
 8001f78:	40013800 	.word	0x40013800

08001f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a20      	ldr	r2, [pc, #128]	; (8002018 <HAL_UART_MspInit+0x9c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d139      	bne.n	8002010 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_UART_MspInit+0xa0>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_UART_MspInit+0xa0>)
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_UART_MspInit+0xa0>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_UART_MspInit+0xa0>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_UART_MspInit+0xa0>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_UART_MspInit+0xa0>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <HAL_UART_MspInit+0xa4>)
 8001fe2:	f001 fbcf 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <HAL_UART_MspInit+0xa4>)
 8001ffc:	f001 fbc2 	bl	8003784 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2025      	movs	r0, #37	; 0x25
 8002006:	f001 fad6 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800200a:	2025      	movs	r0, #37	; 0x25
 800200c:	f001 faef 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40013800 	.word	0x40013800
 800201c:	40021000 	.word	0x40021000
 8002020:	40010800 	.word	0x40010800

08002024 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 800202a:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <MX_USB_PCD_Init+0x40>)
 800202c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 8002030:	2208      	movs	r2, #8
 8002032:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 8002036:	2202      	movs	r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_USB_PCD_Init+0x3c>)
 800204e:	f002 f997 	bl	8004380 <HAL_PCD_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002058:	f7ff fd74 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000704 	.word	0x20000704
 8002064:	40005c00 	.word	0x40005c00

08002068 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_PCD_MspInit+0x54>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d11b      	bne.n	80020b2 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_PCD_MspInit+0x58>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_PCD_MspInit+0x58>)
 8002080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_PCD_MspInit+0x58>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2013      	movs	r0, #19
 8002098:	f001 fa8d 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800209c:	2013      	movs	r0, #19
 800209e:	f001 faa6 	bl	80035ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2014      	movs	r0, #20
 80020a8:	f001 fa85 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80020ac:	2014      	movs	r0, #20
 80020ae:	f001 fa9e 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40005c00 	.word	0x40005c00
 80020c0:	40021000 	.word	0x40021000

080020c4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80020ce:	f107 020f 	add.w	r2, r7, #15
 80020d2:	1df9      	adds	r1, r7, #7
 80020d4:	2364      	movs	r3, #100	; 0x64
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2301      	movs	r3, #1
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <W25qxx_Spi+0x28>)
 80020dc:	f004 fe7f 	bl	8006dde <HAL_SPI_TransmitReceive>
	return ret;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000664 	.word	0x20000664

080020f0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	2300      	movs	r3, #0
 8002104:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <W25qxx_ReadID+0x6c>)
 800210e:	f001 fcd4 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002112:	209f      	movs	r0, #159	; 0x9f
 8002114:	f7ff ffd6 	bl	80020c4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002118:	20a5      	movs	r0, #165	; 0xa5
 800211a:	f7ff ffd3 	bl	80020c4 <W25qxx_Spi>
 800211e:	4603      	mov	r3, r0
 8002120:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002122:	20a5      	movs	r0, #165	; 0xa5
 8002124:	f7ff ffce 	bl	80020c4 <W25qxx_Spi>
 8002128:	4603      	mov	r3, r0
 800212a:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800212c:	20a5      	movs	r0, #165	; 0xa5
 800212e:	f7ff ffc9 	bl	80020c4 <W25qxx_Spi>
 8002132:	4603      	mov	r3, r0
 8002134:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800213c:	4807      	ldr	r0, [pc, #28]	; (800215c <W25qxx_ReadID+0x6c>)
 800213e:	f001 fcbc 	bl	8003aba <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	4313      	orrs	r3, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40010c00 	.word	0x40010c00

08002160 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4816      	ldr	r0, [pc, #88]	; (80021c8 <W25qxx_ReadUniqID+0x68>)
 800216e:	f001 fca4 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002172:	204b      	movs	r0, #75	; 0x4b
 8002174:	f7ff ffa6 	bl	80020c4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	e005      	b.n	800218a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800217e:	20a5      	movs	r0, #165	; 0xa5
 8002180:	f7ff ffa0 	bl	80020c4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	3301      	adds	r3, #1
 8002188:	71fb      	strb	r3, [r7, #7]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d9f6      	bls.n	800217e <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	71bb      	strb	r3, [r7, #6]
 8002194:	e00b      	b.n	80021ae <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002196:	79bc      	ldrb	r4, [r7, #6]
 8002198:	20a5      	movs	r0, #165	; 0xa5
 800219a:	f7ff ff93 	bl	80020c4 <W25qxx_Spi>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <W25qxx_ReadUniqID+0x6c>)
 80021a4:	4423      	add	r3, r4
 80021a6:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	3301      	adds	r3, #1
 80021ac:	71bb      	strb	r3, [r7, #6]
 80021ae:	79bb      	ldrb	r3, [r7, #6]
 80021b0:	2b07      	cmp	r3, #7
 80021b2:	d9f0      	bls.n	8002196 <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <W25qxx_ReadUniqID+0x68>)
 80021bc:	f001 fc7d 	bl	8003aba <HAL_GPIO_WritePin>
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	200009f0 	.word	0x200009f0

080021d0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <W25qxx_WriteEnable+0x2c>)
 80021dc:	f001 fc6d 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80021e0:	2006      	movs	r0, #6
 80021e2:	f7ff ff6f 	bl	80020c4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <W25qxx_WriteEnable+0x2c>)
 80021ee:	f001 fc64 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 fc0c 	bl	8002a10 <HAL_Delay>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010c00 	.word	0x40010c00

08002200 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	481c      	ldr	r0, [pc, #112]	; (8002288 <W25qxx_ReadStatusRegister+0x88>)
 8002216:	f001 fc50 	bl	8003aba <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8002220:	2005      	movs	r0, #5
 8002222:	f7ff ff4f 	bl	80020c4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002226:	20a5      	movs	r0, #165	; 0xa5
 8002228:	f7ff ff4c 	bl	80020c4 <W25qxx_Spi>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <W25qxx_ReadStatusRegister+0x8c>)
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002238:	e01b      	b.n	8002272 <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d10c      	bne.n	800225a <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8002240:	2035      	movs	r0, #53	; 0x35
 8002242:	f7ff ff3f 	bl	80020c4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002246:	20a5      	movs	r0, #165	; 0xa5
 8002248:	f7ff ff3c 	bl	80020c4 <W25qxx_Spi>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <W25qxx_ReadStatusRegister+0x8c>)
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002258:	e00b      	b.n	8002272 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 800225a:	2015      	movs	r0, #21
 800225c:	f7ff ff32 	bl	80020c4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002260:	20a5      	movs	r0, #165	; 0xa5
 8002262:	f7ff ff2f 	bl	80020c4 <W25qxx_Spi>
 8002266:	4603      	mov	r3, r0
 8002268:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <W25qxx_ReadStatusRegister+0x8c>)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	4803      	ldr	r0, [pc, #12]	; (8002288 <W25qxx_ReadStatusRegister+0x88>)
 800227a:	f001 fc1e 	bl	8003aba <HAL_GPIO_WritePin>
	return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010c00 	.word	0x40010c00
 800228c:	200009f0 	.word	0x200009f0

08002290 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f000 fbbb 	bl	8002a10 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	480f      	ldr	r0, [pc, #60]	; (80022e0 <W25qxx_WaitForWriteEnd+0x50>)
 80022a2:	f001 fc0a 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80022a6:	2005      	movs	r0, #5
 80022a8:	f7ff ff0c 	bl	80020c4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80022ac:	20a5      	movs	r0, #165	; 0xa5
 80022ae:	f7ff ff09 	bl	80020c4 <W25qxx_Spi>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <W25qxx_WaitForWriteEnd+0x54>)
 80022b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80022bc:	2001      	movs	r0, #1
 80022be:	f000 fba7 	bl	8002a10 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <W25qxx_WaitForWriteEnd+0x54>)
 80022c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ed      	bne.n	80022ac <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d6:	4802      	ldr	r0, [pc, #8]	; (80022e0 <W25qxx_WaitForWriteEnd+0x50>)
 80022d8:	f001 fbef 	bl	8003aba <HAL_GPIO_WritePin>
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	200009f0 	.word	0x200009f0

080022e8 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80022ee:	4b65      	ldr	r3, [pc, #404]	; (8002484 <W25qxx_Init+0x19c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80022f6:	e002      	b.n	80022fe <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f000 fb89 	bl	8002a10 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80022fe:	f000 fb7d 	bl	80029fc <HAL_GetTick>
 8002302:	4603      	mov	r3, r0
 8002304:	2b63      	cmp	r3, #99	; 0x63
 8002306:	d9f7      	bls.n	80022f8 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800230e:	485e      	ldr	r0, [pc, #376]	; (8002488 <W25qxx_Init+0x1a0>)
 8002310:	f001 fbd3 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002314:	2064      	movs	r0, #100	; 0x64
 8002316:	f000 fb7b 	bl	8002a10 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800231a:	f7ff fee9 	bl	80020f0 <W25qxx_ReadID>
 800231e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3b11      	subs	r3, #17
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d86b      	bhi.n	8002402 <W25qxx_Init+0x11a>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <W25qxx_Init+0x48>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	080023f5 	.word	0x080023f5
 8002334:	080023e7 	.word	0x080023e7
 8002338:	080023d9 	.word	0x080023d9
 800233c:	080023cb 	.word	0x080023cb
 8002340:	080023bd 	.word	0x080023bd
 8002344:	080023af 	.word	0x080023af
 8002348:	080023a1 	.word	0x080023a1
 800234c:	08002391 	.word	0x08002391
 8002350:	08002381 	.word	0x08002381
 8002354:	08002403 	.word	0x08002403
 8002358:	08002403 	.word	0x08002403
 800235c:	08002403 	.word	0x08002403
 8002360:	08002403 	.word	0x08002403
 8002364:	08002403 	.word	0x08002403
 8002368:	08002403 	.word	0x08002403
 800236c:	08002371 	.word	0x08002371
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002370:	4b44      	ldr	r3, [pc, #272]	; (8002484 <W25qxx_Init+0x19c>)
 8002372:	220a      	movs	r2, #10
 8002374:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <W25qxx_Init+0x19c>)
 8002378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800237e:	e046      	b.n	800240e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <W25qxx_Init+0x19c>)
 8002382:	2209      	movs	r2, #9
 8002384:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <W25qxx_Init+0x19c>)
 8002388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800238e:	e03e      	b.n	800240e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <W25qxx_Init+0x19c>)
 8002392:	2208      	movs	r2, #8
 8002394:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <W25qxx_Init+0x19c>)
 8002398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800239c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800239e:	e036      	b.n	800240e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <W25qxx_Init+0x19c>)
 80023a2:	2207      	movs	r2, #7
 80023a4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <W25qxx_Init+0x19c>)
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80023ac:	e02f      	b.n	800240e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <W25qxx_Init+0x19c>)
 80023b0:	2206      	movs	r2, #6
 80023b2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80023b4:	4b33      	ldr	r3, [pc, #204]	; (8002484 <W25qxx_Init+0x19c>)
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80023ba:	e028      	b.n	800240e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <W25qxx_Init+0x19c>)
 80023be:	2205      	movs	r2, #5
 80023c0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <W25qxx_Init+0x19c>)
 80023c4:	2220      	movs	r2, #32
 80023c6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80023c8:	e021      	b.n	800240e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <W25qxx_Init+0x19c>)
 80023cc:	2204      	movs	r2, #4
 80023ce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <W25qxx_Init+0x19c>)
 80023d2:	2210      	movs	r2, #16
 80023d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80023d6:	e01a      	b.n	800240e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80023d8:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <W25qxx_Init+0x19c>)
 80023da:	2203      	movs	r2, #3
 80023dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <W25qxx_Init+0x19c>)
 80023e0:	2208      	movs	r2, #8
 80023e2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80023e4:	e013      	b.n	800240e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <W25qxx_Init+0x19c>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <W25qxx_Init+0x19c>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80023f2:	e00c      	b.n	800240e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <W25qxx_Init+0x19c>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <W25qxx_Init+0x19c>)
 80023fc:	2202      	movs	r2, #2
 80023fe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002400:	e005      	b.n	800240e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <W25qxx_Init+0x19c>)
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800240a:	2300      	movs	r3, #0
 800240c:	e036      	b.n	800247c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <W25qxx_Init+0x19c>)
 8002410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002414:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <W25qxx_Init+0x19c>)
 8002418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800241c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <W25qxx_Init+0x19c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <W25qxx_Init+0x19c>)
 8002426:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <W25qxx_Init+0x19c>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <W25qxx_Init+0x19c>)
 800242e:	6912      	ldr	r2, [r2, #16]
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <W25qxx_Init+0x19c>)
 8002436:	8952      	ldrh	r2, [r2, #10]
 8002438:	fbb3 f3f2 	udiv	r3, r3, r2
 800243c:	4a11      	ldr	r2, [pc, #68]	; (8002484 <W25qxx_Init+0x19c>)
 800243e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <W25qxx_Init+0x19c>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <W25qxx_Init+0x19c>)
 8002448:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <W25qxx_Init+0x19c>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <W25qxx_Init+0x19c>)
 8002450:	6912      	ldr	r2, [r2, #16]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <W25qxx_Init+0x19c>)
 800245a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800245c:	f7ff fe80 	bl	8002160 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff fecd 	bl	8002200 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002466:	2002      	movs	r0, #2
 8002468:	f7ff feca 	bl	8002200 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800246c:	2003      	movs	r0, #3
 800246e:	f7ff fec7 	bl	8002200 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <W25qxx_Init+0x19c>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200009f0 	.word	0x200009f0
 8002488:	40010c00 	.word	0x40010c00

0800248c <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002494:	e002      	b.n	800249c <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8002496:	2001      	movs	r0, #1
 8002498:	f000 faba 	bl	8002a10 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <W25qxx_EraseBlock+0xb0>)
 800249e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d0f7      	beq.n	8002496 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <W25qxx_EraseBlock+0xb0>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80024ae:	f7ff feef 	bl	8002290 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <W25qxx_EraseBlock+0xb0>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80024c0:	f7ff fe86 	bl	80021d0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ca:	481d      	ldr	r0, [pc, #116]	; (8002540 <W25qxx_EraseBlock+0xb4>)
 80024cc:	f001 faf5 	bl	8003aba <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <W25qxx_EraseBlock+0xb0>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d909      	bls.n	80024ec <W25qxx_EraseBlock+0x60>
	{
		W25qxx_Spi(0xDC);
 80024d8:	20dc      	movs	r0, #220	; 0xdc
 80024da:	f7ff fdf3 	bl	80020c4 <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0e1b      	lsrs	r3, r3, #24
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fded 	bl	80020c4 <W25qxx_Spi>
 80024ea:	e002      	b.n	80024f2 <W25qxx_EraseBlock+0x66>
	}
	else
	{
		W25qxx_Spi(0xD8);
 80024ec:	20d8      	movs	r0, #216	; 0xd8
 80024ee:	f7ff fde9 	bl	80020c4 <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fde3 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fddd 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdd8 	bl	80020c4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002514:	2201      	movs	r2, #1
 8002516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251a:	4809      	ldr	r0, [pc, #36]	; (8002540 <W25qxx_EraseBlock+0xb4>)
 800251c:	f001 facd 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002520:	f7ff feb6 	bl	8002290 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002524:	2001      	movs	r0, #1
 8002526:	f000 fa73 	bl	8002a10 <HAL_Delay>
	w25qxx.Lock = 0;
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <W25qxx_EraseBlock+0xb0>)
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200009f0 	.word	0x200009f0
 8002540:	40010c00 	.word	0x40010c00

08002544 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <W25qxx_BlockToPage+0x24>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <W25qxx_BlockToPage+0x24>)
 8002558:	8952      	ldrh	r2, [r2, #10]
 800255a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	200009f0 	.word	0x200009f0

0800256c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800257a:	e002      	b.n	8002582 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800257c:	2001      	movs	r0, #1
 800257e:	f000 fa47 	bl	8002a10 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <W25qxx_WritePage+0x100>)
 8002584:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002588:	2b01      	cmp	r3, #1
 800258a:	d0f7      	beq.n	800257c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800258c:	4b37      	ldr	r3, [pc, #220]	; (800266c <W25qxx_WritePage+0x100>)
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a34      	ldr	r2, [pc, #208]	; (800266c <W25qxx_WritePage+0x100>)
 800259c:	8952      	ldrh	r2, [r2, #10]
 800259e:	4293      	cmp	r3, r2
 80025a0:	d802      	bhi.n	80025a8 <W25qxx_WritePage+0x3c>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80025a8:	4b30      	ldr	r3, [pc, #192]	; (800266c <W25qxx_WritePage+0x100>)
 80025aa:	895b      	ldrh	r3, [r3, #10]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a2c      	ldr	r2, [pc, #176]	; (800266c <W25qxx_WritePage+0x100>)
 80025bc:	8952      	ldrh	r2, [r2, #10]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d905      	bls.n	80025ce <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <W25qxx_WritePage+0x100>)
 80025c4:	895b      	ldrh	r3, [r3, #10]
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80025ce:	f7ff fe5f 	bl	8002290 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80025d2:	f7ff fdfd 	bl	80021d0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025dc:	4824      	ldr	r0, [pc, #144]	; (8002670 <W25qxx_WritePage+0x104>)
 80025de:	f001 fa6c 	bl	8003aba <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <W25qxx_WritePage+0x100>)
 80025e4:	895b      	ldrh	r3, [r3, #10]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <W25qxx_WritePage+0x100>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d909      	bls.n	8002610 <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 80025fc:	2012      	movs	r0, #18
 80025fe:	f7ff fd61 	bl	80020c4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fd5b 	bl	80020c4 <W25qxx_Spi>
 800260e:	e002      	b.n	8002616 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 8002610:	2002      	movs	r0, #2
 8002612:	f7ff fd57 	bl	80020c4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	b2db      	uxtb	r3, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fd51 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fd4b 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fd46 	bl	80020c4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b29a      	uxth	r2, r3
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <W25qxx_WritePage+0x108>)
 8002642:	f004 f97f 	bl	8006944 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264c:	4808      	ldr	r0, [pc, #32]	; (8002670 <W25qxx_WritePage+0x104>)
 800264e:	f001 fa34 	bl	8003aba <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002652:	f7ff fe1d 	bl	8002290 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002656:	2001      	movs	r0, #1
 8002658:	f000 f9da 	bl	8002a10 <HAL_Delay>
	w25qxx.Lock = 0;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <W25qxx_WritePage+0x100>)
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200009f0 	.word	0x200009f0
 8002670:	40010c00 	.word	0x40010c00
 8002674:	20000664 	.word	0x20000664

08002678 <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_WriteBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_BlockSize)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToWrite_up_to_BlockSize == 0))
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d802      	bhi.n	8002696 <W25qxx_WriteBlock+0x1e>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize = w25qxx.BlockSize;
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d243      	bcs.n	800272e <W25qxx_WriteBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	441a      	add	r2, r3
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d905      	bls.n	80026c0 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e001      	b.n	80026c4 <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 80026c4:	68b8      	ldr	r0, [r7, #8]
 80026c6:	f7ff ff3d 	bl	8002544 <W25qxx_BlockToPage>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 80026ce:	895b      	ldrh	r3, [r3, #10]
 80026d0:	4619      	mov	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d8:	4413      	add	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 80026de:	895b      	ldrh	r3, [r3, #10]
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80026e8:	fb01 f202 	mul.w	r2, r1, r2
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	69f9      	ldr	r1, [r7, #28]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff ff38 	bl	800256c <W25qxx_WritePage>
		StartPage++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 8002704:	895b      	ldrh	r3, [r3, #10]
 8002706:	461a      	mov	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1a9a      	subs	r2, r3, r2
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <W25qxx_WriteBlock+0xc0>)
 8002714:	895b      	ldrh	r3, [r3, #10]
 8002716:	461a      	mov	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	dce1      	bgt.n	80026f0 <W25qxx_WriteBlock+0x78>
 800272c:	e000      	b.n	8002730 <W25qxx_WriteBlock+0xb8>
		return;
 800272e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200009f0 	.word	0x200009f0

0800273c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800274a:	e002      	b.n	8002752 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800274c:	2001      	movs	r0, #1
 800274e:	f000 f95f 	bl	8002a10 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <W25qxx_ReadPage+0xf4>)
 8002754:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002758:	2b01      	cmp	r3, #1
 800275a:	d0f7      	beq.n	800274c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <W25qxx_ReadPage+0xf4>)
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <W25qxx_ReadPage+0xf4>)
 8002766:	895b      	ldrh	r3, [r3, #10]
 8002768:	461a      	mov	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	4293      	cmp	r3, r2
 800276e:	d802      	bhi.n	8002776 <W25qxx_ReadPage+0x3a>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <W25qxx_ReadPage+0xf4>)
 8002778:	895b      	ldrh	r3, [r3, #10]
 800277a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <W25qxx_ReadPage+0xf4>)
 8002784:	8952      	ldrh	r2, [r2, #10]
 8002786:	4293      	cmp	r3, r2
 8002788:	d905      	bls.n	8002796 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <W25qxx_ReadPage+0xf4>)
 800278c:	895b      	ldrh	r3, [r3, #10]
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <W25qxx_ReadPage+0xf4>)
 8002798:	895b      	ldrh	r3, [r3, #10]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ae:	4821      	ldr	r0, [pc, #132]	; (8002834 <W25qxx_ReadPage+0xf8>)
 80027b0:	f001 f983 	bl	8003aba <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <W25qxx_ReadPage+0xf4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d909      	bls.n	80027d0 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 80027bc:	200c      	movs	r0, #12
 80027be:	f7ff fc81 	bl	80020c4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0e1b      	lsrs	r3, r3, #24
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fc7b 	bl	80020c4 <W25qxx_Spi>
 80027ce:	e002      	b.n	80027d6 <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80027d0:	200b      	movs	r0, #11
 80027d2:	f7ff fc77 	bl	80020c4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fc71 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fc6b 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fc66 	bl	80020c4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fc63 	bl	80020c4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b29a      	uxth	r2, r3
 8002802:	2364      	movs	r3, #100	; 0x64
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	480c      	ldr	r0, [pc, #48]	; (8002838 <W25qxx_ReadPage+0xfc>)
 8002808:	f004 f9d8 	bl	8006bbc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002812:	4808      	ldr	r0, [pc, #32]	; (8002834 <W25qxx_ReadPage+0xf8>)
 8002814:	f001 f951 	bl	8003aba <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002818:	2001      	movs	r0, #1
 800281a:	f000 f8f9 	bl	8002a10 <HAL_Delay>
	w25qxx.Lock = 0;
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <W25qxx_ReadPage+0xf4>)
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200009f0 	.word	0x200009f0
 8002834:	40010c00 	.word	0x40010c00
 8002838:	20000664 	.word	0x20000664

0800283c <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d802      	bhi.n	800285a <W25qxx_ReadBlock+0x1e>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d243      	bcs.n	80028f2 <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	441a      	add	r2, r3
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	429a      	cmp	r2, r3
 8002876:	d905      	bls.n	8002884 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e001      	b.n	8002888 <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f7ff fe5b 	bl	8002544 <W25qxx_BlockToPage>
 800288e:	4602      	mov	r2, r0
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 8002892:	895b      	ldrh	r3, [r3, #10]
 8002894:	4619      	mov	r1, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	fbb3 f3f1 	udiv	r3, r3, r1
 800289c:	4413      	add	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 80028a2:	895b      	ldrh	r3, [r3, #10]
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80028ac:	fb01 f202 	mul.w	r2, r1, r2
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	69f9      	ldr	r1, [r7, #28]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff ff3e 	bl	800273c <W25qxx_ReadPage>
		StartPage++;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	3301      	adds	r3, #1
 80028c4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 80028c8:	895b      	ldrh	r3, [r3, #10]
 80028ca:	461a      	mov	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	1a9a      	subs	r2, r3, r2
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <W25qxx_ReadBlock+0xc0>)
 80028d8:	895b      	ldrh	r3, [r3, #10]
 80028da:	461a      	mov	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dce1      	bgt.n	80028b4 <W25qxx_ReadBlock+0x78>
 80028f0:	e000      	b.n	80028f4 <W25qxx_ReadBlock+0xb8>
		return;
 80028f2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200009f0 	.word	0x200009f0

08002900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002902:	490d      	ldr	r1, [pc, #52]	; (8002938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002926:	f7ff faf9 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292a:	f00a ffe9 	bl	800d900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800292e:	f7fe fd3b 	bl	80013a8 <main>
  bx lr
 8002932:	4770      	bx	lr
  ldr r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002938:	20000500 	.word	0x20000500
  ldr r2, =_sidata
 800293c:	0800e7dc 	.word	0x0800e7dc
  ldr r2, =_sbss
 8002940:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 8002944:	20001328 	.word	0x20001328

08002948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC1_2_IRQHandler>
	...

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_Init+0x28>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_Init+0x28>)
 8002956:	f043 0310 	orr.w	r3, r3, #16
 800295a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295c:	2003      	movs	r0, #3
 800295e:	f000 fe1f 	bl	80035a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002962:	200f      	movs	r0, #15
 8002964:	f000 f808 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002968:	f7ff fa2a 	bl	8001dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40022000 	.word	0x40022000

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_InitTick+0x54>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x58>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fe37 	bl	800360a <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f000 fdff 	bl	80035b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <HAL_InitTick+0x5c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000224 	.word	0x20000224
 80029d0:	2000022c 	.word	0x2000022c
 80029d4:	20000228 	.word	0x20000228

080029d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_IncTick+0x1c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_IncTick+0x20>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_IncTick+0x20>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	2000022c 	.word	0x2000022c
 80029f8:	20000a18 	.word	0x20000a18

080029fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_GetTick+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000a18 	.word	0x20000a18

08002a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a18:	f7ff fff0 	bl	80029fc <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d005      	beq.n	8002a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_Delay+0x44>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a36:	bf00      	nop
 8002a38:	f7ff ffe0 	bl	80029fc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d8f7      	bhi.n	8002a38 <HAL_Delay+0x28>
  {
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000022c 	.word	0x2000022c

08002a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0be      	b.n	8002bf8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fa76 	bl	8000f88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fbc5 	bl	800322c <ADC_ConversionStop_Disable>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8099 	bne.w	8002be6 <HAL_ADC_Init+0x18e>
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8095 	bne.w	8002be6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac4:	f023 0302 	bic.w	r3, r3, #2
 8002ac8:	f043 0202 	orr.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7b1b      	ldrb	r3, [r3, #12]
 8002ade:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ae0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_Init+0xa2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_ADC_Init+0xa8>
 8002afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_Init+0xaa>
 8002b00:	2300      	movs	r3, #0
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7d1b      	ldrb	r3, [r3, #20]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d119      	bne.n	8002b44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7b1b      	ldrb	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	035a      	lsls	r2, r3, #13
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e00b      	b.n	8002b44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <HAL_ADC_Init+0x1a8>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b74:	d003      	beq.n	8002b7e <HAL_ADC_Init+0x126>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_ADC_Init+0x1ac>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10b      	bne.n	8002bc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc2:	e018      	b.n	8002bf6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f023 0312 	bic.w	r3, r3, #18
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002be4:	e007      	b.n	8002bf6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	ffe1f7fd 	.word	0xffe1f7fd
 8002c04:	ff1f0efe 	.word	0xff1f0efe

08002c08 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Start+0x1a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e098      	b.n	8002d54 <HAL_ADC_Start+0x14c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 faa4 	bl	8003178 <ADC_Enable>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8087 	bne.w	8002d4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <HAL_ADC_Start+0x154>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_Start+0x5e>
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d115      	bne.n	8002c92 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d026      	beq.n	8002cce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c90:	e01d      	b.n	8002cce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_Start+0xaa>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2b      	ldr	r2, [pc, #172]	; (8002d5c <HAL_ADC_Start+0x154>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <HAL_ADC_Start+0xc6>
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f023 0206 	bic.w	r2, r3, #6
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0202 	mvn.w	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d0e:	d113      	bne.n	8002d38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <HAL_ADC_Start+0x154>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d105      	bne.n	8002d26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	e00c      	b.n	8002d52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40012800 	.word	0x40012800
 8002d60:	40012400 	.word	0x40012400

08002d64 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d7a:	f7ff fe3f 	bl	80029fc <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0d3      	b.n	8002f4e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d131      	bne.n	8002e18 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d12a      	bne.n	8002e18 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002dc2:	e021      	b.n	8002e08 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d01d      	beq.n	8002e08 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_ADC_PollForConversion+0x7e>
 8002dd2:	f7ff fe13 	bl	80029fc <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d212      	bcs.n	8002e08 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0a2      	b.n	8002f4e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0d6      	beq.n	8002dc4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e16:	e070      	b.n	8002efa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e18:	4b4f      	ldr	r3, [pc, #316]	; (8002f58 <HAL_ADC_PollForConversion+0x1f4>)
 8002e1a:	681c      	ldr	r4, [r3, #0]
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f003 fc4d 	bl	80066bc <HAL_RCCEx_GetPeriphCLKFreq>
 8002e22:	4603      	mov	r3, r0
 8002e24:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6919      	ldr	r1, [r3, #16]
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	; (8002f5c <HAL_ADC_PollForConversion+0x1f8>)
 8002e30:	400b      	ands	r3, r1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x104>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68d9      	ldr	r1, [r3, #12]
 8002e3c:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <HAL_ADC_PollForConversion+0x1fc>)
 8002e3e:	400b      	ands	r3, r1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x104>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <HAL_ADC_PollForConversion+0x200>)
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d108      	bne.n	8002e64 <HAL_ADC_PollForConversion+0x100>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68d9      	ldr	r1, [r3, #12]
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_ADC_PollForConversion+0x204>)
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_PollForConversion+0x100>
 8002e60:	2314      	movs	r3, #20
 8002e62:	e020      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x142>
 8002e64:	2329      	movs	r3, #41	; 0x29
 8002e66:	e01e      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x142>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6919      	ldr	r1, [r3, #16]
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_ADC_PollForConversion+0x200>)
 8002e70:	400b      	ands	r3, r1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_PollForConversion+0x120>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_ADC_PollForConversion+0x204>)
 8002e7e:	400b      	ands	r3, r1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <HAL_ADC_PollForConversion+0x13c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_ADC_PollForConversion+0x208>)
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_ADC_PollForConversion+0x140>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_ADC_PollForConversion+0x208>)
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_PollForConversion+0x140>
 8002ea0:	2354      	movs	r3, #84	; 0x54
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADC_PollForConversion+0x142>
 8002ea4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002eac:	e021      	b.n	8002ef2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d01a      	beq.n	8002eec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_ADC_PollForConversion+0x168>
 8002ebc:	f7ff fd9e 	bl	80029fc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d20f      	bcs.n	8002eec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d90b      	bls.n	8002eec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e030      	b.n	8002f4e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d8d9      	bhi.n	8002eae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0212 	mvn.w	r2, #18
 8002f02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f1e:	d115      	bne.n	8002f4c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d111      	bne.n	8002f4c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000224 	.word	0x20000224
 8002f5c:	24924924 	.word	0x24924924
 8002f60:	00924924 	.word	0x00924924
 8002f64:	12492492 	.word	0x12492492
 8002f68:	00492492 	.word	0x00492492
 8002f6c:	00249249 	.word	0x00249249

08002f70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x20>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0dc      	b.n	8003162 <HAL_ADC_ConfigChannel+0x1da>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b06      	cmp	r3, #6
 8002fb6:	d81c      	bhi.n	8002ff2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b05      	subs	r3, #5
 8002fca:	221f      	movs	r2, #31
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	4019      	ands	r1, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b05      	subs	r3, #5
 8002fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff0:	e03c      	b.n	800306c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d81c      	bhi.n	8003034 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b23      	subs	r3, #35	; 0x23
 800300c:	221f      	movs	r2, #31
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	4019      	ands	r1, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b23      	subs	r3, #35	; 0x23
 8003026:	fa00 f203 	lsl.w	r2, r0, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
 8003032:	e01b      	b.n	800306c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	3b41      	subs	r3, #65	; 0x41
 8003046:	221f      	movs	r2, #31
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	4019      	ands	r1, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	3b41      	subs	r3, #65	; 0x41
 8003060:	fa00 f203 	lsl.w	r2, r0, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d91c      	bls.n	80030ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	3b1e      	subs	r3, #30
 8003086:	2207      	movs	r2, #7
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4019      	ands	r1, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6898      	ldr	r0, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	3b1e      	subs	r3, #30
 80030a0:	fa00 f203 	lsl.w	r2, r0, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	e019      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6919      	ldr	r1, [r3, #16]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	2207      	movs	r2, #7
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4019      	ands	r1, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6898      	ldr	r0, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	fa00 f203 	lsl.w	r2, r0, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d003      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030ee:	2b11      	cmp	r3, #17
 80030f0:	d132      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_ADC_ConfigChannel+0x1e4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d125      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d126      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003118:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b10      	cmp	r3, #16
 8003120:	d11a      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_ADC_ConfigChannel+0x1e8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <HAL_ADC_ConfigChannel+0x1ec>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0c9a      	lsrs	r2, r3, #18
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003138:	e002      	b.n	8003140 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3b01      	subs	r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f9      	bne.n	800313a <HAL_ADC_ConfigChannel+0x1b2>
 8003146:	e007      	b.n	8003158 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40012400 	.word	0x40012400
 8003170:	20000224 	.word	0x20000224
 8003174:	431bde83 	.word	0x431bde83

08003178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d040      	beq.n	8003218 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <ADC_Enable+0xac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <ADC_Enable+0xb0>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	0c9b      	lsrs	r3, r3, #18
 80031b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031b4:	e002      	b.n	80031bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f9      	bne.n	80031b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031c2:	f7ff fc1b 	bl	80029fc <HAL_GetTick>
 80031c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031c8:	e01f      	b.n	800320a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ca:	f7ff fc17 	bl	80029fc <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d918      	bls.n	800320a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d011      	beq.n	800320a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e007      	b.n	800321a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d1d8      	bne.n	80031ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000224 	.word	0x20000224
 8003228:	431bde83 	.word	0x431bde83

0800322c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d12e      	bne.n	80032a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003256:	f7ff fbd1 	bl	80029fc <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800325c:	e01b      	b.n	8003296 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800325e:	f7ff fbcd 	bl	80029fc <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d914      	bls.n	8003296 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10d      	bne.n	8003296 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e007      	b.n	80032a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d0dc      	beq.n	800325e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADCEx_Calibration_Start+0x1e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e095      	b.n	80033fa <HAL_ADCEx_Calibration_Start+0x14a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa8 	bl	800322c <ADC_ConversionStop_Disable>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 8084 	bne.w	80033f0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032f0:	f023 0302 	bic.w	r3, r3, #2
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032fc:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_ADCEx_Calibration_Start+0x154>)
 80032fe:	681c      	ldr	r4, [r3, #0]
 8003300:	2002      	movs	r0, #2
 8003302:	f003 f9db 	bl	80066bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003306:	4603      	mov	r3, r0
 8003308:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800330c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800330e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003310:	e002      	b.n	8003318 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3b01      	subs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f9      	bne.n	8003312 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff2a 	bl	8003178 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0208 	orr.w	r2, r2, #8
 8003332:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003334:	f7ff fb62 	bl	80029fc <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800333a:	e01b      	b.n	8003374 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800333c:	f7ff fb5e 	bl	80029fc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b0a      	cmp	r3, #10
 8003348:	d914      	bls.n	8003374 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f023 0312 	bic.w	r3, r3, #18
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e042      	b.n	80033fa <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1dc      	bne.n	800333c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0204 	orr.w	r2, r2, #4
 8003390:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003392:	f7ff fb33 	bl	80029fc <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003398:	e01b      	b.n	80033d2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800339a:	f7ff fb2f 	bl	80029fc <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b0a      	cmp	r3, #10
 80033a6:	d914      	bls.n	80033d2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f023 0312 	bic.w	r3, r3, #18
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e013      	b.n	80033fa <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1dc      	bne.n	800339a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f023 0303 	bic.w	r3, r3, #3
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	bf00      	nop
 8003404:	20000224 	.word	0x20000224

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	60d3      	str	r3, [r2, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4906      	ldr	r1, [pc, #24]	; (80034a0 <__NVIC_EnableIRQ+0x34>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356c:	d301      	bcc.n	8003572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356e:	2301      	movs	r3, #1
 8003570:	e00f      	b.n	8003592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <SysTick_Config+0x40>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357a:	210f      	movs	r1, #15
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	f7ff ff90 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <SysTick_Config+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <SysTick_Config+0x40>)
 800358c:	2207      	movs	r2, #7
 800358e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	e000e010 	.word	0xe000e010

080035a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff2d 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c8:	f7ff ff42 	bl	8003450 <__NVIC_GetPriorityGrouping>
 80035cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7ff ff90 	bl	80034f8 <NVIC_EncodePriority>
 80035d8:	4602      	mov	r2, r0
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff5f 	bl	80034a4 <__NVIC_SetPriority>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff35 	bl	800346c <__NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffa2 	bl	800355c <SysTick_Config>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e020      	b.n	800368c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2101      	movs	r1, #1
 8003674:	fa01 f202 	lsl.w	r2, r1, r2
 8003678:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
	...

08003698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d005      	beq.n	80036ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2204      	movs	r2, #4
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e051      	b.n	800375e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 020e 	bic.w	r2, r2, #14
 80036c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a22      	ldr	r2, [pc, #136]	; (8003768 <HAL_DMA_Abort_IT+0xd0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d029      	beq.n	8003738 <HAL_DMA_Abort_IT+0xa0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_DMA_Abort_IT+0xd4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Abort_IT+0x9c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_DMA_Abort_IT+0xd8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01a      	beq.n	800372e <HAL_DMA_Abort_IT+0x96>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_DMA_Abort_IT+0xdc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d012      	beq.n	8003728 <HAL_DMA_Abort_IT+0x90>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_DMA_Abort_IT+0xe0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00a      	beq.n	8003722 <HAL_DMA_Abort_IT+0x8a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_DMA_Abort_IT+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d102      	bne.n	800371c <HAL_DMA_Abort_IT+0x84>
 8003716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800371a:	e00e      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 800371c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003720:	e00b      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003726:	e008      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372c:	e005      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 800372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003732:	e002      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003734:	2310      	movs	r3, #16
 8003736:	e000      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003738:	2301      	movs	r3, #1
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_DMA_Abort_IT+0xe8>)
 800373c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
    } 
  }
  return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40020008 	.word	0x40020008
 800376c:	4002001c 	.word	0x4002001c
 8003770:	40020030 	.word	0x40020030
 8003774:	40020044 	.word	0x40020044
 8003778:	40020058 	.word	0x40020058
 800377c:	4002006c 	.word	0x4002006c
 8003780:	40020000 	.word	0x40020000

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003792:	2300      	movs	r3, #0
 8003794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003796:	e169      	b.n	8003a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003798:	2201      	movs	r2, #1
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f040 8158 	bne.w	8003a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a9a      	ldr	r2, [pc, #616]	; (8003a24 <HAL_GPIO_Init+0x2a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d05e      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037c0:	4a98      	ldr	r2, [pc, #608]	; (8003a24 <HAL_GPIO_Init+0x2a0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d875      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037c6:	4a98      	ldr	r2, [pc, #608]	; (8003a28 <HAL_GPIO_Init+0x2a4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d058      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037cc:	4a96      	ldr	r2, [pc, #600]	; (8003a28 <HAL_GPIO_Init+0x2a4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d86f      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037d2:	4a96      	ldr	r2, [pc, #600]	; (8003a2c <HAL_GPIO_Init+0x2a8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d052      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037d8:	4a94      	ldr	r2, [pc, #592]	; (8003a2c <HAL_GPIO_Init+0x2a8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d869      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037de:	4a94      	ldr	r2, [pc, #592]	; (8003a30 <HAL_GPIO_Init+0x2ac>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04c      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037e4:	4a92      	ldr	r2, [pc, #584]	; (8003a30 <HAL_GPIO_Init+0x2ac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d863      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037ea:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_GPIO_Init+0x2b0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d046      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037f0:	4a90      	ldr	r2, [pc, #576]	; (8003a34 <HAL_GPIO_Init+0x2b0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d85d      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d82a      	bhi.n	8003850 <HAL_GPIO_Init+0xcc>
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d859      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_GPIO_Init+0x80>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	0800387f 	.word	0x0800387f
 8003808:	08003859 	.word	0x08003859
 800380c:	0800386b 	.word	0x0800386b
 8003810:	080038ad 	.word	0x080038ad
 8003814:	080038b3 	.word	0x080038b3
 8003818:	080038b3 	.word	0x080038b3
 800381c:	080038b3 	.word	0x080038b3
 8003820:	080038b3 	.word	0x080038b3
 8003824:	080038b3 	.word	0x080038b3
 8003828:	080038b3 	.word	0x080038b3
 800382c:	080038b3 	.word	0x080038b3
 8003830:	080038b3 	.word	0x080038b3
 8003834:	080038b3 	.word	0x080038b3
 8003838:	080038b3 	.word	0x080038b3
 800383c:	080038b3 	.word	0x080038b3
 8003840:	080038b3 	.word	0x080038b3
 8003844:	080038b3 	.word	0x080038b3
 8003848:	08003861 	.word	0x08003861
 800384c:	08003875 	.word	0x08003875
 8003850:	4a79      	ldr	r2, [pc, #484]	; (8003a38 <HAL_GPIO_Init+0x2b4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003856:	e02c      	b.n	80038b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	623b      	str	r3, [r7, #32]
          break;
 800385e:	e029      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e024      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	3308      	adds	r3, #8
 8003870:	623b      	str	r3, [r7, #32]
          break;
 8003872:	e01f      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	330c      	adds	r3, #12
 800387a:	623b      	str	r3, [r7, #32]
          break;
 800387c:	e01a      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003886:	2304      	movs	r3, #4
 8003888:	623b      	str	r3, [r7, #32]
          break;
 800388a:	e013      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003894:	2308      	movs	r3, #8
 8003896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	611a      	str	r2, [r3, #16]
          break;
 800389e:	e009      	b.n	80038b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038a0:	2308      	movs	r3, #8
 80038a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	615a      	str	r2, [r3, #20]
          break;
 80038aa:	e003      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
          break;
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          break;
 80038b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2bff      	cmp	r3, #255	; 0xff
 80038b8:	d801      	bhi.n	80038be <HAL_GPIO_Init+0x13a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	e001      	b.n	80038c2 <HAL_GPIO_Init+0x13e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d802      	bhi.n	80038d0 <HAL_GPIO_Init+0x14c>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x152>
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3b08      	subs	r3, #8
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	210f      	movs	r1, #15
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	431a      	orrs	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80b1 	beq.w	8003a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6193      	str	r3, [r2, #24]
 8003910:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800391c:	4a48      	ldr	r2, [pc, #288]	; (8003a40 <HAL_GPIO_Init+0x2bc>)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <HAL_GPIO_Init+0x2c0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_GPIO_Init+0x1ec>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_GPIO_Init+0x2c4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00d      	beq.n	800396c <HAL_GPIO_Init+0x1e8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <HAL_GPIO_Init+0x2c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <HAL_GPIO_Init+0x1e4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <HAL_GPIO_Init+0x2cc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_GPIO_Init+0x1e0>
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003964:	2304      	movs	r3, #4
 8003966:	e004      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003968:	2302      	movs	r3, #2
 800396a:	e002      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003970:	2300      	movs	r3, #0
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003982:	492f      	ldr	r1, [pc, #188]	; (8003a40 <HAL_GPIO_Init+0x2bc>)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	492c      	ldr	r1, [pc, #176]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	4928      	ldr	r1, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4922      	ldr	r1, [pc, #136]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	43db      	mvns	r3, r3
 80039da:	491e      	ldr	r1, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039dc:	4013      	ands	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	4918      	ldr	r1, [pc, #96]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4914      	ldr	r1, [pc, #80]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
 8003a20:	e021      	b.n	8003a66 <HAL_GPIO_Init+0x2e2>
 8003a22:	bf00      	nop
 8003a24:	10320000 	.word	0x10320000
 8003a28:	10310000 	.word	0x10310000
 8003a2c:	10220000 	.word	0x10220000
 8003a30:	10210000 	.word	0x10210000
 8003a34:	10120000 	.word	0x10120000
 8003a38:	10110000 	.word	0x10110000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40010800 	.word	0x40010800
 8003a48:	40010c00 	.word	0x40010c00
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_GPIO_Init+0x304>)
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	4909      	ldr	r1, [pc, #36]	; (8003a88 <HAL_GPIO_Init+0x304>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	3301      	adds	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f ae8e 	bne.w	8003798 <HAL_GPIO_Init+0x14>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	372c      	adds	r7, #44	; 0x2c
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40010400 	.word	0x40010400

08003a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e001      	b.n	8003aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	807b      	strh	r3, [r7, #2]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aca:	787b      	ldrb	r3, [r7, #1]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ad6:	e003      	b.n	8003ae0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	041a      	lsls	r2, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	611a      	str	r2, [r3, #16]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
	...

08003aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e12b      	b.n	8003d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fb08 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	; 0x24
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b50:	f002 fcb8 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8003b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4a81      	ldr	r2, [pc, #516]	; (8003d60 <HAL_I2C_Init+0x274>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d807      	bhi.n	8003b70 <HAL_I2C_Init+0x84>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a80      	ldr	r2, [pc, #512]	; (8003d64 <HAL_I2C_Init+0x278>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bf94      	ite	ls
 8003b68:	2301      	movls	r3, #1
 8003b6a:	2300      	movhi	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e006      	b.n	8003b7e <HAL_I2C_Init+0x92>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a7d      	ldr	r2, [pc, #500]	; (8003d68 <HAL_I2C_Init+0x27c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0e7      	b.n	8003d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a78      	ldr	r2, [pc, #480]	; (8003d6c <HAL_I2C_Init+0x280>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <HAL_I2C_Init+0x274>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d802      	bhi.n	8003bc0 <HAL_I2C_Init+0xd4>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	e009      	b.n	8003bd4 <HAL_I2C_Init+0xe8>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	4a69      	ldr	r2, [pc, #420]	; (8003d70 <HAL_I2C_Init+0x284>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003be6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	495c      	ldr	r1, [pc, #368]	; (8003d60 <HAL_I2C_Init+0x274>)
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d819      	bhi.n	8003c28 <HAL_I2C_Init+0x13c>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e59      	subs	r1, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c02:	1c59      	adds	r1, r3, #1
 8003c04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c08:	400b      	ands	r3, r1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_I2C_Init+0x138>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1e59      	subs	r1, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c22:	e051      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003c24:	2304      	movs	r3, #4
 8003c26:	e04f      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d111      	bne.n	8003c54 <HAL_I2C_Init+0x168>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e58      	subs	r0, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	440b      	add	r3, r1
 8003c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e012      	b.n	8003c7a <HAL_I2C_Init+0x18e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e58      	subs	r0, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	0099      	lsls	r1, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Init+0x196>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e022      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10e      	bne.n	8003ca8 <HAL_I2C_Init+0x1bc>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e58      	subs	r0, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	440b      	add	r3, r1
 8003c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	e00f      	b.n	8003cc8 <HAL_I2C_Init+0x1dc>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	6809      	ldr	r1, [r1, #0]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6911      	ldr	r1, [r2, #16]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68d2      	ldr	r2, [r2, #12]
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	000186a0 	.word	0x000186a0
 8003d64:	001e847f 	.word	0x001e847f
 8003d68:	003d08ff 	.word	0x003d08ff
 8003d6c:	431bde83 	.word	0x431bde83
 8003d70:	10624dd3 	.word	0x10624dd3

08003d74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	460b      	mov	r3, r1
 8003d82:	817b      	strh	r3, [r7, #10]
 8003d84:	4613      	mov	r3, r2
 8003d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d88:	f7fe fe38 	bl	80029fc <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	f040 80e0 	bne.w	8003f5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2319      	movs	r3, #25
 8003da2:	2201      	movs	r2, #1
 8003da4:	4970      	ldr	r1, [pc, #448]	; (8003f68 <HAL_I2C_Master_Transmit+0x1f4>)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f964 	bl	8004074 <I2C_WaitOnFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0d3      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2C_Master_Transmit+0x50>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e0cc      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x1ea>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d007      	beq.n	8003dea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2221      	movs	r2, #33	; 0x21
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2210      	movs	r2, #16
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	893a      	ldrh	r2, [r7, #8]
 8003e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a50      	ldr	r2, [pc, #320]	; (8003f6c <HAL_I2C_Master_Transmit+0x1f8>)
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	6a3a      	ldr	r2, [r7, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f89c 	bl	8003f70 <I2C_MasterRequestWrite>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e08d      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e58:	e066      	b.n	8003f28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f9de 	bl	8004220 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d107      	bne.n	8003e82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06b      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d11b      	bne.n	8003efc <HAL_I2C_Master_Transmit+0x188>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d017      	beq.n	8003efc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	6a39      	ldr	r1, [r7, #32]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f9ce 	bl	80042a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d107      	bne.n	8003f24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e01a      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d194      	bne.n	8003e5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	00100002 	.word	0x00100002
 8003f6c:	ffff0000 	.word	0xffff0000

08003f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d006      	beq.n	8003f9a <I2C_MasterRequestWrite+0x2a>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d003      	beq.n	8003f9a <I2C_MasterRequestWrite+0x2a>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f98:	d108      	bne.n	8003fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e00b      	b.n	8003fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b12      	cmp	r3, #18
 8003fb2:	d107      	bne.n	8003fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f84f 	bl	8004074 <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d103      	bne.n	8003ff4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e035      	b.n	8004064 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004000:	d108      	bne.n	8004014 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004002:	897b      	ldrh	r3, [r7, #10]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e01b      	b.n	800404c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004014:	897b      	ldrh	r3, [r7, #10]
 8004016:	11db      	asrs	r3, r3, #7
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0306 	and.w	r3, r3, #6
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f063 030f 	orn	r3, r3, #15
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	490e      	ldr	r1, [pc, #56]	; (800406c <I2C_MasterRequestWrite+0xfc>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f875 	bl	8004122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e010      	b.n	8004064 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004042:	897b      	ldrh	r3, [r7, #10]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4907      	ldr	r1, [pc, #28]	; (8004070 <I2C_MasterRequestWrite+0x100>)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f865 	bl	8004122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	00010008 	.word	0x00010008
 8004070:	00010002 	.word	0x00010002

08004074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004084:	e025      	b.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d021      	beq.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fe fcb5 	bl	80029fc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e023      	b.n	800411a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10d      	bne.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	e00c      	b.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4013      	ands	r3, r2
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf0c      	ite	eq
 800410a:	2301      	moveq	r3, #1
 800410c:	2300      	movne	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	429a      	cmp	r2, r3
 8004116:	d0b6      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004130:	e051      	b.n	80041d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004140:	d123      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800415a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0204 	orr.w	r2, r3, #4
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e046      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d021      	beq.n	80041d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fe fc33 	bl	80029fc <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d116      	bne.n	80041d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e020      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d10c      	bne.n	80041fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	e00b      	b.n	8004212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	43da      	mvns	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4013      	ands	r3, r2
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d18d      	bne.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800422c:	e02d      	b.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f878 	bl	8004324 <I2C_IsAcknowledgeFailed>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e02d      	b.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d021      	beq.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fe fbd9 	bl	80029fc <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d116      	bne.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e007      	b.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d1ca      	bne.n	800422e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ae:	e02d      	b.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f837 	bl	8004324 <I2C_IsAcknowledgeFailed>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e02d      	b.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d021      	beq.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe fb98 	bl	80029fc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d116      	bne.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e007      	b.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d1ca      	bne.n	80042b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d11b      	bne.n	8004374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0204 	orr.w	r2, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	b08b      	sub	sp, #44	; 0x2c
 8004384:	af06      	add	r7, sp, #24
 8004386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0fd      	b.n	800458e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fe5e 	bl	8002068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2203      	movs	r2, #3
 80043b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f003 fd09 	bl	8007dd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	687e      	ldr	r6, [r7, #4]
 80043c6:	466d      	mov	r5, sp
 80043c8:	f106 0410 	add.w	r4, r6, #16
 80043cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	1d33      	adds	r3, r6, #4
 80043d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043d8:	6838      	ldr	r0, [r7, #0]
 80043da:	f003 fcd3 	bl	8007d84 <USB_CoreInit>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0ce      	b.n	800458e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f003 fd04 	bl	8007e04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	e04c      	b.n	800449c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	3301      	adds	r3, #1
 8004414:	2201      	movs	r2, #1
 8004416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	b298      	uxth	r0, r3
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	3336      	adds	r3, #54	; 0x36
 8004440:	4602      	mov	r2, r0
 8004442:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	3303      	adds	r3, #3
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	3338      	adds	r3, #56	; 0x38
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	440b      	add	r3, r1
 800447c:	333c      	adds	r3, #60	; 0x3c
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004482:	7bfa      	ldrb	r2, [r7, #15]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	3340      	adds	r3, #64	; 0x40
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	3301      	adds	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3ad      	bcc.n	8004402 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e044      	b.n	8004536 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	f203 1369 	addw	r3, r3, #361	; 0x169
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	440b      	add	r3, r1
 80044d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	3301      	adds	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d3b5      	bcc.n	80044ac <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	687e      	ldr	r6, [r7, #4]
 8004548:	466d      	mov	r5, sp
 800454a:	f106 0410 	add.w	r4, r6, #16
 800454e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	1d33      	adds	r3, r6, #4
 8004558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f003 fc5e 	bl	8007e1c <USB_DevInit>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e00d      	b.n	800458e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f006 f910 	bl	800a7ac <USB_DevDisconnect>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004596 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_PCD_Start+0x16>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e016      	b.n	80045da <HAL_PCD_Start+0x44>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fbf3 	bl	8007da4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80045be:	2101      	movs	r1, #1
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 fba0 	bl	8005d06 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f006 f8e4 	bl	800a798 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b088      	sub	sp, #32
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f006 f8e6 	bl	800a7c0 <USB_ReadInterrupts>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fe:	d102      	bne.n	8004606 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fb5f 	bl	8004cc4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f006 f8d8 	bl	800a7c0 <USB_ReadInterrupts>
 8004610:	4603      	mov	r3, r0
 8004612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d112      	bne.n	8004642 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	b292      	uxth	r2, r2
 8004630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f008 ff38 	bl	800d4aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800463a:	2100      	movs	r1, #0
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f923 	bl	8004888 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f006 f8ba 	bl	800a7c0 <USB_ReadInterrupts>
 800464c:	4603      	mov	r3, r0
 800464e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004656:	d10b      	bne.n	8004670 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800466a:	b292      	uxth	r2, r2
 800466c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f006 f8a3 	bl	800a7c0 <USB_ReadInterrupts>
 800467a:	4603      	mov	r3, r0
 800467c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004684:	d10b      	bne.n	800469e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	b292      	uxth	r2, r2
 800469a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f006 f88c 	bl	800a7c0 <USB_ReadInterrupts>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d126      	bne.n	8004702 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046bc:	b29a      	uxth	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	b292      	uxth	r2, r2
 80046c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0208 	bic.w	r2, r2, #8
 80046de:	b292      	uxth	r2, r2
 80046e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f008 ff0f 	bl	800d508 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046fc:	b292      	uxth	r2, r2
 80046fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f006 f85a 	bl	800a7c0 <USB_ReadInterrupts>
 800470c:	4603      	mov	r3, r0
 800470e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004716:	f040 8082 	bne.w	800481e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	77fb      	strb	r3, [r7, #31]
 800471e:	e010      	b.n	8004742 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	7ffb      	ldrb	r3, [r7, #31]
 800472e:	8812      	ldrh	r2, [r2, #0]
 8004730:	b292      	uxth	r2, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	3320      	adds	r3, #32
 8004736:	443b      	add	r3, r7
 8004738:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800473c:	7ffb      	ldrb	r3, [r7, #31]
 800473e:	3301      	adds	r3, #1
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	7ffb      	ldrb	r3, [r7, #31]
 8004744:	2b07      	cmp	r3, #7
 8004746:	d9eb      	bls.n	8004720 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	b292      	uxth	r2, r2
 800475c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	b292      	uxth	r2, r2
 8004774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004778:	bf00      	nop
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004782:	b29b      	uxth	r3, r3
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f6      	beq.n	800477a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	b292      	uxth	r2, r2
 80047a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e00f      	b.n	80047ca <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	4611      	mov	r1, r2
 80047b2:	7ffa      	ldrb	r2, [r7, #31]
 80047b4:	0092      	lsls	r2, r2, #2
 80047b6:	440a      	add	r2, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	3320      	adds	r3, #32
 80047bc:	443b      	add	r3, r7
 80047be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80047c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80047c4:	7ffb      	ldrb	r3, [r7, #31]
 80047c6:	3301      	adds	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	d9ec      	bls.n	80047aa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0208 	orr.w	r2, r2, #8
 80047e2:	b292      	uxth	r2, r2
 80047e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047fa:	b292      	uxth	r2, r2
 80047fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0204 	orr.w	r2, r2, #4
 8004812:	b292      	uxth	r2, r2
 8004814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f008 fe67 	bl	800d4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f005 ffcc 	bl	800a7c0 <USB_ReadInterrupts>
 8004828:	4603      	mov	r3, r0
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004832:	d10e      	bne.n	8004852 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004846:	b292      	uxth	r2, r2
 8004848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f008 fe1e 	bl	800d48e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f005 ffb2 	bl	800a7c0 <USB_ReadInterrupts>
 800485c:	4603      	mov	r3, r0
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d10b      	bne.n	8004880 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487a:	b292      	uxth	r2, r2
 800487c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_PCD_SetAddress+0x1a>
 800489e:	2302      	movs	r3, #2
 80048a0:	e013      	b.n	80048ca <HAL_PCD_SetAddress+0x42>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f005 ff59 	bl	800a772 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	461a      	mov	r2, r3
 80048e0:	4603      	mov	r3, r0
 80048e2:	70fb      	strb	r3, [r7, #3]
 80048e4:	460b      	mov	r3, r1
 80048e6:	803b      	strh	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da0e      	bge.n	8004916 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	705a      	strb	r2, [r3, #1]
 8004914:	e00e      	b.n	8004934 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 0207 	and.w	r2, r3, #7
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	b2da      	uxtb	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004940:	883a      	ldrh	r2, [r7, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	78ba      	ldrb	r2, [r7, #2]
 800494a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800495e:	78bb      	ldrb	r3, [r7, #2]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d102      	bne.n	800496a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_PCD_EP_Open+0xa6>
 8004974:	2302      	movs	r3, #2
 8004976:	e00e      	b.n	8004996 <HAL_PCD_EP_Open+0xc4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	4618      	mov	r0, r3
 8004988:	f003 fa68 	bl	8007e5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004994:	7afb      	ldrb	r3, [r7, #11]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da0e      	bge.n	80049d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	705a      	strb	r2, [r3, #1]
 80049ce:	e00e      	b.n	80049ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	f003 0207 	and.w	r2, r3, #7
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_EP_Close+0x6a>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e00e      	b.n	8004a26 <HAL_PCD_EP_Close+0x88>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f003 fd8a 	bl	8008530 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	f003 0207 	and.w	r2, r3, #7
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6e:	7afb      	ldrb	r3, [r7, #11]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6979      	ldr	r1, [r7, #20]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f003 ff3c 	bl	8008908 <USB_EPStartXfer>
 8004a90:	e005      	b.n	8004a9e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f003 ff35 	bl	8008908 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	f003 0207 	and.w	r2, r3, #7
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b086      	sub	sp, #24
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae6:	7afb      	ldrb	r3, [r7, #11]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f003 fee2 	bl	8008908 <USB_EPStartXfer>
 8004b44:	e005      	b.n	8004b52 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f003 fedb 	bl	8008908 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	f003 0207 	and.w	r2, r3, #7
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d901      	bls.n	8004b7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e04c      	b.n	8004c14 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da0e      	bge.n	8004ba0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	705a      	strb	r2, [r3, #1]
 8004b9e:	e00c      	b.n	8004bba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_PCD_EP_SetStall+0x7e>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e01c      	b.n	8004c14 <HAL_PCD_EP_SetStall+0xb8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f005 fcc5 	bl	800a578 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d108      	bne.n	8004c0a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f005 fdea 	bl	800a7de <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f003 020f 	and.w	r2, r3, #15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d901      	bls.n	8004c3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e040      	b.n	8004cbc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0e      	bge.n	8004c60 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	705a      	strb	r2, [r3, #1]
 8004c5e:	e00e      	b.n	8004c7e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_PCD_EP_ClrStall+0x82>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e00e      	b.n	8004cbc <HAL_PCD_EP_ClrStall+0xa0>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f005 fcb3 	bl	800a618 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ccc:	e2ec      	b.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004ce4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f040 8161 	bne.w	8004fb0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d152      	bne.n	8004d9e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	81fb      	strh	r3, [r7, #14]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	89fb      	ldrh	r3, [r7, #14]
 8004d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3328      	adds	r3, #40	; 0x28
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	3302      	adds	r3, #2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	441a      	add	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f008 fb7b 	bl	800d45a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 829b 	beq.w	80052a8 <PCD_EP_ISR_Handler+0x5e4>
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 8296 	bne.w	80052a8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d9c:	e284      	b.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d034      	beq.n	8004e22 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	3306      	adds	r3, #6
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f005 fd41 	bl	800a87e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e08:	4013      	ands	r3, r2
 8004e0a:	823b      	strh	r3, [r7, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	8a3a      	ldrh	r2, [r7, #16]
 8004e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e16:	b292      	uxth	r2, r2
 8004e18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f008 faf0 	bl	800d400 <HAL_PCD_SetupStageCallback>
 8004e20:	e242      	b.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e22:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f280 823e 	bge.w	80052a8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e38:	4013      	ands	r3, r2
 8004e3a:	83bb      	strh	r3, [r7, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	8bba      	ldrh	r2, [r7, #28]
 8004e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e46:	b292      	uxth	r2, r2
 8004e48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3306      	adds	r3, #6
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d019      	beq.n	8004eb2 <PCD_EP_ISR_Handler+0x1ee>
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d015      	beq.n	8004eb2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	6959      	ldr	r1, [r3, #20]
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f005 fcf1 	bl	800a87e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f008 fab9 	bl	800d424 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 81f2 	bne.w	80052a8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	4413      	add	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d112      	bne.n	8004f12 <PCD_EP_ISR_Handler+0x24e>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e02f      	b.n	8004f72 <PCD_EP_ISR_Handler+0x2ae>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b3e      	cmp	r3, #62	; 0x3e
 8004f18:	d813      	bhi.n	8004f42 <PCD_EP_ISR_Handler+0x27e>
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <PCD_EP_ISR_Handler+0x270>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	3301      	adds	r3, #1
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	e017      	b.n	8004f72 <PCD_EP_ISR_Handler+0x2ae>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <PCD_EP_ISR_Handler+0x298>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	827b      	strh	r3, [r7, #18]
 8004f84:	8a7b      	ldrh	r3, [r7, #18]
 8004f86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f8a:	827b      	strh	r3, [r7, #18]
 8004f8c:	8a7b      	ldrh	r3, [r7, #18]
 8004f8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f92:	827b      	strh	r3, [r7, #18]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	8a7b      	ldrh	r3, [r7, #18]
 8004f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	8013      	strh	r3, [r2, #0]
 8004fae:	e17b      	b.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f280 80ea 	bge.w	80051a0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ffe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	7b1b      	ldrb	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d122      	bne.n	8005062 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	3306      	adds	r3, #6
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005044:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8087 	beq.w	800515c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	6959      	ldr	r1, [r3, #20]
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	88da      	ldrh	r2, [r3, #6]
 800505a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800505c:	f005 fc0f 	bl	800a87e <USB_ReadPMA>
 8005060:	e07c      	b.n	800515c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	78db      	ldrb	r3, [r3, #3]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d108      	bne.n	800507c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800506a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800506c:	461a      	mov	r2, r3
 800506e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f927 	bl	80052c4 <HAL_PCD_EP_DB_Receive>
 8005076:	4603      	mov	r3, r0
 8005078:	86fb      	strh	r3, [r7, #54]	; 0x36
 800507a:	e06f      	b.n	800515c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	847b      	strh	r3, [r7, #34]	; 0x22
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d021      	beq.n	800511a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	3302      	adds	r3, #2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050fe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02a      	beq.n	800515c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	6959      	ldr	r1, [r3, #20]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	891a      	ldrh	r2, [r3, #8]
 8005112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005114:	f005 fbb3 	bl	800a87e <USB_ReadPMA>
 8005118:	e020      	b.n	800515c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005122:	b29b      	uxth	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	3306      	adds	r3, #6
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005142:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	6959      	ldr	r1, [r3, #20]
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	895a      	ldrh	r2, [r3, #10]
 8005156:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005158:	f005 fb91 	bl	800a87e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005162:	441a      	add	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516e:	441a      	add	r2, r3
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <PCD_EP_ISR_Handler+0x4c2>
 800517c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d206      	bcs.n	8005194 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f008 f949 	bl	800d424 <HAL_PCD_DataOutStageCallback>
 8005192:	e005      	b.n	80051a0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800519a:	4618      	mov	r0, r3
 800519c:	f003 fbb4 	bl	8008908 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d07e      	beq.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80051aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	4413      	add	r3, r2
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	843b      	strh	r3, [r7, #32]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	441a      	add	r2, r3
 80051e8:	8c3b      	ldrh	r3, [r7, #32]
 80051ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	78db      	ldrb	r3, [r3, #3]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d00c      	beq.n	8005218 <PCD_EP_ISR_Handler+0x554>
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800520a:	2b02      	cmp	r3, #2
 800520c:	d146      	bne.n	800529c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800520e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d141      	bne.n	800529c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	3302      	adds	r3, #2
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005240:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	8bfb      	ldrh	r3, [r7, #30]
 8005248:	429a      	cmp	r2, r3
 800524a:	d906      	bls.n	800525a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	8bfb      	ldrh	r3, [r7, #30]
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	619a      	str	r2, [r3, #24]
 8005258:	e002      	b.n	8005260 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	2200      	movs	r2, #0
 800525e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f008 f8f3 	bl	800d45a <HAL_PCD_DataInStageCallback>
 8005274:	e018      	b.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	8bfb      	ldrh	r3, [r7, #30]
 800527c:	441a      	add	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	8bfb      	ldrh	r3, [r7, #30]
 8005288:	441a      	add	r2, r3
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005294:	4618      	mov	r0, r3
 8005296:	f003 fb37 	bl	8008908 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800529a:	e005      	b.n	80052a8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800529c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800529e:	461a      	mov	r2, r3
 80052a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f91b 	bl	80054de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	b21b      	sxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f6ff ad0a 	blt.w	8004cce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3738      	adds	r7, #56	; 0x38
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d07e      	beq.n	80053da <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4413      	add	r3, r2
 80052f0:	3302      	adds	r3, #2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005304:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	8b7b      	ldrh	r3, [r7, #26]
 800530c:	429a      	cmp	r2, r3
 800530e:	d306      	bcc.n	800531e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	8b7b      	ldrh	r3, [r7, #26]
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	619a      	str	r2, [r3, #24]
 800531c:	e002      	b.n	8005324 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d123      	bne.n	8005374 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	833b      	strh	r3, [r7, #24]
 8005348:	8b3b      	ldrh	r3, [r7, #24]
 800534a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800534e:	833b      	strh	r3, [r7, #24]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	8b3b      	ldrh	r3, [r7, #24]
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01f      	beq.n	80053be <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	82fb      	strh	r3, [r7, #22]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	8afb      	ldrh	r3, [r7, #22]
 80053aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053be:	8b7b      	ldrh	r3, [r7, #26]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8087 	beq.w	80054d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6959      	ldr	r1, [r3, #20]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	891a      	ldrh	r2, [r3, #8]
 80053d2:	8b7b      	ldrh	r3, [r7, #26]
 80053d4:	f005 fa53 	bl	800a87e <USB_ReadPMA>
 80053d8:	e07c      	b.n	80054d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	3306      	adds	r3, #6
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005402:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	8b7b      	ldrh	r3, [r7, #26]
 800540a:	429a      	cmp	r2, r3
 800540c:	d306      	bcc.n	800541c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	8b7b      	ldrh	r3, [r7, #26]
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	619a      	str	r2, [r3, #24]
 800541a:	e002      	b.n	8005422 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2200      	movs	r2, #0
 8005420:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d123      	bne.n	8005472 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005444:	83fb      	strh	r3, [r7, #30]
 8005446:	8bfb      	ldrh	r3, [r7, #30]
 8005448:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800544c:	83fb      	strh	r3, [r7, #30]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8bfb      	ldrh	r3, [r7, #30]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11f      	bne.n	80054bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	83bb      	strh	r3, [r7, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	8bbb      	ldrh	r3, [r7, #28]
 80054a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054bc:	8b7b      	ldrh	r3, [r7, #26]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6959      	ldr	r1, [r3, #20]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	895a      	ldrh	r2, [r3, #10]
 80054ce:	8b7b      	ldrh	r3, [r7, #26]
 80054d0:	f005 f9d5 	bl	800a87e <USB_ReadPMA>
    }
  }

  return count;
 80054d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b0a2      	sub	sp, #136	; 0x88
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	4613      	mov	r3, r2
 80054ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 81c7 	beq.w	8005886 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	3302      	adds	r3, #2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005520:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800552c:	429a      	cmp	r2, r3
 800552e:	d907      	bls.n	8005540 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005538:	1ad2      	subs	r2, r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	619a      	str	r2, [r3, #24]
 800553e:	e002      	b.n	8005546 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 80b9 	bne.w	80056c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	785b      	ldrb	r3, [r3, #1]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d126      	bne.n	80055a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	4413      	add	r3, r2
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	4413      	add	r3, r2
 800557a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558a:	b29a      	uxth	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e01a      	b.n	80055dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d116      	bne.n	80055dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	4413      	add	r3, r2
 80055c4:	633b      	str	r3, [r7, #48]	; 0x30
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	011a      	lsls	r2, r3, #4
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	2200      	movs	r2, #0
 80055da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d126      	bne.n	8005638 <HAL_PCD_EP_DB_Transmit+0x15a>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	4413      	add	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	011a      	lsls	r2, r3, #4
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	4413      	add	r3, r2
 800560c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561c:	b29a      	uxth	r2, r3
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005630:	b29a      	uxth	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e017      	b.n	8005668 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d113      	bne.n	8005668 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	4413      	add	r3, r2
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	011a      	lsls	r2, r3, #4
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	4413      	add	r3, r2
 800565c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2200      	movs	r2, #0
 8005666:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	4619      	mov	r1, r3
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f007 fef3 	bl	800d45a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 82d4 	beq.w	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	827b      	strh	r3, [r7, #18]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	8a7b      	ldrh	r3, [r7, #18]
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]
 80056c0:	e2b2      	b.n	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d021      	beq.n	8005710 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	441a      	add	r2, r3
 80056f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	b29b      	uxth	r3, r3
 800570e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005716:	2b01      	cmp	r3, #1
 8005718:	f040 8286 	bne.w	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005724:	441a      	add	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005732:	441a      	add	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	d309      	bcc.n	8005758 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005750:	1ad2      	subs	r2, r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	621a      	str	r2, [r3, #32]
 8005756:	e015      	b.n	8005784 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005764:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800576e:	e009      	b.n	8005784 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2200      	movs	r2, #0
 8005782:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d155      	bne.n	8005838 <HAL_PCD_EP_DB_Transmit+0x35a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	63bb      	str	r3, [r7, #56]	; 0x38
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	4413      	add	r3, r2
 80057a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d112      	bne.n	80057e0 <HAL_PCD_EP_DB_Transmit+0x302>
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e047      	b.n	8005870 <HAL_PCD_EP_DB_Transmit+0x392>
 80057e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e2:	2b3e      	cmp	r3, #62	; 0x3e
 80057e4:	d811      	bhi.n	800580a <HAL_PCD_EP_DB_Transmit+0x32c>
 80057e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_PCD_EP_DB_Transmit+0x31e>
 80057f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f8:	3301      	adds	r3, #1
 80057fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80057fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fe:	b29b      	uxth	r3, r3
 8005800:	029b      	lsls	r3, r3, #10
 8005802:	b29a      	uxth	r2, r3
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e032      	b.n	8005870 <HAL_PCD_EP_DB_Transmit+0x392>
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <HAL_PCD_EP_DB_Transmit+0x342>
 800581a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581c:	3b01      	subs	r3, #1
 800581e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005822:	b29b      	uxth	r3, r3
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29a      	uxth	r2, r3
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e01b      	b.n	8005870 <HAL_PCD_EP_DB_Transmit+0x392>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d117      	bne.n	8005870 <HAL_PCD_EP_DB_Transmit+0x392>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	643b      	str	r3, [r7, #64]	; 0x40
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584e:	b29b      	uxth	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005854:	4413      	add	r3, r2
 8005856:	643b      	str	r3, [r7, #64]	; 0x40
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005860:	4413      	add	r3, r2
 8005862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	b29a      	uxth	r2, r3
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6959      	ldr	r1, [r3, #20]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	891a      	ldrh	r2, [r3, #8]
 800587c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	f004 ffb8 	bl	800a7f4 <USB_WritePMA>
 8005884:	e1d0      	b.n	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	3306      	adds	r3, #6
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d307      	bcc.n	80058ce <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	619a      	str	r2, [r3, #24]
 80058cc:	e002      	b.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2200      	movs	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 80c4 	bne.w	8005a66 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d126      	bne.n	8005934 <HAL_PCD_EP_DB_Transmit+0x456>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	4413      	add	r3, r2
 80058fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	011a      	lsls	r2, r3, #4
 8005904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005906:	4413      	add	r3, r2
 8005908:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800590c:	66bb      	str	r3, [r7, #104]	; 0x68
 800590e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005918:	b29a      	uxth	r2, r3
 800591a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29a      	uxth	r2, r3
 800592e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	e01a      	b.n	800596a <HAL_PCD_EP_DB_Transmit+0x48c>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d116      	bne.n	800596a <HAL_PCD_EP_DB_Transmit+0x48c>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	677b      	str	r3, [r7, #116]	; 0x74
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005950:	4413      	add	r3, r2
 8005952:	677b      	str	r3, [r7, #116]	; 0x74
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595c:	4413      	add	r3, r2
 800595e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005962:	673b      	str	r3, [r7, #112]	; 0x70
 8005964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005966:	2200      	movs	r2, #0
 8005968:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	785b      	ldrb	r3, [r3, #1]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d12f      	bne.n	80059d8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005990:	4413      	add	r3, r2
 8005992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	011a      	lsls	r2, r3, #4
 800599c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059a0:	4413      	add	r3, r2
 80059a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	e017      	b.n	8005a08 <HAL_PCD_EP_DB_Transmit+0x52a>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d113      	bne.n	8005a08 <HAL_PCD_EP_DB_Transmit+0x52a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ee:	4413      	add	r3, r2
 80059f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	011a      	lsls	r2, r3, #4
 80059f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a04:	2200      	movs	r2, #0
 8005a06:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f007 fd23 	bl	800d45a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f040 8104 	bne.w	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	441a      	add	r2, r3
 8005a4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
 8005a64:	e0e0      	b.n	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d121      	bne.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	f040 80b4 	bne.w	8005c28 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ac8:	441a      	add	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d309      	bcc.n	8005afc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	621a      	str	r2, [r3, #32]
 8005afa:	e015      	b.n	8005b28 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d107      	bne.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b12:	e009      	b.n	8005b28 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d155      	bne.n	8005be2 <HAL_PCD_EP_DB_Transmit+0x704>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b4a:	4413      	add	r3, r2
 8005b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	011a      	lsls	r2, r3, #4
 8005b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b56:	4413      	add	r3, r2
 8005b58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d112      	bne.n	8005b8a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e044      	b.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x736>
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8e:	d811      	bhi.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	657b      	str	r3, [r7, #84]	; 0x54
 8005b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e02f      	b.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x736>
 8005bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e018      	b.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x736>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d114      	bne.n	8005c14 <HAL_PCD_EP_DB_Transmit+0x736>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf8:	4413      	add	r3, r2
 8005bfa:	667b      	str	r3, [r7, #100]	; 0x64
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c12:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6959      	ldr	r1, [r3, #20]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	895a      	ldrh	r2, [r3, #10]
 8005c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f004 fde6 	bl	800a7f4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c42:	823b      	strh	r3, [r7, #16]
 8005c44:	8a3b      	ldrh	r3, [r7, #16]
 8005c46:	f083 0310 	eor.w	r3, r3, #16
 8005c4a:	823b      	strh	r3, [r7, #16]
 8005c4c:	8a3b      	ldrh	r3, [r7, #16]
 8005c4e:	f083 0320 	eor.w	r3, r3, #32
 8005c52:	823b      	strh	r3, [r7, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	8a3b      	ldrh	r3, [r7, #16]
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3788      	adds	r7, #136	; 0x88
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	607b      	str	r3, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	817b      	strh	r3, [r7, #10]
 8005c90:	4613      	mov	r3, r2
 8005c92:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c94:	897b      	ldrh	r3, [r7, #10]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca0:	897b      	ldrh	r3, [r7, #10]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e009      	b.n	8005ccc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cb8:	897a      	ldrh	r2, [r7, #10]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	80da      	strh	r2, [r3, #6]
 8005ce0:	e00b      	b.n	8005cfa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e272      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8087 	beq.w	8005e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d3c:	4b92      	ldr	r3, [pc, #584]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d00c      	beq.n	8005d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d48:	4b8f      	ldr	r3, [pc, #572]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d112      	bne.n	8005d7a <HAL_RCC_OscConfig+0x5e>
 8005d54:	4b8c      	ldr	r3, [pc, #560]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d60:	d10b      	bne.n	8005d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d06c      	beq.n	8005e48 <HAL_RCC_OscConfig+0x12c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d168      	bne.n	8005e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e24c      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x76>
 8005d84:	4b80      	ldr	r3, [pc, #512]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a7f      	ldr	r2, [pc, #508]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e02e      	b.n	8005df0 <HAL_RCC_OscConfig+0xd4>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x98>
 8005d9a:	4b7b      	ldr	r3, [pc, #492]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a7a      	ldr	r2, [pc, #488]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4b78      	ldr	r3, [pc, #480]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a77      	ldr	r2, [pc, #476]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e01d      	b.n	8005df0 <HAL_RCC_OscConfig+0xd4>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0xbc>
 8005dbe:	4b72      	ldr	r3, [pc, #456]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a71      	ldr	r2, [pc, #452]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b6f      	ldr	r3, [pc, #444]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6e      	ldr	r2, [pc, #440]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0xd4>
 8005dd8:	4b6b      	ldr	r3, [pc, #428]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a6a      	ldr	r2, [pc, #424]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	4b68      	ldr	r3, [pc, #416]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a67      	ldr	r2, [pc, #412]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df8:	f7fc fe00 	bl	80029fc <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e00:	f7fc fdfc 	bl	80029fc <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b64      	cmp	r3, #100	; 0x64
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e200      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e12:	4b5d      	ldr	r3, [pc, #372]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0xe4>
 8005e1e:	e014      	b.n	8005e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fc fdec 	bl	80029fc <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fc fde8 	bl	80029fc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	; 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e1ec      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3a:	4b53      	ldr	r3, [pc, #332]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x10c>
 8005e46:	e000      	b.n	8005e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d063      	beq.n	8005f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e56:	4b4c      	ldr	r3, [pc, #304]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e62:	4b49      	ldr	r3, [pc, #292]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 030c 	and.w	r3, r3, #12
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d11c      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x18c>
 8005e6e:	4b46      	ldr	r3, [pc, #280]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d116      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7a:	4b43      	ldr	r3, [pc, #268]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_RCC_OscConfig+0x176>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d001      	beq.n	8005e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e1c0      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e92:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4939      	ldr	r1, [pc, #228]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea6:	e03a      	b.n	8005f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d020      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb0:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <HAL_RCC_OscConfig+0x270>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fc fda1 	bl	80029fc <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ebe:	f7fc fd9d 	bl	80029fc <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e1a1      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005edc:	4b2a      	ldr	r3, [pc, #168]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4927      	ldr	r1, [pc, #156]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	600b      	str	r3, [r1, #0]
 8005ef0:	e015      	b.n	8005f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <HAL_RCC_OscConfig+0x270>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fc fd80 	bl	80029fc <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f00:	f7fc fd7c 	bl	80029fc <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e180      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d03a      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d019      	beq.n	8005f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f32:	4b17      	ldr	r3, [pc, #92]	; (8005f90 <HAL_RCC_OscConfig+0x274>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f38:	f7fc fd60 	bl	80029fc <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f40:	f7fc fd5c 	bl	80029fc <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e160      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <HAL_RCC_OscConfig+0x26c>)
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f5e:	2001      	movs	r0, #1
 8005f60:	f000 fad8 	bl	8006514 <RCC_Delay>
 8005f64:	e01c      	b.n	8005fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f66:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <HAL_RCC_OscConfig+0x274>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6c:	f7fc fd46 	bl	80029fc <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f72:	e00f      	b.n	8005f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f74:	f7fc fd42 	bl	80029fc <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d908      	bls.n	8005f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e146      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	42420000 	.word	0x42420000
 8005f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f94:	4b92      	ldr	r3, [pc, #584]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e9      	bne.n	8005f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80a6 	beq.w	80060fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb2:	4b8b      	ldr	r3, [pc, #556]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10d      	bne.n	8005fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fbe:	4b88      	ldr	r3, [pc, #544]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	4a87      	ldr	r2, [pc, #540]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8005fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	61d3      	str	r3, [r2, #28]
 8005fca:	4b85      	ldr	r3, [pc, #532]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	4b82      	ldr	r3, [pc, #520]	; (80061e4 <HAL_RCC_OscConfig+0x4c8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d118      	bne.n	8006018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe6:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <HAL_RCC_OscConfig+0x4c8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a7e      	ldr	r2, [pc, #504]	; (80061e4 <HAL_RCC_OscConfig+0x4c8>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff2:	f7fc fd03 	bl	80029fc <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffa:	f7fc fcff 	bl	80029fc <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b64      	cmp	r3, #100	; 0x64
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e103      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600c:	4b75      	ldr	r3, [pc, #468]	; (80061e4 <HAL_RCC_OscConfig+0x4c8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f0      	beq.n	8005ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d106      	bne.n	800602e <HAL_RCC_OscConfig+0x312>
 8006020:	4b6f      	ldr	r3, [pc, #444]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	4a6e      	ldr	r2, [pc, #440]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6213      	str	r3, [r2, #32]
 800602c:	e02d      	b.n	800608a <HAL_RCC_OscConfig+0x36e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <HAL_RCC_OscConfig+0x334>
 8006036:	4b6a      	ldr	r3, [pc, #424]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	4a69      	ldr	r2, [pc, #420]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	6213      	str	r3, [r2, #32]
 8006042:	4b67      	ldr	r3, [pc, #412]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	4a66      	ldr	r2, [pc, #408]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006048:	f023 0304 	bic.w	r3, r3, #4
 800604c:	6213      	str	r3, [r2, #32]
 800604e:	e01c      	b.n	800608a <HAL_RCC_OscConfig+0x36e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b05      	cmp	r3, #5
 8006056:	d10c      	bne.n	8006072 <HAL_RCC_OscConfig+0x356>
 8006058:	4b61      	ldr	r3, [pc, #388]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	4a60      	ldr	r2, [pc, #384]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800605e:	f043 0304 	orr.w	r3, r3, #4
 8006062:	6213      	str	r3, [r2, #32]
 8006064:	4b5e      	ldr	r3, [pc, #376]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	4a5d      	ldr	r2, [pc, #372]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	6213      	str	r3, [r2, #32]
 8006070:	e00b      	b.n	800608a <HAL_RCC_OscConfig+0x36e>
 8006072:	4b5b      	ldr	r3, [pc, #364]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	4a5a      	ldr	r2, [pc, #360]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	6213      	str	r3, [r2, #32]
 800607e:	4b58      	ldr	r3, [pc, #352]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	4a57      	ldr	r2, [pc, #348]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	f023 0304 	bic.w	r3, r3, #4
 8006088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d015      	beq.n	80060be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006092:	f7fc fcb3 	bl	80029fc <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006098:	e00a      	b.n	80060b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609a:	f7fc fcaf 	bl	80029fc <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e0b1      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b0:	4b4b      	ldr	r3, [pc, #300]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0ee      	beq.n	800609a <HAL_RCC_OscConfig+0x37e>
 80060bc:	e014      	b.n	80060e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060be:	f7fc fc9d 	bl	80029fc <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c4:	e00a      	b.n	80060dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fc fc99 	bl	80029fc <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e09b      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060dc:	4b40      	ldr	r3, [pc, #256]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ee      	bne.n	80060c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060e8:	7dfb      	ldrb	r3, [r7, #23]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d105      	bne.n	80060fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ee:	4b3c      	ldr	r3, [pc, #240]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4a3b      	ldr	r2, [pc, #236]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8087 	beq.w	8006212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006104:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b08      	cmp	r3, #8
 800610e:	d061      	beq.n	80061d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d146      	bne.n	80061a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006118:	4b33      	ldr	r3, [pc, #204]	; (80061e8 <HAL_RCC_OscConfig+0x4cc>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611e:	f7fc fc6d 	bl	80029fc <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006126:	f7fc fc69 	bl	80029fc <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e06d      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006138:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f0      	bne.n	8006126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d108      	bne.n	8006160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800614e:	4b24      	ldr	r3, [pc, #144]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	4921      	ldr	r1, [pc, #132]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006160:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a19      	ldr	r1, [r3, #32]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	430b      	orrs	r3, r1
 8006172:	491b      	ldr	r1, [pc, #108]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 8006174:	4313      	orrs	r3, r2
 8006176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <HAL_RCC_OscConfig+0x4cc>)
 800617a:	2201      	movs	r2, #1
 800617c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617e:	f7fc fc3d 	bl	80029fc <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006186:	f7fc fc39 	bl	80029fc <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e03d      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0f0      	beq.n	8006186 <HAL_RCC_OscConfig+0x46a>
 80061a4:	e035      	b.n	8006212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <HAL_RCC_OscConfig+0x4cc>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fc fc26 	bl	80029fc <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fc fc22 	bl	80029fc <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e026      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <HAL_RCC_OscConfig+0x4c4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x498>
 80061d2:	e01e      	b.n	8006212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d107      	bne.n	80061ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e019      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40007000 	.word	0x40007000
 80061e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCC_OscConfig+0x500>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d106      	bne.n	800620e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d001      	beq.n	8006212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40021000 	.word	0x40021000

08006220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0d0      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006234:	4b6a      	ldr	r3, [pc, #424]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d910      	bls.n	8006264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 0207 	bic.w	r2, r3, #7
 800624a:	4965      	ldr	r1, [pc, #404]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	4b63      	ldr	r3, [pc, #396]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0b8      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d020      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800627c:	4b59      	ldr	r3, [pc, #356]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a58      	ldr	r2, [pc, #352]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006294:	4b53      	ldr	r3, [pc, #332]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4a52      	ldr	r2, [pc, #328]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800629a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800629e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a0:	4b50      	ldr	r3, [pc, #320]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	494d      	ldr	r1, [pc, #308]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d040      	beq.n	8006340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b47      	ldr	r3, [pc, #284]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d115      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e07f      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062de:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e073      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ee:	4b3d      	ldr	r3, [pc, #244]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e06b      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fe:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4936      	ldr	r1, [pc, #216]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006310:	f7fc fb74 	bl	80029fc <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	e00a      	b.n	800632e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006318:	f7fc fb70 	bl	80029fc <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e053      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632e:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f003 020c 	and.w	r2, r3, #12
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	429a      	cmp	r2, r3
 800633e:	d1eb      	bne.n	8006318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d210      	bcs.n	8006370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f023 0207 	bic.w	r2, r3, #7
 8006356:	4922      	ldr	r1, [pc, #136]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	4313      	orrs	r3, r2
 800635c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635e:	4b20      	ldr	r3, [pc, #128]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e032      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800637c:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4916      	ldr	r1, [pc, #88]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800638a:	4313      	orrs	r3, r2
 800638c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800639a:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	490e      	ldr	r1, [pc, #56]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ae:	f000 f821 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80063b2:	4602      	mov	r2, r0
 80063b4:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	490a      	ldr	r1, [pc, #40]	; (80063e8 <HAL_RCC_ClockConfig+0x1c8>)
 80063c0:	5ccb      	ldrb	r3, [r1, r3]
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1cc>)
 80063c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCC_ClockConfig+0x1d0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fc fad2 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40022000 	.word	0x40022000
 80063e4:	40021000 	.word	0x40021000
 80063e8:	0800e688 	.word	0x0800e688
 80063ec:	20000224 	.word	0x20000224
 80063f0:	20000228 	.word	0x20000228

080063f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f4:	b490      	push	{r4, r7}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063fa:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80063fc:	1d3c      	adds	r4, r7, #4
 80063fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006404:	f240 2301 	movw	r3, #513	; 0x201
 8006408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b04      	cmp	r3, #4
 800642c:	d002      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x40>
 800642e:	2b08      	cmp	r3, #8
 8006430:	d003      	beq.n	800643a <HAL_RCC_GetSysClockFreq+0x46>
 8006432:	e02b      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006436:	623b      	str	r3, [r7, #32]
      break;
 8006438:	e02b      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	0c9b      	lsrs	r3, r3, #18
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	3328      	adds	r3, #40	; 0x28
 8006444:	443b      	add	r3, r7
 8006446:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800644a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d012      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006456:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	0c5b      	lsrs	r3, r3, #17
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	3328      	adds	r3, #40	; 0x28
 8006462:	443b      	add	r3, r7
 8006464:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006468:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800646e:	fb03 f202 	mul.w	r2, r3, r2
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
 800647a:	e004      	b.n	8006486 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4a0b      	ldr	r2, [pc, #44]	; (80064ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	623b      	str	r3, [r7, #32]
      break;
 800648a:	e002      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800648e:	623b      	str	r3, [r7, #32]
      break;
 8006490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006492:	6a3b      	ldr	r3, [r7, #32]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3728      	adds	r7, #40	; 0x28
 8006498:	46bd      	mov	sp, r7
 800649a:	bc90      	pop	{r4, r7}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	0800e5f4 	.word	0x0800e5f4
 80064a4:	40021000 	.word	0x40021000
 80064a8:	007a1200 	.word	0x007a1200
 80064ac:	003d0900 	.word	0x003d0900

080064b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80064b6:	681b      	ldr	r3, [r3, #0]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	20000224 	.word	0x20000224

080064c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064c8:	f7ff fff2 	bl	80064b0 <HAL_RCC_GetHCLKFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	4903      	ldr	r1, [pc, #12]	; (80064e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40021000 	.word	0x40021000
 80064e8:	0800e698 	.word	0x0800e698

080064ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064f0:	f7ff ffde 	bl	80064b0 <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetPCLK2Freq+0x20>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	0adb      	lsrs	r3, r3, #11
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4903      	ldr	r1, [pc, #12]	; (8006510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40021000 	.word	0x40021000
 8006510:	0800e698 	.word	0x0800e698

08006514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <RCC_Delay+0x34>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a0a      	ldr	r2, [pc, #40]	; (800654c <RCC_Delay+0x38>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0a5b      	lsrs	r3, r3, #9
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006530:	bf00      	nop
  }
  while (Delay --);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	60fa      	str	r2, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f9      	bne.n	8006530 <RCC_Delay+0x1c>
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	20000224 	.word	0x20000224
 800654c:	10624dd3 	.word	0x10624dd3

08006550 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d07d      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800656c:	2300      	movs	r3, #0
 800656e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006570:	4b4f      	ldr	r3, [pc, #316]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10d      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800657c:	4b4c      	ldr	r3, [pc, #304]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	4a4b      	ldr	r2, [pc, #300]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006586:	61d3      	str	r3, [r2, #28]
 8006588:	4b49      	ldr	r3, [pc, #292]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006598:	4b46      	ldr	r3, [pc, #280]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d118      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065a4:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a42      	ldr	r2, [pc, #264]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b0:	f7fc fa24 	bl	80029fc <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b6:	e008      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b8:	f7fc fa20 	bl	80029fc <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b64      	cmp	r3, #100	; 0x64
 80065c4:	d901      	bls.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e06d      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	4b3a      	ldr	r3, [pc, #232]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f0      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065d6:	4b36      	ldr	r3, [pc, #216]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d02e      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d027      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065f4:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065fe:	4b2e      	ldr	r3, [pc, #184]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006600:	2201      	movs	r2, #1
 8006602:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006604:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800660a:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661a:	f7fc f9ef 	bl	80029fc <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006620:	e00a      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006622:	f7fc f9eb 	bl	80029fc <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e036      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006638:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0ee      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006644:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4917      	ldr	r1, [pc, #92]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006652:	4313      	orrs	r3, r2
 8006654:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800665c:	4b14      	ldr	r3, [pc, #80]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006666:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d008      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006674:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	490b      	ldr	r1, [pc, #44]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006682:	4313      	orrs	r3, r2
 8006684:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b00      	cmp	r3, #0
 8006690:	d008      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	4904      	ldr	r1, [pc, #16]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
 80066b4:	40007000 	.word	0x40007000
 80066b8:	42420440 	.word	0x42420440

080066bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066bc:	b590      	push	{r4, r7, lr}
 80066be:	b08d      	sub	sp, #52	; 0x34
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80066c4:	4b58      	ldr	r3, [pc, #352]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80066c6:	f107 040c 	add.w	r4, r7, #12
 80066ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80066d0:	f240 2301 	movw	r3, #513	; 0x201
 80066d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
 80066da:	2300      	movs	r3, #0
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066de:	2300      	movs	r3, #0
 80066e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	2300      	movs	r3, #0
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d00a      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	f200 808e 	bhi.w	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d049      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d079      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006704:	e086      	b.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006706:	4b49      	ldr	r3, [pc, #292]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800670c:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d07f      	beq.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	0c9b      	lsrs	r3, r3, #18
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	3330      	adds	r3, #48	; 0x30
 8006722:	443b      	add	r3, r7
 8006724:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006728:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d017      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006734:	4b3d      	ldr	r3, [pc, #244]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	0c5b      	lsrs	r3, r3, #17
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	3330      	adds	r3, #48	; 0x30
 8006740:	443b      	add	r3, r7
 8006742:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006752:	4a37      	ldr	r2, [pc, #220]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	fbb2 f2f3 	udiv	r2, r2, r3
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	fb02 f303 	mul.w	r3, r2, r3
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006762:	e004      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	4a33      	ldr	r2, [pc, #204]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006768:	fb02 f303 	mul.w	r3, r2, r3
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800676e:	4b2f      	ldr	r3, [pc, #188]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677a:	d102      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006780:	e04a      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4a2c      	ldr	r2, [pc, #176]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006790:	e042      	b.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006792:	4b26      	ldr	r3, [pc, #152]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a2:	d108      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b4:	e01f      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d109      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80067ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d4:	e00f      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067e0:	d11c      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80067ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067f4:	e012      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80067f6:	e011      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067f8:	f7ff fe78 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 80067fc:	4602      	mov	r2, r0
 80067fe:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	0b9b      	lsrs	r3, r3, #14
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	3301      	adds	r3, #1
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006812:	e004      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006814:	bf00      	nop
 8006816:	e002      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800681c:	bf00      	nop
    }
  }
  return (frequency);
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006820:	4618      	mov	r0, r3
 8006822:	3734      	adds	r7, #52	; 0x34
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}
 8006828:	0800e604 	.word	0x0800e604
 800682c:	40021000 	.word	0x40021000
 8006830:	007a1200 	.word	0x007a1200
 8006834:	003d0900 	.word	0x003d0900
 8006838:	aaaaaaab 	.word	0xaaaaaaab

0800683c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e076      	b.n	800693c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d108      	bne.n	8006868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800685e:	d009      	beq.n	8006874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
 8006866:	e005      	b.n	8006874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fb fa4a 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f8:	ea42 0103 	orr.w	r1, r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	0c1a      	lsrs	r2, r3, #16
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f002 0204 	and.w	r2, r2, #4
 800691a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69da      	ldr	r2, [r3, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800692a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_SPI_Transmit+0x22>
 8006962:	2302      	movs	r3, #2
 8006964:	e126      	b.n	8006bb4 <HAL_SPI_Transmit+0x270>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800696e:	f7fc f845 	bl	80029fc <HAL_GetTick>
 8006972:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d002      	beq.n	800698a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006984:	2302      	movs	r3, #2
 8006986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006988:	e10b      	b.n	8006ba2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_SPI_Transmit+0x52>
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800699a:	e102      	b.n	8006ba2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2203      	movs	r2, #3
 80069a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e2:	d10f      	bne.n	8006a04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d007      	beq.n	8006a22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2a:	d14b      	bne.n	8006ac4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_Transmit+0xf6>
 8006a34:	8afb      	ldrh	r3, [r7, #22]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d13e      	bne.n	8006ab8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a5e:	e02b      	b.n	8006ab8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d112      	bne.n	8006a94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	881a      	ldrh	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a92:	e011      	b.n	8006ab8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a94:	f7fb ffb2 	bl	80029fc <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d803      	bhi.n	8006aac <HAL_SPI_Transmit+0x168>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d102      	bne.n	8006ab2 <HAL_SPI_Transmit+0x16e>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ab6:	e074      	b.n	8006ba2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ce      	bne.n	8006a60 <HAL_SPI_Transmit+0x11c>
 8006ac2:	e04c      	b.n	8006b5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_SPI_Transmit+0x18e>
 8006acc:	8afb      	ldrh	r3, [r7, #22]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d140      	bne.n	8006b54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006af8:	e02c      	b.n	8006b54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d113      	bne.n	8006b30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b2e:	e011      	b.n	8006b54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b30:	f7fb ff64 	bl	80029fc <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d803      	bhi.n	8006b48 <HAL_SPI_Transmit+0x204>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d102      	bne.n	8006b4e <HAL_SPI_Transmit+0x20a>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b52:	e026      	b.n	8006ba2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1cd      	bne.n	8006afa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fbb8 	bl	80072d8 <SPI_EndRxTxTransaction>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	77fb      	strb	r3, [r7, #31]
 8006b9e:	e000      	b.n	8006ba2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ba0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bd8:	d112      	bne.n	8006c00 <HAL_SPI_Receive+0x44>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10e      	bne.n	8006c00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2204      	movs	r2, #4
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f8f1 	bl	8006dde <HAL_SPI_TransmitReceive>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	e0ea      	b.n	8006dd6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_SPI_Receive+0x52>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e0e3      	b.n	8006dd6 <HAL_SPI_Receive+0x21a>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c16:	f7fb fef1 	bl	80029fc <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d002      	beq.n	8006c2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c2c:	e0ca      	b.n	8006dc4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_SPI_Receive+0x7e>
 8006c34:	88fb      	ldrh	r3, [r7, #6]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c3e:	e0c1      	b.n	8006dc4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2204      	movs	r2, #4
 8006c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c86:	d10f      	bne.n	8006ca8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ca6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d007      	beq.n	8006cc6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d162      	bne.n	8006d94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cce:	e02e      	b.n	8006d2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d115      	bne.n	8006d0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f103 020c 	add.w	r2, r3, #12
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d08:	e011      	b.n	8006d2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0a:	f7fb fe77 	bl	80029fc <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d803      	bhi.n	8006d22 <HAL_SPI_Receive+0x166>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d102      	bne.n	8006d28 <HAL_SPI_Receive+0x16c>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d2c:	e04a      	b.n	8006dc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1cb      	bne.n	8006cd0 <HAL_SPI_Receive+0x114>
 8006d38:	e031      	b.n	8006d9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d113      	bne.n	8006d70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	b292      	uxth	r2, r2
 8006d54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	1c9a      	adds	r2, r3, #2
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d6e:	e011      	b.n	8006d94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d70:	f7fb fe44 	bl	80029fc <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d803      	bhi.n	8006d88 <HAL_SPI_Receive+0x1cc>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d86:	d102      	bne.n	8006d8e <HAL_SPI_Receive+0x1d2>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d92:	e017      	b.n	8006dc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1cd      	bne.n	8006d3a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fa46 	bl	8007234 <SPI_EndRxTransaction>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]
 8006dc0:	e000      	b.n	8006dc4 <HAL_SPI_Receive+0x208>
  }

error :
 8006dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b08c      	sub	sp, #48	; 0x30
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dec:	2301      	movs	r3, #1
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_SPI_TransmitReceive+0x26>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e18a      	b.n	800711a <HAL_SPI_TransmitReceive+0x33c>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e0c:	f7fb fdf6 	bl	80029fc <HAL_GetTick>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d00f      	beq.n	8006e4e <HAL_SPI_TransmitReceive+0x70>
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e34:	d107      	bne.n	8006e46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_SPI_TransmitReceive+0x68>
 8006e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d003      	beq.n	8006e4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e46:	2302      	movs	r3, #2
 8006e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e4c:	e15b      	b.n	8007106 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x82>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x82>
 8006e5a:	887b      	ldrh	r3, [r7, #2]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e66:	e14e      	b.n	8007106 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d003      	beq.n	8006e7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2205      	movs	r2, #5
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	887a      	ldrh	r2, [r7, #2]
 8006e92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	887a      	ldrh	r2, [r7, #2]
 8006e9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	887a      	ldrh	r2, [r7, #2]
 8006ea4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d007      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed8:	d178      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SPI_TransmitReceive+0x10a>
 8006ee2:	8b7b      	ldrh	r3, [r7, #26]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d166      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f0c:	e053      	b.n	8006fb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d11b      	bne.n	8006f54 <HAL_SPI_TransmitReceive+0x176>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d016      	beq.n	8006f54 <HAL_SPI_TransmitReceive+0x176>
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d113      	bne.n	8006f54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d119      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x1b8>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d014      	beq.n	8006f96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	b292      	uxth	r2, r2
 8006f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	1c9a      	adds	r2, r3, #2
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f92:	2301      	movs	r3, #1
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f96:	f7fb fd31 	bl	80029fc <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d807      	bhi.n	8006fb6 <HAL_SPI_TransmitReceive+0x1d8>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d003      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fb4:	e0a7      	b.n	8007106 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1a6      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x130>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1a1      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x130>
 8006fca:	e07c      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x1fc>
 8006fd4:	8b7b      	ldrh	r3, [r7, #26]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d16b      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	7812      	ldrb	r2, [r2, #0]
 8006fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007000:	e057      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b02      	cmp	r3, #2
 800700e:	d11c      	bne.n	800704a <HAL_SPI_TransmitReceive+0x26c>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d017      	beq.n	800704a <HAL_SPI_TransmitReceive+0x26c>
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	2b01      	cmp	r3, #1
 800701e:	d114      	bne.n	800704a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	330c      	adds	r3, #12
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d119      	bne.n	800708c <HAL_SPI_TransmitReceive+0x2ae>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d014      	beq.n	800708c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007088:	2301      	movs	r3, #1
 800708a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800708c:	f7fb fcb6 	bl	80029fc <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007098:	429a      	cmp	r2, r3
 800709a:	d803      	bhi.n	80070a4 <HAL_SPI_TransmitReceive+0x2c6>
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d102      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x2cc>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d103      	bne.n	80070b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070b0:	e029      	b.n	8007106 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1a2      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x224>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d19d      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f904 	bl	80072d8 <SPI_EndRxTxTransaction>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d006      	beq.n	80070e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80070e2:	e010      	b.n	8007106 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	e000      	b.n	8007106 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007104:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800711a:	4618      	mov	r0, r3
 800711c:	3730      	adds	r7, #48	; 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007134:	f7fb fc62 	bl	80029fc <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	1a9b      	subs	r3, r3, r2
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4413      	add	r3, r2
 8007142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007144:	f7fb fc5a 	bl	80029fc <HAL_GetTick>
 8007148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	015b      	lsls	r3, r3, #5
 8007150:	0d1b      	lsrs	r3, r3, #20
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	fb02 f303 	mul.w	r3, r2, r3
 8007158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715a:	e054      	b.n	8007206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d050      	beq.n	8007206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007164:	f7fb fc4a 	bl	80029fc <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	429a      	cmp	r2, r3
 8007172:	d902      	bls.n	800717a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d13d      	bne.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007192:	d111      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719c:	d004      	beq.n	80071a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a6:	d107      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c0:	d10f      	bne.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e017      	b.n	8007226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	3b01      	subs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4013      	ands	r3, r2
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	429a      	cmp	r2, r3
 8007214:	bf0c      	ite	eq
 8007216:	2301      	moveq	r3, #1
 8007218:	2300      	movne	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	429a      	cmp	r2, r3
 8007222:	d19b      	bne.n	800715c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000224 	.word	0x20000224

08007234 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007248:	d111      	bne.n	800726e <SPI_EndRxTransaction+0x3a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007252:	d004      	beq.n	800725e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725c:	d107      	bne.n	800726e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007276:	d117      	bne.n	80072a8 <SPI_EndRxTransaction+0x74>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007280:	d112      	bne.n	80072a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	2101      	movs	r1, #1
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff ff49 	bl	8007124 <SPI_WaitFlagStateUntilTimeout>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01a      	beq.n	80072ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	f043 0220 	orr.w	r2, r3, #32
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e013      	b.n	80072d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2200      	movs	r2, #0
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff ff36 	bl	8007124 <SPI_WaitFlagStateUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e000      	b.n	80072d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff ff18 	bl	8007124 <SPI_WaitFlagStateUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	f043 0220 	orr.w	r2, r3, #32
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e000      	b.n	800730c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e03f      	b.n	80073a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fa fe1e 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2224      	movs	r2, #36	; 0x24
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fc85 	bl	8007c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800736c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695a      	ldr	r2, [r3, #20]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800737c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800738c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b08a      	sub	sp, #40	; 0x28
 80073b2:	af02      	add	r7, sp, #8
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	603b      	str	r3, [r7, #0]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d17c      	bne.n	80074c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_UART_Transmit+0x2c>
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e075      	b.n	80074ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_UART_Transmit+0x3e>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e06e      	b.n	80074ca <HAL_UART_Transmit+0x11c>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2221      	movs	r2, #33	; 0x21
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007402:	f7fb fafb 	bl	80029fc <HAL_GetTick>
 8007406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741c:	d108      	bne.n	8007430 <HAL_UART_Transmit+0x82>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	e003      	b.n	8007438 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007434:	2300      	movs	r3, #0
 8007436:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007440:	e02a      	b.n	8007498 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	2180      	movs	r1, #128	; 0x80
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 fa38 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e036      	b.n	80074ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	3302      	adds	r3, #2
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	e007      	b.n	800748a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	3301      	adds	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1cf      	bne.n	8007442 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2200      	movs	r2, #0
 80074aa:	2140      	movs	r1, #64	; 0x40
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fa08 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e006      	b.n	80074ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e000      	b.n	80074ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
  }
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d11d      	bne.n	8007528 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_UART_Receive_IT+0x26>
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e016      	b.n	800752a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UART_Receive_IT+0x38>
 8007506:	2302      	movs	r3, #2
 8007508:	e00f      	b.n	800752a <HAL_UART_Receive_IT+0x58>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	461a      	mov	r2, r3
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fa19 	bl	8007956 <UART_Start_Receive_IT>
 8007524:	4603      	mov	r3, r0
 8007526:	e000      	b.n	800752a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007528:	2302      	movs	r3, #2
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08a      	sub	sp, #40	; 0x28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007554:	2300      	movs	r3, #0
 8007556:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10d      	bne.n	8007586 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_UART_IRQHandler+0x52>
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fac9 	bl	8007b16 <UART_Receive_IT>
      return;
 8007584:	e17b      	b.n	800787e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 80b1 	beq.w	80076f0 <HAL_UART_IRQHandler+0x1bc>
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d105      	bne.n	80075a4 <HAL_UART_IRQHandler+0x70>
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80a6 	beq.w	80076f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <HAL_UART_IRQHandler+0x90>
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	f043 0201 	orr.w	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_UART_IRQHandler+0xb0>
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	f043 0202 	orr.w	r2, r3, #2
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <HAL_UART_IRQHandler+0xd0>
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	f043 0204 	orr.w	r2, r3, #4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00f      	beq.n	800762e <HAL_UART_IRQHandler+0xfa>
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d104      	bne.n	8007622 <HAL_UART_IRQHandler+0xee>
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	f043 0208 	orr.w	r2, r3, #8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 811e 	beq.w	8007874 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_UART_IRQHandler+0x11e>
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa62 	bl	8007b16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <HAL_UART_IRQHandler+0x146>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d031      	beq.n	80076de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f9a4 	bl	80079c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d023      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	4a76      	ldr	r2, [pc, #472]	; (8007884 <HAL_UART_IRQHandler+0x350>)
 80076ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fb fff0 	bl	8003698 <HAL_DMA_Abort_IT>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d016      	beq.n	80076ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076cc:	e00e      	b.n	80076ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8e3 	bl	800789a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	e00a      	b.n	80076ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f8df 	bl	800789a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e006      	b.n	80076ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f8db 	bl	800789a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076ea:	e0c3      	b.n	8007874 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	bf00      	nop
    return;
 80076ee:	e0c1      	b.n	8007874 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	f040 80a1 	bne.w	800783c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 809b 	beq.w	800783c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f003 0310 	and.w	r3, r3, #16
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8095 	beq.w	800783c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d04e      	beq.n	80077d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007740:	8a3b      	ldrh	r3, [r7, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8098 	beq.w	8007878 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800774c:	8a3a      	ldrh	r2, [r7, #16]
 800774e:	429a      	cmp	r2, r3
 8007750:	f080 8092 	bcs.w	8007878 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8a3a      	ldrh	r2, [r7, #16]
 8007758:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b20      	cmp	r3, #32
 8007762:	d02b      	beq.n	80077bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007772:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695a      	ldr	r2, [r3, #20]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0210 	bic.w	r2, r2, #16
 80077b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fb ff33 	bl	8003622 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f86d 	bl	80078ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077d2:	e051      	b.n	8007878 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d047      	beq.n	800787c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80077ec:	8a7b      	ldrh	r3, [r7, #18]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d044      	beq.n	800787c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007800:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0210 	bic.w	r2, r2, #16
 800782e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007830:	8a7b      	ldrh	r3, [r7, #18]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f839 	bl	80078ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800783a:	e01f      	b.n	800787c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b00      	cmp	r3, #0
 8007844:	d008      	beq.n	8007858 <HAL_UART_IRQHandler+0x324>
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f8f9 	bl	8007a48 <UART_Transmit_IT>
    return;
 8007856:	e012      	b.n	800787e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00d      	beq.n	800787e <HAL_UART_IRQHandler+0x34a>
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f93a 	bl	8007ae6 <UART_EndTransmit_IT>
    return;
 8007872:	e004      	b.n	800787e <HAL_UART_IRQHandler+0x34a>
    return;
 8007874:	bf00      	nop
 8007876:	e002      	b.n	800787e <HAL_UART_IRQHandler+0x34a>
      return;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <HAL_UART_IRQHandler+0x34a>
      return;
 800787c:	bf00      	nop
  }
}
 800787e:	3728      	adds	r7, #40	; 0x28
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	08007a21 	.word	0x08007a21

08007888 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr

0800789a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr

080078c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	e02c      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	d028      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80078e2:	f7fb f88b 	bl	80029fc <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d21d      	bcs.n	800792e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007900:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0201 	bic.w	r2, r2, #1
 8007910:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e00f      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4013      	ands	r3, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	bf0c      	ite	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	2300      	movne	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	429a      	cmp	r2, r3
 800794a:	d0c3      	beq.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	88fa      	ldrh	r2, [r7, #6]
 8007974:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2222      	movs	r2, #34	; 0x22
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800799a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0220 	orr.w	r2, r2, #32
 80079ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bc80      	pop	{r7}
 80079c6:	4770      	bx	lr

080079c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d107      	bne.n	8007a08 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0210 	bic.w	r2, r2, #16
 8007a06:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr

08007a20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7ff ff2d 	bl	800789a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b21      	cmp	r3, #33	; 0x21
 8007a5a:	d13e      	bne.n	8007ada <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a64:	d114      	bne.n	8007a90 <UART_Transmit_IT+0x48>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d110      	bne.n	8007a90 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	621a      	str	r2, [r3, #32]
 8007a8e:	e008      	b.n	8007aa2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	1c59      	adds	r1, r3, #1
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6211      	str	r1, [r2, #32]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10f      	bne.n	8007ad6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e000      	b.n	8007adc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ada:	2302      	movs	r3, #2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff febe 	bl	8007888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b086      	sub	sp, #24
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b22      	cmp	r3, #34	; 0x22
 8007b28:	f040 8099 	bne.w	8007c5e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b34:	d117      	bne.n	8007b66 <UART_Receive_IT+0x50>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d113      	bne.n	8007b66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	1c9a      	adds	r2, r3, #2
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	629a      	str	r2, [r3, #40]	; 0x28
 8007b64:	e026      	b.n	8007bb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b78:	d007      	beq.n	8007b8a <UART_Receive_IT+0x74>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <UART_Receive_IT+0x82>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d106      	bne.n	8007b98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	e008      	b.n	8007baa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d148      	bne.n	8007c5a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0220 	bic.w	r2, r2, #32
 8007bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695a      	ldr	r2, [r3, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0201 	bic.w	r2, r2, #1
 8007bf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d123      	bne.n	8007c50 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0210 	bic.w	r2, r2, #16
 8007c1c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d10a      	bne.n	8007c42 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff fe2f 	bl	80078ac <HAL_UARTEx_RxEventCallback>
 8007c4e:	e002      	b.n	8007c56 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7f8 fa83 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e002      	b.n	8007c60 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e000      	b.n	8007c60 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
  }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007ca2:	f023 030c 	bic.w	r3, r3, #12
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6812      	ldr	r2, [r2, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	430b      	orrs	r3, r1
 8007cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699a      	ldr	r2, [r3, #24]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2c      	ldr	r2, [pc, #176]	; (8007d7c <UART_SetConfig+0x114>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d103      	bne.n	8007cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007cd0:	f7fe fc0c 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	e002      	b.n	8007cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cd8:	f7fe fbf4 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8007cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009a      	lsls	r2, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf4:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <UART_SetConfig+0x118>)
 8007cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfa:	095b      	lsrs	r3, r3, #5
 8007cfc:	0119      	lsls	r1, r3, #4
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009a      	lsls	r2, r3, #2
 8007d08:	441a      	add	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d14:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <UART_SetConfig+0x118>)
 8007d16:	fba3 0302 	umull	r0, r3, r3, r2
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	2064      	movs	r0, #100	; 0x64
 8007d1e:	fb00 f303 	mul.w	r3, r0, r3
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	3332      	adds	r3, #50	; 0x32
 8007d28:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <UART_SetConfig+0x118>)
 8007d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d34:	4419      	add	r1, r3
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009a      	lsls	r2, r3, #2
 8007d40:	441a      	add	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <UART_SetConfig+0x118>)
 8007d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	2064      	movs	r0, #100	; 0x64
 8007d56:	fb00 f303 	mul.w	r3, r0, r3
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	3332      	adds	r3, #50	; 0x32
 8007d60:	4a07      	ldr	r2, [pc, #28]	; (8007d80 <UART_SetConfig+0x118>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	f003 020f 	and.w	r2, r3, #15
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	440a      	add	r2, r1
 8007d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	51eb851f 	.word	0x51eb851f

08007d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d84:	b084      	sub	sp, #16
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	f107 0014 	add.w	r0, r7, #20
 8007d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	b004      	add	sp, #16
 8007da2:	4770      	bx	lr

08007da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007db4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007db8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007dd8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007ddc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	43db      	mvns	r3, r3
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4013      	ands	r3, r2
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr

08007e1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	f107 0014 	add.w	r0, r7, #20
 8007e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	b004      	add	sp, #16
 8007e5a:	4770      	bx	lr

08007e5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b09b      	sub	sp, #108	; 0x6c
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	78db      	ldrb	r3, [r3, #3]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d81f      	bhi.n	8007ece <USB_ActivateEndpoint+0x72>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USB_ActivateEndpoint+0x38>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007ec1 	.word	0x08007ec1
 8007e9c:	08007ed7 	.word	0x08007ed7
 8007ea0:	08007eb3 	.word	0x08007eb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ea4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007eac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007eb0:	e012      	b.n	8007ed8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007eb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007eb6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007eba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ebe:	e00b      	b.n	8007ed8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ec0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ec8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ecc:	e004      	b.n	8007ed8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007ed4:	e000      	b.n	8007ed8 <USB_ActivateEndpoint+0x7c>
      break;
 8007ed6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	441a      	add	r2, r3
 8007ee2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	7b1b      	ldrb	r3, [r3, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 8149 	bne.w	80081dc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 8084 	beq.w	800805c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	461a      	mov	r2, r3
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	4413      	add	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	011a      	lsls	r2, r3, #4
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	88db      	ldrh	r3, [r3, #6]
 8007f7c:	085b      	lsrs	r3, r3, #1
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	81fb      	strh	r3, [r7, #14]
 8007f96:	89fb      	ldrh	r3, [r7, #14]
 8007f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01b      	beq.n	8007fd8 <USB_ActivateEndpoint+0x17c>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	81bb      	strh	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	89bb      	ldrh	r3, [r7, #12]
 8007fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	78db      	ldrb	r3, [r3, #3]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d020      	beq.n	8008022 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff6:	813b      	strh	r3, [r7, #8]
 8007ff8:	893b      	ldrh	r3, [r7, #8]
 8007ffa:	f083 0320 	eor.w	r3, r3, #32
 8007ffe:	813b      	strh	r3, [r7, #8]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	441a      	add	r2, r3
 800800a:	893b      	ldrh	r3, [r7, #8]
 800800c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801c:	b29b      	uxth	r3, r3
 800801e:	8013      	strh	r3, [r2, #0]
 8008020:	e27f      	b.n	8008522 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	817b      	strh	r3, [r7, #10]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	441a      	add	r2, r3
 8008044:	897b      	ldrh	r3, [r7, #10]
 8008046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800804e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008056:	b29b      	uxth	r3, r3
 8008058:	8013      	strh	r3, [r2, #0]
 800805a:	e262      	b.n	8008522 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008066:	b29b      	uxth	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	4413      	add	r3, r2
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	011a      	lsls	r2, r3, #4
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	4413      	add	r3, r2
 800807a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	88db      	ldrh	r3, [r3, #6]
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	b29b      	uxth	r3, r3
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809a:	b29b      	uxth	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	4413      	add	r3, r2
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	011a      	lsls	r2, r3, #4
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	4413      	add	r3, r2
 80080ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080b2:	623b      	str	r3, [r7, #32]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d112      	bne.n	80080e2 <USB_ActivateEndpoint+0x286>
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080da:	b29a      	uxth	r2, r3
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	e02f      	b.n	8008142 <USB_ActivateEndpoint+0x2e6>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b3e      	cmp	r3, #62	; 0x3e
 80080e8:	d813      	bhi.n	8008112 <USB_ActivateEndpoint+0x2b6>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	085b      	lsrs	r3, r3, #1
 80080f0:	663b      	str	r3, [r7, #96]	; 0x60
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <USB_ActivateEndpoint+0x2a8>
 80080fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008100:	3301      	adds	r3, #1
 8008102:	663b      	str	r3, [r7, #96]	; 0x60
 8008104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008106:	b29b      	uxth	r3, r3
 8008108:	029b      	lsls	r3, r3, #10
 800810a:	b29a      	uxth	r2, r3
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	e017      	b.n	8008142 <USB_ActivateEndpoint+0x2e6>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	663b      	str	r3, [r7, #96]	; 0x60
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	2b00      	cmp	r3, #0
 8008124:	d102      	bne.n	800812c <USB_ActivateEndpoint+0x2d0>
 8008126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008128:	3b01      	subs	r3, #1
 800812a:	663b      	str	r3, [r7, #96]	; 0x60
 800812c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800812e:	b29b      	uxth	r3, r3
 8008130:	029b      	lsls	r3, r3, #10
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813c:	b29a      	uxth	r2, r3
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	83fb      	strh	r3, [r7, #30]
 8008150:	8bfb      	ldrh	r3, [r7, #30]
 8008152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01b      	beq.n	8008192 <USB_ActivateEndpoint+0x336>
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008170:	83bb      	strh	r3, [r7, #28]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	8bbb      	ldrh	r3, [r7, #28]
 800817e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a8:	837b      	strh	r3, [r7, #26]
 80081aa:	8b7b      	ldrh	r3, [r7, #26]
 80081ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081b0:	837b      	strh	r3, [r7, #26]
 80081b2:	8b7b      	ldrh	r3, [r7, #26]
 80081b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081b8:	837b      	strh	r3, [r7, #26]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	8b7b      	ldrh	r3, [r7, #26]
 80081c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	8013      	strh	r3, [r2, #0]
 80081da:	e1a2      	b.n	8008522 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008214:	b29b      	uxth	r3, r3
 8008216:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	65bb      	str	r3, [r7, #88]	; 0x58
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008222:	b29b      	uxth	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008228:	4413      	add	r3, r2
 800822a:	65bb      	str	r3, [r7, #88]	; 0x58
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	011a      	lsls	r2, r3, #4
 8008232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008234:	4413      	add	r3, r2
 8008236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800823a:	657b      	str	r3, [r7, #84]	; 0x54
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	891b      	ldrh	r3, [r3, #8]
 8008240:	085b      	lsrs	r3, r3, #1
 8008242:	b29b      	uxth	r3, r3
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	b29a      	uxth	r2, r3
 8008248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	653b      	str	r3, [r7, #80]	; 0x50
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800825c:	4413      	add	r3, r2
 800825e:	653b      	str	r3, [r7, #80]	; 0x50
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	011a      	lsls	r2, r3, #4
 8008266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008268:	4413      	add	r3, r2
 800826a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800826e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	895b      	ldrh	r3, [r3, #10]
 8008274:	085b      	lsrs	r3, r3, #1
 8008276:	b29b      	uxth	r3, r3
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f040 8091 	bne.w	80083ac <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008298:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800829a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01b      	beq.n	80082da <USB_ActivateEndpoint+0x47e>
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	441a      	add	r2, r3
 80082c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80082c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80082e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d01b      	beq.n	800832a <USB_ActivateEndpoint+0x4ce>
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008308:	86fb      	strh	r3, [r7, #54]	; 0x36
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	441a      	add	r2, r3
 8008314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008326:	b29b      	uxth	r3, r3
 8008328:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008342:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008344:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008348:	86bb      	strh	r3, [r7, #52]	; 0x34
 800834a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800834c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008350:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800835e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	b29b      	uxth	r3, r3
 8008370:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008388:	867b      	strh	r3, [r7, #50]	; 0x32
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	441a      	add	r2, r3
 8008394:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	8013      	strh	r3, [r2, #0]
 80083aa:	e0ba      	b.n	8008522 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80083bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80083c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01d      	beq.n	8008404 <USB_ActivateEndpoint+0x5a8>
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	441a      	add	r2, r3
 80083ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008400:	b29b      	uxth	r3, r3
 8008402:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008414:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01d      	beq.n	800845c <USB_ActivateEndpoint+0x600>
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008436:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	78db      	ldrb	r3, [r3, #3]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d024      	beq.n	80084ae <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800847e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008482:	f083 0320 	eor.w	r3, r3, #32
 8008486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	441a      	add	r2, r3
 8008494:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	8013      	strh	r3, [r2, #0]
 80084ac:	e01d      	b.n	80084ea <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	441a      	add	r2, r3
 80084d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80084d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008500:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	441a      	add	r2, r3
 800850c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800850e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851e:	b29b      	uxth	r3, r3
 8008520:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008526:	4618      	mov	r0, r3
 8008528:	376c      	adds	r7, #108	; 0x6c
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr

08008530 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008530:	b480      	push	{r7}
 8008532:	b08d      	sub	sp, #52	; 0x34
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	7b1b      	ldrb	r3, [r3, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 808e 	bne.w	8008660 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d044      	beq.n	80085d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	81bb      	strh	r3, [r7, #12]
 800855a:	89bb      	ldrh	r3, [r7, #12]
 800855c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01b      	beq.n	800859c <USB_DeactivateEndpoint+0x6c>
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29b      	uxth	r3, r3
 8008572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857a:	817b      	strh	r3, [r7, #10]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	441a      	add	r2, r3
 8008586:	897b      	ldrh	r3, [r7, #10]
 8008588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b2:	813b      	strh	r3, [r7, #8]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	893b      	ldrh	r3, [r7, #8]
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]
 80085d4:	e192      	b.n	80088fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	827b      	strh	r3, [r7, #18]
 80085e4:	8a7b      	ldrh	r3, [r7, #18]
 80085e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01b      	beq.n	8008626 <USB_DeactivateEndpoint+0xf6>
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008604:	823b      	strh	r3, [r7, #16]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	441a      	add	r2, r3
 8008610:	8a3b      	ldrh	r3, [r7, #16]
 8008612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800861e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008622:	b29b      	uxth	r3, r3
 8008624:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863c:	81fb      	strh	r3, [r7, #14]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	441a      	add	r2, r3
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865a:	b29b      	uxth	r3, r3
 800865c:	8013      	strh	r3, [r2, #0]
 800865e:	e14d      	b.n	80088fc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 80a5 	bne.w	80087b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	843b      	strh	r3, [r7, #32]
 8008678:	8c3b      	ldrh	r3, [r7, #32]
 800867a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01b      	beq.n	80086ba <USB_DeactivateEndpoint+0x18a>
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008698:	83fb      	strh	r3, [r7, #30]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	441a      	add	r2, r3
 80086a4:	8bfb      	ldrh	r3, [r7, #30]
 80086a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	83bb      	strh	r3, [r7, #28]
 80086c8:	8bbb      	ldrh	r3, [r7, #28]
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01b      	beq.n	800870a <USB_DeactivateEndpoint+0x1da>
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e8:	837b      	strh	r3, [r7, #26]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	441a      	add	r2, r3
 80086f4:	8b7b      	ldrh	r3, [r7, #26]
 80086f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008702:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008706:	b29b      	uxth	r3, r3
 8008708:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	833b      	strh	r3, [r7, #24]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	441a      	add	r2, r3
 800872c:	8b3b      	ldrh	r3, [r7, #24]
 800872e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800873e:	b29b      	uxth	r3, r3
 8008740:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008758:	82fb      	strh	r3, [r7, #22]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	441a      	add	r2, r3
 8008764:	8afb      	ldrh	r3, [r7, #22]
 8008766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008776:	b29b      	uxth	r3, r3
 8008778:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008790:	82bb      	strh	r3, [r7, #20]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	441a      	add	r2, r3
 800879c:	8abb      	ldrh	r3, [r7, #20]
 800879e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	8013      	strh	r3, [r2, #0]
 80087b2:	e0a3      	b.n	80088fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01b      	beq.n	8008804 <USB_DeactivateEndpoint+0x2d4>
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	441a      	add	r2, r3
 80087ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	b29b      	uxth	r3, r3
 8008802:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008812:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01b      	beq.n	8008854 <USB_DeactivateEndpoint+0x324>
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	853b      	strh	r3, [r7, #40]	; 0x28
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	441a      	add	r2, r3
 800883e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008850:	b29b      	uxth	r3, r3
 8008852:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	441a      	add	r2, r3
 8008876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800887c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088da:	847b      	strh	r3, [r7, #34]	; 0x22
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3734      	adds	r7, #52	; 0x34
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b0cc      	sub	sp, #304	; 0x130
 800890c:	af00      	add	r7, sp, #0
 800890e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008916:	6018      	str	r0, [r3, #0]
 8008918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008920:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b01      	cmp	r3, #1
 8008930:	f041 817d 	bne.w	8009c2e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	429a      	cmp	r2, r3
 800894e:	d908      	bls.n	8008962 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008960:	e007      	b.n	8008972 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	7b1b      	ldrb	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d152      	bne.n	8008a28 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6959      	ldr	r1, [r3, #20]
 800898e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	88da      	ldrh	r2, [r3, #6]
 800899a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089a8:	6800      	ldr	r0, [r0, #0]
 80089aa:	f001 ff23 	bl	800a7f4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80089b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089be:	6812      	ldr	r2, [r2, #0]
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	4619      	mov	r1, r3
 80089d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80089dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	440a      	add	r2, r1
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	011a      	lsls	r2, r3, #4
 80089f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4413      	add	r3, r2
 8008a04:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	f001 b8b5 	b.w	8009b92 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	78db      	ldrb	r3, [r3, #3]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	f040 84c6 	bne.w	80093c6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	f240 8443 	bls.w	80092de <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6a1a      	ldr	r2, [r3, #32]
 8008ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac4:	1ad2      	subs	r2, r2, r3
 8008ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 823e 	beq.w	8008f76 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f040 809a 	bne.w	8008c54 <USB_EPStartXfer+0x34c>
 8008b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	4619      	mov	r1, r3
 8008b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b52:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	440a      	add	r2, r1
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	011a      	lsls	r2, r3, #4
 8008b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d122      	bne.n	8008bd2 <USB_EPStartXfer+0x2ca>
 8008b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	801a      	strh	r2, [r3, #0]
 8008bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	e079      	b.n	8008cc6 <USB_EPStartXfer+0x3be>
 8008bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8008bd8:	d81b      	bhi.n	8008c12 <USB_EPStartXfer+0x30a>
 8008bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <USB_EPStartXfer+0x2f2>
 8008bf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	029b      	lsls	r3, r3, #10
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	801a      	strh	r2, [r3, #0]
 8008c10:	e059      	b.n	8008cc6 <USB_EPStartXfer+0x3be>
 8008c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c16:	095b      	lsrs	r3, r3, #5
 8008c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c20:	f003 031f 	and.w	r3, r3, #31
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <USB_EPStartXfer+0x32a>
 8008c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	029b      	lsls	r3, r3, #10
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	e038      	b.n	8008cc6 <USB_EPStartXfer+0x3be>
 8008c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d130      	bne.n	8008cc6 <USB_EPStartXfer+0x3be>
 8008c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4619      	mov	r1, r3
 8008c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008c7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c82:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008c86:	6812      	ldr	r2, [r2, #0]
 8008c88:	440a      	add	r2, r1
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	011a      	lsls	r2, r3, #4
 8008c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	895b      	ldrh	r3, [r3, #10]
 8008cd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6959      	ldr	r1, [r3, #20]
 8008ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008cf0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008cf4:	6800      	ldr	r0, [r0, #0]
 8008cf6:	f001 fd7d 	bl	800a7f4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695a      	ldr	r2, [r3, #20]
 8008d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0a:	441a      	add	r2, r3
 8008d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a1a      	ldr	r2, [r3, #32]
 8008d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d90f      	bls.n	8008d54 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6a1a      	ldr	r2, [r3, #32]
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	1ad2      	subs	r2, r2, r3
 8008d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	621a      	str	r2, [r3, #32]
 8008d52:	e00e      	b.n	8008d72 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f040 809a 	bne.w	8008eb8 <USB_EPStartXfer+0x5b0>
 8008d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008db2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008db6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	011a      	lsls	r2, r3, #4
 8008dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d122      	bne.n	8008e36 <USB_EPStartXfer+0x52e>
 8008df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	801a      	strh	r2, [r3, #0]
 8008e34:	e083      	b.n	8008f3e <USB_EPStartXfer+0x636>
 8008e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e3c:	d81b      	bhi.n	8008e76 <USB_EPStartXfer+0x56e>
 8008e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <USB_EPStartXfer+0x556>
 8008e54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e58:	3301      	adds	r3, #1
 8008e5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	029b      	lsls	r3, r3, #10
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	e063      	b.n	8008f3e <USB_EPStartXfer+0x636>
 8008e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e7a:	095b      	lsrs	r3, r3, #5
 8008e7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e84:	f003 031f 	and.w	r3, r3, #31
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <USB_EPStartXfer+0x58e>
 8008e8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e90:	3b01      	subs	r3, #1
 8008e92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e96:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	029b      	lsls	r3, r3, #10
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	801a      	strh	r2, [r3, #0]
 8008eb6:	e042      	b.n	8008f3e <USB_EPStartXfer+0x636>
 8008eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d13a      	bne.n	8008f3e <USB_EPStartXfer+0x636>
 8008ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ecc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ed0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ed4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	4619      	mov	r1, r3
 8008eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ef6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008efa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	440a      	add	r2, r1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	011a      	lsls	r2, r3, #4
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	891b      	ldrh	r3, [r3, #8]
 8008f4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6959      	ldr	r1, [r3, #20]
 8008f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f6c:	6800      	ldr	r0, [r0, #0]
 8008f6e:	f001 fc41 	bl	800a7f4 <USB_WritePMA>
 8008f72:	f000 be0e 	b.w	8009b92 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d16d      	bne.n	8009062 <USB_EPStartXfer+0x75a>
 8008f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa6:	4413      	add	r3, r2
 8008fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	011a      	lsls	r2, r3, #4
 8008fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fba:	4413      	add	r3, r2
 8008fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d112      	bne.n	8008ff0 <USB_EPStartXfer+0x6e8>
 8008fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd8:	801a      	strh	r2, [r3, #0]
 8008fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	e063      	b.n	80090b8 <USB_EPStartXfer+0x7b0>
 8008ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ff6:	d817      	bhi.n	8009028 <USB_EPStartXfer+0x720>
 8008ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <USB_EPStartXfer+0x710>
 800900e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009012:	3301      	adds	r3, #1
 8009014:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009018:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800901c:	b29b      	uxth	r3, r3
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	b29a      	uxth	r2, r3
 8009022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009024:	801a      	strh	r2, [r3, #0]
 8009026:	e047      	b.n	80090b8 <USB_EPStartXfer+0x7b0>
 8009028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800902c:	095b      	lsrs	r3, r3, #5
 800902e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	2b00      	cmp	r3, #0
 800903c:	d104      	bne.n	8009048 <USB_EPStartXfer+0x740>
 800903e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009042:	3b01      	subs	r3, #1
 8009044:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009048:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800904c:	b29b      	uxth	r3, r3
 800904e:	029b      	lsls	r3, r3, #10
 8009050:	b29b      	uxth	r3, r3
 8009052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905a:	b29a      	uxth	r2, r3
 800905c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	e02a      	b.n	80090b8 <USB_EPStartXfer+0x7b0>
 8009062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d122      	bne.n	80090b8 <USB_EPStartXfer+0x7b0>
 8009072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	653b      	str	r3, [r7, #80]	; 0x50
 800907e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009082:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800908c:	b29b      	uxth	r3, r3
 800908e:	461a      	mov	r2, r3
 8009090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009092:	4413      	add	r3, r2
 8009094:	653b      	str	r3, [r7, #80]	; 0x50
 8009096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	011a      	lsls	r2, r3, #4
 80090a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090a6:	4413      	add	r3, r2
 80090a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	891b      	ldrh	r3, [r3, #8]
 80090c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6959      	ldr	r1, [r3, #20]
 80090d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d8:	b29b      	uxth	r3, r3
 80090da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80090de:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80090e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80090e6:	6800      	ldr	r0, [r0, #0]
 80090e8:	f001 fb84 	bl	800a7f4 <USB_WritePMA>
            ep->xfer_buff += len;
 80090ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695a      	ldr	r2, [r3, #20]
 80090f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090fc:	441a      	add	r2, r3
 80090fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800910a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800910e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6a1a      	ldr	r2, [r3, #32]
 8009116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800911a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	429a      	cmp	r2, r3
 8009124:	d90f      	bls.n	8009146 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8009126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6a1a      	ldr	r2, [r3, #32]
 8009132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009136:	1ad2      	subs	r2, r2, r3
 8009138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	621a      	str	r2, [r3, #32]
 8009144:	e00e      	b.n	8009164 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8009146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2200      	movs	r2, #0
 8009162:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	643b      	str	r3, [r7, #64]	; 0x40
 8009170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	785b      	ldrb	r3, [r3, #1]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d16d      	bne.n	800925c <USB_EPStartXfer+0x954>
 8009180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
 800918c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800919a:	b29b      	uxth	r3, r3
 800919c:	461a      	mov	r2, r3
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	4413      	add	r3, r2
 80091a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	011a      	lsls	r2, r3, #4
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	4413      	add	r3, r2
 80091b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
 80091bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d112      	bne.n	80091ea <USB_EPStartXfer+0x8e2>
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	e05d      	b.n	80092a6 <USB_EPStartXfer+0x99e>
 80091ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ee:	2b3e      	cmp	r3, #62	; 0x3e
 80091f0:	d817      	bhi.n	8009222 <USB_EPStartXfer+0x91a>
 80091f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f6:	085b      	lsrs	r3, r3, #1
 80091f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <USB_EPStartXfer+0x90a>
 8009208:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800920c:	3301      	adds	r3, #1
 800920e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009216:	b29b      	uxth	r3, r3
 8009218:	029b      	lsls	r3, r3, #10
 800921a:	b29a      	uxth	r2, r3
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	e041      	b.n	80092a6 <USB_EPStartXfer+0x99e>
 8009222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800922c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009230:	f003 031f 	and.w	r3, r3, #31
 8009234:	2b00      	cmp	r3, #0
 8009236:	d104      	bne.n	8009242 <USB_EPStartXfer+0x93a>
 8009238:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800923c:	3b01      	subs	r3, #1
 800923e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009246:	b29b      	uxth	r3, r3
 8009248:	029b      	lsls	r3, r3, #10
 800924a:	b29b      	uxth	r3, r3
 800924c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009254:	b29a      	uxth	r2, r3
 8009256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	e024      	b.n	80092a6 <USB_EPStartXfer+0x99e>
 800925c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d11c      	bne.n	80092a6 <USB_EPStartXfer+0x99e>
 800926c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800927a:	b29b      	uxth	r3, r3
 800927c:	461a      	mov	r2, r3
 800927e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009280:	4413      	add	r3, r2
 8009282:	643b      	str	r3, [r7, #64]	; 0x40
 8009284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	011a      	lsls	r2, r3, #4
 8009292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009294:	4413      	add	r3, r2
 8009296:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800929a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800929c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	895b      	ldrh	r3, [r3, #10]
 80092b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6959      	ldr	r1, [r3, #20]
 80092c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80092d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80092d4:	6800      	ldr	r0, [r0, #0]
 80092d6:	f001 fa8d 	bl	800a7f4 <USB_WritePMA>
 80092da:	f000 bc5a 	b.w	8009b92 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80092ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009314:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	441a      	add	r2, r3
 8009332:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800933a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800933e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009346:	b29b      	uxth	r3, r3
 8009348:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800934a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009364:	b29b      	uxth	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800936a:	4413      	add	r3, r2
 800936c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800936e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	011a      	lsls	r2, r3, #4
 800937c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800937e:	4413      	add	r3, r2
 8009380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009384:	65bb      	str	r3, [r7, #88]	; 0x58
 8009386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938a:	b29a      	uxth	r2, r3
 800938c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800938e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6959      	ldr	r1, [r3, #20]
 80093ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093b6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80093ba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	f001 fa18 	bl	800a7f4 <USB_WritePMA>
 80093c4:	e3e5      	b.n	8009b92 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80093c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ec:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80093f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	441a      	add	r2, r3
 800940a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800940e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009416:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800941a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941e:	b29b      	uxth	r3, r3
 8009420:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6a1a      	ldr	r2, [r3, #32]
 800942e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b29b      	uxth	r3, r3
 800945e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 81bc 	beq.w	80097e0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d16d      	bne.n	8009562 <USB_EPStartXfer+0xc5a>
 8009486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	67bb      	str	r3, [r7, #120]	; 0x78
 8009492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009496:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a6:	4413      	add	r3, r2
 80094a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80094aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	011a      	lsls	r2, r3, #4
 80094b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ba:	4413      	add	r3, r2
 80094bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094c0:	677b      	str	r3, [r7, #116]	; 0x74
 80094c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d112      	bne.n	80094f0 <USB_EPStartXfer+0xbe8>
 80094ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ec:	801a      	strh	r2, [r3, #0]
 80094ee:	e060      	b.n	80095b2 <USB_EPStartXfer+0xcaa>
 80094f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f4:	2b3e      	cmp	r3, #62	; 0x3e
 80094f6:	d817      	bhi.n	8009528 <USB_EPStartXfer+0xc20>
 80094f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fc:	085b      	lsrs	r3, r3, #1
 80094fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <USB_EPStartXfer+0xc10>
 800950e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009512:	3301      	adds	r3, #1
 8009514:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009518:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800951c:	b29b      	uxth	r3, r3
 800951e:	029b      	lsls	r3, r3, #10
 8009520:	b29a      	uxth	r2, r3
 8009522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009524:	801a      	strh	r2, [r3, #0]
 8009526:	e044      	b.n	80095b2 <USB_EPStartXfer+0xcaa>
 8009528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952c:	095b      	lsrs	r3, r3, #5
 800952e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009536:	f003 031f 	and.w	r3, r3, #31
 800953a:	2b00      	cmp	r3, #0
 800953c:	d104      	bne.n	8009548 <USB_EPStartXfer+0xc40>
 800953e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009542:	3b01      	subs	r3, #1
 8009544:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009548:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800954c:	b29b      	uxth	r3, r3
 800954e:	029b      	lsls	r3, r3, #10
 8009550:	b29b      	uxth	r3, r3
 8009552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800955a:	b29a      	uxth	r2, r3
 800955c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e027      	b.n	80095b2 <USB_EPStartXfer+0xcaa>
 8009562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d11f      	bne.n	80095b2 <USB_EPStartXfer+0xcaa>
 8009572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009580:	b29b      	uxth	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009588:	4413      	add	r3, r2
 800958a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	011a      	lsls	r2, r3, #4
 800959c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095a0:	4413      	add	r3, r2
 80095a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80095b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	895b      	ldrh	r3, [r3, #10]
 80095be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6959      	ldr	r1, [r3, #20]
 80095ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80095d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80095dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80095e0:	6800      	ldr	r0, [r0, #0]
 80095e2:	f001 f907 	bl	800a7f4 <USB_WritePMA>
          ep->xfer_buff += len;
 80095e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695a      	ldr	r2, [r3, #20]
 80095f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f6:	441a      	add	r2, r3
 80095f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	429a      	cmp	r2, r3
 800961e:	d90f      	bls.n	8009640 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009630:	1ad2      	subs	r2, r2, r3
 8009632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	621a      	str	r2, [r3, #32]
 800963e:	e00e      	b.n	800965e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2200      	movs	r2, #0
 800965c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800965e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 8295 	beq.w	8009b92 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	785b      	ldrb	r3, [r3, #1]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d16d      	bne.n	8009754 <USB_EPStartXfer+0xe4c>
 8009678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800967c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	66bb      	str	r3, [r7, #104]	; 0x68
 8009684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009692:	b29b      	uxth	r3, r3
 8009694:	461a      	mov	r2, r3
 8009696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009698:	4413      	add	r3, r2
 800969a:	66bb      	str	r3, [r7, #104]	; 0x68
 800969c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	011a      	lsls	r2, r3, #4
 80096aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ac:	4413      	add	r3, r2
 80096ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096b2:	667b      	str	r3, [r7, #100]	; 0x64
 80096b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d112      	bne.n	80096e2 <USB_EPStartXfer+0xdda>
 80096bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ca:	801a      	strh	r2, [r3, #0]
 80096cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096da:	b29a      	uxth	r2, r3
 80096dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	e063      	b.n	80097aa <USB_EPStartXfer+0xea2>
 80096e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e6:	2b3e      	cmp	r3, #62	; 0x3e
 80096e8:	d817      	bhi.n	800971a <USB_EPStartXfer+0xe12>
 80096ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ee:	085b      	lsrs	r3, r3, #1
 80096f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d004      	beq.n	800970a <USB_EPStartXfer+0xe02>
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009704:	3301      	adds	r3, #1
 8009706:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800970a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970e:	b29b      	uxth	r3, r3
 8009710:	029b      	lsls	r3, r3, #10
 8009712:	b29a      	uxth	r2, r3
 8009714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009716:	801a      	strh	r2, [r3, #0]
 8009718:	e047      	b.n	80097aa <USB_EPStartXfer+0xea2>
 800971a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971e:	095b      	lsrs	r3, r3, #5
 8009720:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009728:	f003 031f 	and.w	r3, r3, #31
 800972c:	2b00      	cmp	r3, #0
 800972e:	d104      	bne.n	800973a <USB_EPStartXfer+0xe32>
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009734:	3b01      	subs	r3, #1
 8009736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973e:	b29b      	uxth	r3, r3
 8009740:	029b      	lsls	r3, r3, #10
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974c:	b29a      	uxth	r2, r3
 800974e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009750:	801a      	strh	r2, [r3, #0]
 8009752:	e02a      	b.n	80097aa <USB_EPStartXfer+0xea2>
 8009754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d122      	bne.n	80097aa <USB_EPStartXfer+0xea2>
 8009764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	673b      	str	r3, [r7, #112]	; 0x70
 8009770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009774:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800977e:	b29b      	uxth	r3, r3
 8009780:	461a      	mov	r2, r3
 8009782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009784:	4413      	add	r3, r2
 8009786:	673b      	str	r3, [r7, #112]	; 0x70
 8009788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	011a      	lsls	r2, r3, #4
 8009796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009798:	4413      	add	r3, r2
 800979a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800979e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	891b      	ldrh	r3, [r3, #8]
 80097b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6959      	ldr	r1, [r3, #20]
 80097c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80097d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80097d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80097d8:	6800      	ldr	r0, [r0, #0]
 80097da:	f001 f80b 	bl	800a7f4 <USB_WritePMA>
 80097de:	e1d8      	b.n	8009b92 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d178      	bne.n	80098e2 <USB_EPStartXfer+0xfda>
 80097f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980c:	b29b      	uxth	r3, r3
 800980e:	461a      	mov	r2, r3
 8009810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009814:	4413      	add	r3, r2
 8009816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800981a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	011a      	lsls	r2, r3, #4
 8009828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800982c:	4413      	add	r3, r2
 800982e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d116      	bne.n	800986c <USB_EPStartXfer+0xf64>
 800983e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	b29b      	uxth	r3, r3
 8009846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800984a:	b29a      	uxth	r2, r3
 800984c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	b29b      	uxth	r3, r3
 800985a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800985e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009862:	b29a      	uxth	r2, r3
 8009864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009868:	801a      	strh	r2, [r3, #0]
 800986a:	e06b      	b.n	8009944 <USB_EPStartXfer+0x103c>
 800986c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009870:	2b3e      	cmp	r3, #62	; 0x3e
 8009872:	d818      	bhi.n	80098a6 <USB_EPStartXfer+0xf9e>
 8009874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800987e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <USB_EPStartXfer+0xf8c>
 800988a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009894:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009898:	b29b      	uxth	r3, r3
 800989a:	029b      	lsls	r3, r3, #10
 800989c:	b29a      	uxth	r2, r3
 800989e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098a2:	801a      	strh	r2, [r3, #0]
 80098a4:	e04e      	b.n	8009944 <USB_EPStartXfer+0x103c>
 80098a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b4:	f003 031f 	and.w	r3, r3, #31
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <USB_EPStartXfer+0xfbe>
 80098bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098c0:	3b01      	subs	r3, #1
 80098c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	029b      	lsls	r3, r3, #10
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d8:	b29a      	uxth	r2, r3
 80098da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	e030      	b.n	8009944 <USB_EPStartXfer+0x103c>
 80098e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d128      	bne.n	8009944 <USB_EPStartXfer+0x103c>
 80098f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990e:	b29b      	uxth	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009916:	4413      	add	r3, r2
 8009918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800991c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	011a      	lsls	r2, r3, #4
 800992a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800992e:	4413      	add	r3, r2
 8009930:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993c:	b29a      	uxth	r2, r3
 800993e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009942:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	891b      	ldrh	r3, [r3, #8]
 8009950:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6959      	ldr	r1, [r3, #20]
 8009960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009964:	b29b      	uxth	r3, r3
 8009966:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800996a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800996e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009972:	6800      	ldr	r0, [r0, #0]
 8009974:	f000 ff3e 	bl	800a7f4 <USB_WritePMA>
          ep->xfer_buff += len;
 8009978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	695a      	ldr	r2, [r3, #20]
 8009984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009988:	441a      	add	r2, r3
 800998a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800998e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6a1a      	ldr	r2, [r3, #32]
 80099a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d90f      	bls.n	80099d2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80099b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a1a      	ldr	r2, [r3, #32]
 80099be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c2:	1ad2      	subs	r2, r2, r3
 80099c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	621a      	str	r2, [r3, #32]
 80099d0:	e00e      	b.n	80099f0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80099d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80099e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2200      	movs	r2, #0
 80099ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80099f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 80cc 	beq.w	8009b92 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d178      	bne.n	8009b0a <USB_EPStartXfer+0x1202>
 8009a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	461a      	mov	r2, r3
 8009a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	011a      	lsls	r2, r3, #4
 8009a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a54:	4413      	add	r3, r2
 8009a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d116      	bne.n	8009a94 <USB_EPStartXfer+0x118c>
 8009a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a90:	801a      	strh	r2, [r3, #0]
 8009a92:	e064      	b.n	8009b5e <USB_EPStartXfer+0x1256>
 8009a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a98:	2b3e      	cmp	r3, #62	; 0x3e
 8009a9a:	d818      	bhi.n	8009ace <USB_EPStartXfer+0x11c6>
 8009a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa0:	085b      	lsrs	r3, r3, #1
 8009aa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d004      	beq.n	8009abc <USB_EPStartXfer+0x11b4>
 8009ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	029b      	lsls	r3, r3, #10
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aca:	801a      	strh	r2, [r3, #0]
 8009acc:	e047      	b.n	8009b5e <USB_EPStartXfer+0x1256>
 8009ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009adc:	f003 031f 	and.w	r3, r3, #31
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <USB_EPStartXfer+0x11e6>
 8009ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	029b      	lsls	r3, r3, #10
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b06:	801a      	strh	r2, [r3, #0]
 8009b08:	e029      	b.n	8009b5e <USB_EPStartXfer+0x1256>
 8009b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d121      	bne.n	8009b5e <USB_EPStartXfer+0x1256>
 8009b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b30:	4413      	add	r3, r2
 8009b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	011a      	lsls	r2, r3, #4
 8009b44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b48:	4413      	add	r3, r2
 8009b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	895b      	ldrh	r3, [r3, #10]
 8009b6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6959      	ldr	r1, [r3, #20]
 8009b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f000 fe31 	bl	800a7f4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bb4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc0:	8013      	strh	r3, [r2, #0]
 8009bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009bca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009bd2:	8812      	ldrh	r2, [r2, #0]
 8009bd4:	f082 0210 	eor.w	r2, r2, #16
 8009bd8:	801a      	strh	r2, [r3, #0]
 8009bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bde:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009be2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009be6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009bea:	8812      	ldrh	r2, [r2, #0]
 8009bec:	f082 0220 	eor.w	r2, r2, #32
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	441a      	add	r2, r3
 8009c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c10:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	8013      	strh	r3, [r2, #0]
 8009c2a:	f000 bc9f 	b.w	800a56c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	7b1b      	ldrb	r3, [r3, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 80ae 	bne.w	8009d9c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	699a      	ldr	r2, [r3, #24]
 8009c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d917      	bls.n	8009c8c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699a      	ldr	r2, [r3, #24]
 8009c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c7c:	1ad2      	subs	r2, r2, r3
 8009c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	619a      	str	r2, [r3, #24]
 8009c8a:	e00e      	b.n	8009caa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	461a      	mov	r2, r3
 8009cca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009cce:	4413      	add	r3, r2
 8009cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	011a      	lsls	r2, r3, #4
 8009ce2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d116      	bne.n	8009d26 <USB_EPStartXfer+0x141e>
 8009cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d0a:	801a      	strh	r2, [r3, #0]
 8009d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e3e8      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
 8009d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8009d2c:	d818      	bhi.n	8009d60 <USB_EPStartXfer+0x1458>
 8009d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d32:	085b      	lsrs	r3, r3, #1
 8009d34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d004      	beq.n	8009d4e <USB_EPStartXfer+0x1446>
 8009d44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d48:	3301      	adds	r3, #1
 8009d4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	029b      	lsls	r3, r3, #10
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	e3cb      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
 8009d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d64:	095b      	lsrs	r3, r3, #5
 8009d66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d6e:	f003 031f 	and.w	r3, r3, #31
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d104      	bne.n	8009d80 <USB_EPStartXfer+0x1478>
 8009d76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	029b      	lsls	r3, r3, #10
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	e3ad      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	78db      	ldrb	r3, [r3, #3]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	f040 8200 	bne.w	800a1ae <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f040 8091 	bne.w	8009ee2 <USB_EPStartXfer+0x15da>
 8009dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	461a      	mov	r2, r3
 8009de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009de4:	4413      	add	r3, r2
 8009de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	011a      	lsls	r2, r3, #4
 8009df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d116      	bne.n	8009e44 <USB_EPStartXfer+0x153c>
 8009e16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e28:	801a      	strh	r2, [r3, #0]
 8009e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e40:	801a      	strh	r2, [r3, #0]
 8009e42:	e083      	b.n	8009f4c <USB_EPStartXfer+0x1644>
 8009e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b3e      	cmp	r3, #62	; 0x3e
 8009e52:	d820      	bhi.n	8009e96 <USB_EPStartXfer+0x158e>
 8009e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	085b      	lsrs	r3, r3, #1
 8009e62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <USB_EPStartXfer+0x157c>
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	029b      	lsls	r3, r3, #10
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e92:	801a      	strh	r2, [r3, #0]
 8009e94:	e05a      	b.n	8009f4c <USB_EPStartXfer+0x1644>
 8009e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	f003 031f 	and.w	r3, r3, #31
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <USB_EPStartXfer+0x15be>
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	029b      	lsls	r3, r3, #10
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	e034      	b.n	8009f4c <USB_EPStartXfer+0x1644>
 8009ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d12c      	bne.n	8009f4c <USB_EPStartXfer+0x1644>
 8009ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	461a      	mov	r2, r3
 8009f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f16:	4413      	add	r3, r2
 8009f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	011a      	lsls	r2, r3, #4
 8009f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f2e:	4413      	add	r3, r2
 8009f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009f4a:	801a      	strh	r2, [r3, #0]
 8009f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f040 8091 	bne.w	800a08e <USB_EPStartXfer+0x1786>
 8009f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f90:	4413      	add	r3, r2
 8009f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	011a      	lsls	r2, r3, #4
 8009fa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fa8:	4413      	add	r3, r2
 8009faa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d116      	bne.n	8009ff0 <USB_EPStartXfer+0x16e8>
 8009fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fd4:	801a      	strh	r2, [r3, #0]
 8009fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fec:	801a      	strh	r2, [r3, #0]
 8009fee:	e07c      	b.n	800a0ea <USB_EPStartXfer+0x17e2>
 8009ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8009ffe:	d820      	bhi.n	800a042 <USB_EPStartXfer+0x173a>
 800a000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	085b      	lsrs	r3, r3, #1
 800a00e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d004      	beq.n	800a030 <USB_EPStartXfer+0x1728>
 800a026:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a02a:	3301      	adds	r3, #1
 800a02c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a030:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a034:	b29b      	uxth	r3, r3
 800a036:	029b      	lsls	r3, r3, #10
 800a038:	b29a      	uxth	r2, r3
 800a03a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a03e:	801a      	strh	r2, [r3, #0]
 800a040:	e053      	b.n	800a0ea <USB_EPStartXfer+0x17e2>
 800a042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	095b      	lsrs	r3, r3, #5
 800a050:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	2b00      	cmp	r3, #0
 800a066:	d104      	bne.n	800a072 <USB_EPStartXfer+0x176a>
 800a068:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a06c:	3b01      	subs	r3, #1
 800a06e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a072:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a076:	b29b      	uxth	r3, r3
 800a078:	029b      	lsls	r3, r3, #10
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a084:	b29a      	uxth	r2, r3
 800a086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a08a:	801a      	strh	r2, [r3, #0]
 800a08c:	e02d      	b.n	800a0ea <USB_EPStartXfer+0x17e2>
 800a08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d125      	bne.n	800a0ea <USB_EPStartXfer+0x17e2>
 800a09e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	011a      	lsls	r2, r3, #4
 800a0c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a0e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a0ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 81fe 	beq.w	800a4f8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a0fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a10a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a11c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d005      	beq.n	800a134 <USB_EPStartXfer+0x182c>
 800a128:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10d      	bne.n	800a150 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a134:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 81db 	bne.w	800a4f8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a142:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 81d4 	bne.w	800a4f8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a176:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a17a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	441a      	add	r2, r3
 800a194:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a19c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	8013      	strh	r3, [r2, #0]
 800a1ac:	e1a4      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	78db      	ldrb	r3, [r3, #3]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	f040 819a 	bne.w	800a4f4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a1c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699a      	ldr	r2, [r3, #24]
 800a1cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d917      	bls.n	800a20c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a1dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a1ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	699a      	ldr	r2, [r3, #24]
 800a1f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1fc:	1ad2      	subs	r2, r2, r3
 800a1fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	619a      	str	r2, [r3, #24]
 800a20a:	e00e      	b.n	800a22a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a20c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a21c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2200      	movs	r2, #0
 800a228:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a22a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a22e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d178      	bne.n	800a32c <USB_EPStartXfer+0x1a24>
 800a23a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a23e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a24c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a256:	b29b      	uxth	r3, r3
 800a258:	461a      	mov	r2, r3
 800a25a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a25e:	4413      	add	r3, r2
 800a260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	011a      	lsls	r2, r3, #4
 800a272:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a276:	4413      	add	r3, r2
 800a278:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a27c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d116      	bne.n	800a2b6 <USB_EPStartXfer+0x19ae>
 800a288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a294:	b29a      	uxth	r2, r3
 800a296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a29a:	801a      	strh	r2, [r3, #0]
 800a29c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2b2:	801a      	strh	r2, [r3, #0]
 800a2b4:	e06b      	b.n	800a38e <USB_EPStartXfer+0x1a86>
 800a2b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a2bc:	d818      	bhi.n	800a2f0 <USB_EPStartXfer+0x19e8>
 800a2be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d004      	beq.n	800a2de <USB_EPStartXfer+0x19d6>
 800a2d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	029b      	lsls	r3, r3, #10
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2ec:	801a      	strh	r2, [r3, #0]
 800a2ee:	e04e      	b.n	800a38e <USB_EPStartXfer+0x1a86>
 800a2f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f4:	095b      	lsrs	r3, r3, #5
 800a2f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2fe:	f003 031f 	and.w	r3, r3, #31
 800a302:	2b00      	cmp	r3, #0
 800a304:	d104      	bne.n	800a310 <USB_EPStartXfer+0x1a08>
 800a306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a30a:	3b01      	subs	r3, #1
 800a30c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a314:	b29b      	uxth	r3, r3
 800a316:	029b      	lsls	r3, r3, #10
 800a318:	b29b      	uxth	r3, r3
 800a31a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a31e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a322:	b29a      	uxth	r2, r3
 800a324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a328:	801a      	strh	r2, [r3, #0]
 800a32a:	e030      	b.n	800a38e <USB_EPStartXfer+0x1a86>
 800a32c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d128      	bne.n	800a38e <USB_EPStartXfer+0x1a86>
 800a33c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a34a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a358:	b29b      	uxth	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a360:	4413      	add	r3, r2
 800a362:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	011a      	lsls	r2, r3, #4
 800a374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a378:	4413      	add	r3, r2
 800a37a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a37e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a386:	b29a      	uxth	r2, r3
 800a388:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a38c:	801a      	strh	r2, [r3, #0]
 800a38e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a392:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a39c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d178      	bne.n	800a49e <USB_EPStartXfer+0x1b96>
 800a3ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	011a      	lsls	r2, r3, #4
 800a3e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d116      	bne.n	800a428 <USB_EPStartXfer+0x1b20>
 800a3fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	b29b      	uxth	r3, r3
 800a402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a406:	b29a      	uxth	r2, r3
 800a408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a40c:	801a      	strh	r2, [r3, #0]
 800a40e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a41a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a41e:	b29a      	uxth	r2, r3
 800a420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a424:	801a      	strh	r2, [r3, #0]
 800a426:	e067      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
 800a428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a42c:	2b3e      	cmp	r3, #62	; 0x3e
 800a42e:	d818      	bhi.n	800a462 <USB_EPStartXfer+0x1b5a>
 800a430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a434:	085b      	lsrs	r3, r3, #1
 800a436:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a43a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d004      	beq.n	800a450 <USB_EPStartXfer+0x1b48>
 800a446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a44a:	3301      	adds	r3, #1
 800a44c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a454:	b29b      	uxth	r3, r3
 800a456:	029b      	lsls	r3, r3, #10
 800a458:	b29a      	uxth	r2, r3
 800a45a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	e04a      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
 800a462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a466:	095b      	lsrs	r3, r3, #5
 800a468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a46c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a470:	f003 031f 	and.w	r3, r3, #31
 800a474:	2b00      	cmp	r3, #0
 800a476:	d104      	bne.n	800a482 <USB_EPStartXfer+0x1b7a>
 800a478:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a47c:	3b01      	subs	r3, #1
 800a47e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a486:	b29b      	uxth	r3, r3
 800a488:	029b      	lsls	r3, r3, #10
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a494:	b29a      	uxth	r2, r3
 800a496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a49a:	801a      	strh	r2, [r3, #0]
 800a49c:	e02c      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
 800a49e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d124      	bne.n	800a4f8 <USB_EPStartXfer+0x1bf0>
 800a4ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	011a      	lsls	r2, r3, #4
 800a4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4dc:	4413      	add	r3, r2
 800a4de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f0:	801a      	strh	r2, [r3, #0]
 800a4f2:	e001      	b.n	800a4f8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e03a      	b.n	800a56e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a522:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a526:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a52a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a52e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a536:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a53a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	441a      	add	r2, r3
 800a554:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	b29b      	uxth	r3, r3
 800a56a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	785b      	ldrb	r3, [r3, #1]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d020      	beq.n	800a5cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a59c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5a0:	81bb      	strh	r3, [r7, #12]
 800a5a2:	89bb      	ldrh	r3, [r7, #12]
 800a5a4:	f083 0310 	eor.w	r3, r3, #16
 800a5a8:	81bb      	strh	r3, [r7, #12]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	441a      	add	r2, r3
 800a5b4:	89bb      	ldrh	r3, [r7, #12]
 800a5b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	8013      	strh	r3, [r2, #0]
 800a5ca:	e01f      	b.n	800a60c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e2:	81fb      	strh	r3, [r7, #14]
 800a5e4:	89fb      	ldrh	r3, [r7, #14]
 800a5e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5ea:	81fb      	strh	r3, [r7, #14]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	441a      	add	r2, r3
 800a5f6:	89fb      	ldrh	r3, [r7, #14]
 800a5f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a608:	b29b      	uxth	r3, r3
 800a60a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr

0800a618 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	7b1b      	ldrb	r3, [r3, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f040 809d 	bne.w	800a766 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d04c      	beq.n	800a6ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	823b      	strh	r3, [r7, #16]
 800a642:	8a3b      	ldrh	r3, [r7, #16]
 800a644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01b      	beq.n	800a684 <USB_EPClearStall+0x6c>
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a662:	81fb      	strh	r3, [r7, #14]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	441a      	add	r2, r3
 800a66e:	89fb      	ldrh	r3, [r7, #14]
 800a670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a67c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a680:	b29b      	uxth	r3, r3
 800a682:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	78db      	ldrb	r3, [r3, #3]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d06c      	beq.n	800a766 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6a2:	81bb      	strh	r3, [r7, #12]
 800a6a4:	89bb      	ldrh	r3, [r7, #12]
 800a6a6:	f083 0320 	eor.w	r3, r3, #32
 800a6aa:	81bb      	strh	r3, [r7, #12]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	441a      	add	r2, r3
 800a6b6:	89bb      	ldrh	r3, [r7, #12]
 800a6b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	8013      	strh	r3, [r2, #0]
 800a6cc:	e04b      	b.n	800a766 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	82fb      	strh	r3, [r7, #22]
 800a6dc:	8afb      	ldrh	r3, [r7, #22]
 800a6de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d01b      	beq.n	800a71e <USB_EPClearStall+0x106>
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6fc:	82bb      	strh	r3, [r7, #20]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	441a      	add	r2, r3
 800a708:	8abb      	ldrh	r3, [r7, #20]
 800a70a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a70e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a734:	827b      	strh	r3, [r7, #18]
 800a736:	8a7b      	ldrh	r3, [r7, #18]
 800a738:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a73c:	827b      	strh	r3, [r7, #18]
 800a73e:	8a7b      	ldrh	r3, [r7, #18]
 800a740:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a744:	827b      	strh	r3, [r7, #18]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	441a      	add	r2, r3
 800a750:	8a7b      	ldrh	r3, [r7, #18]
 800a752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a75a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a762:	b29b      	uxth	r3, r3
 800a764:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bc80      	pop	{r7}
 800a770:	4770      	bx	lr

0800a772 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2280      	movs	r2, #128	; 0x80
 800a788:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr

0800a798 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bc80      	pop	{r7}
 800a7aa:	4770      	bx	lr

0800a7ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bc80      	pop	{r7}
 800a7be:	4770      	bx	lr

0800a7c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bc80      	pop	{r7}
 800a7dc:	4770      	bx	lr

0800a7de <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr

0800a7f4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b08d      	sub	sp, #52	; 0x34
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4611      	mov	r1, r2
 800a800:	461a      	mov	r2, r3
 800a802:	460b      	mov	r3, r1
 800a804:	80fb      	strh	r3, [r7, #6]
 800a806:	4613      	mov	r3, r2
 800a808:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a80a:	88bb      	ldrh	r3, [r7, #4]
 800a80c:	3301      	adds	r3, #1
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a81a:	88fb      	ldrh	r3, [r7, #6]
 800a81c:	005a      	lsls	r2, r3, #1
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a82c:	e01e      	b.n	800a86c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	3301      	adds	r3, #1
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	021b      	lsls	r3, r3, #8
 800a842:	b29b      	uxth	r3, r3
 800a844:	461a      	mov	r2, r3
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	b29a      	uxth	r2, r3
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	3302      	adds	r3, #2
 800a858:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	3302      	adds	r3, #2
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	3301      	adds	r3, #1
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a868:	3b01      	subs	r3, #1
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1dd      	bne.n	800a82e <USB_WritePMA+0x3a>
  }
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	3734      	adds	r7, #52	; 0x34
 800a878:	46bd      	mov	sp, r7
 800a87a:	bc80      	pop	{r7}
 800a87c:	4770      	bx	lr

0800a87e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a87e:	b480      	push	{r7}
 800a880:	b08b      	sub	sp, #44	; 0x2c
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	60b9      	str	r1, [r7, #8]
 800a888:	4611      	mov	r1, r2
 800a88a:	461a      	mov	r2, r3
 800a88c:	460b      	mov	r3, r1
 800a88e:	80fb      	strh	r3, [r7, #6]
 800a890:	4613      	mov	r3, r2
 800a892:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a894:	88bb      	ldrh	r3, [r7, #4]
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	b29b      	uxth	r3, r3
 800a89a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8a4:	88fb      	ldrh	r3, [r7, #6]
 800a8a6:	005a      	lsls	r2, r3, #1
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8b0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8b6:	e01b      	b.n	800a8f0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	3302      	adds	r3, #2
 800a8c4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	0a1b      	lsrs	r3, r3, #8
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	3302      	adds	r3, #2
 800a8e8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e0      	bne.n	800a8b8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a8f6:	88bb      	ldrh	r3, [r7, #4]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d007      	beq.n	800a912 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	b29b      	uxth	r3, r3
 800a908:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	701a      	strb	r2, [r3, #0]
  }
}
 800a912:	bf00      	nop
 800a914:	372c      	adds	r7, #44	; 0x2c
 800a916:	46bd      	mov	sp, r7
 800a918:	bc80      	pop	{r7}
 800a91a:	4770      	bx	lr

0800a91c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800a920:	f001 f926 	bl	800bb70 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800a924:	2200      	movs	r2, #0
 800a926:	4912      	ldr	r1, [pc, #72]	; (800a970 <MX_USB_DEVICE_Init+0x54>)
 800a928:	4812      	ldr	r0, [pc, #72]	; (800a974 <MX_USB_DEVICE_Init+0x58>)
 800a92a:	f001 fc59 	bl	800c1e0 <USBD_Init>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800a934:	f7f7 f906 	bl	8001b44 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800a938:	490f      	ldr	r1, [pc, #60]	; (800a978 <MX_USB_DEVICE_Init+0x5c>)
 800a93a:	480e      	ldr	r0, [pc, #56]	; (800a974 <MX_USB_DEVICE_Init+0x58>)
 800a93c:	f001 fc7c 	bl	800c238 <USBD_RegisterClass>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800a946:	f7f7 f8fd 	bl	8001b44 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800a94a:	490c      	ldr	r1, [pc, #48]	; (800a97c <MX_USB_DEVICE_Init+0x60>)
 800a94c:	4809      	ldr	r0, [pc, #36]	; (800a974 <MX_USB_DEVICE_Init+0x58>)
 800a94e:	f000 fe0b 	bl	800b568 <USBD_CDC_ACM_RegisterInterface>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a958:	f7f7 f8f4 	bl	8001b44 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800a95c:	4805      	ldr	r0, [pc, #20]	; (800a974 <MX_USB_DEVICE_Init+0x58>)
 800a95e:	f001 fca9 	bl	800c2b4 <USBD_Start>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a968:	f7f7 f8ec 	bl	8001b44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a96c:	bf00      	nop
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20000244 	.word	0x20000244
 800a974:	20000a1c 	.word	0x20000a1c
 800a978:	20000374 	.word	0x20000374
 800a97c:	20000230 	.word	0x20000230

0800a980 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	01db      	lsls	r3, r3, #7
 800a98e:	4a06      	ldr	r2, [pc, #24]	; (800a9a8 <CDC_Init+0x28>)
 800a990:	441a      	add	r2, r3
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	4905      	ldr	r1, [pc, #20]	; (800a9ac <CDC_Init+0x2c>)
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fe1c 	bl	800b5d4 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 800a99c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000d38 	.word	0x20000d38
 800a9ac:	20000a1c 	.word	0x20000a1c

0800a9b0 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800a9ba:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bc80      	pop	{r7}
 800a9c4:	4770      	bx	lr
	...

0800a9c8 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	603a      	str	r2, [r7, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	71fb      	strb	r3, [r7, #7]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	71bb      	strb	r3, [r7, #6]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800a9de:	79bb      	ldrb	r3, [r7, #6]
 800a9e0:	2b23      	cmp	r3, #35	; 0x23
 800a9e2:	f200 80b6 	bhi.w	800ab52 <CDC_Control+0x18a>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <CDC_Control+0x24>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800ab53 	.word	0x0800ab53
 800a9f0:	0800ab53 	.word	0x0800ab53
 800a9f4:	0800ab53 	.word	0x0800ab53
 800a9f8:	0800ab53 	.word	0x0800ab53
 800a9fc:	0800ab53 	.word	0x0800ab53
 800aa00:	0800ab53 	.word	0x0800ab53
 800aa04:	0800ab53 	.word	0x0800ab53
 800aa08:	0800ab53 	.word	0x0800ab53
 800aa0c:	0800ab53 	.word	0x0800ab53
 800aa10:	0800ab53 	.word	0x0800ab53
 800aa14:	0800ab53 	.word	0x0800ab53
 800aa18:	0800ab53 	.word	0x0800ab53
 800aa1c:	0800ab53 	.word	0x0800ab53
 800aa20:	0800ab53 	.word	0x0800ab53
 800aa24:	0800ab53 	.word	0x0800ab53
 800aa28:	0800ab53 	.word	0x0800ab53
 800aa2c:	0800ab53 	.word	0x0800ab53
 800aa30:	0800ab53 	.word	0x0800ab53
 800aa34:	0800ab53 	.word	0x0800ab53
 800aa38:	0800ab53 	.word	0x0800ab53
 800aa3c:	0800ab53 	.word	0x0800ab53
 800aa40:	0800ab53 	.word	0x0800ab53
 800aa44:	0800ab53 	.word	0x0800ab53
 800aa48:	0800ab53 	.word	0x0800ab53
 800aa4c:	0800ab53 	.word	0x0800ab53
 800aa50:	0800ab53 	.word	0x0800ab53
 800aa54:	0800ab53 	.word	0x0800ab53
 800aa58:	0800ab53 	.word	0x0800ab53
 800aa5c:	0800ab53 	.word	0x0800ab53
 800aa60:	0800ab53 	.word	0x0800ab53
 800aa64:	0800ab53 	.word	0x0800ab53
 800aa68:	0800ab53 	.word	0x0800ab53
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800ab53 	.word	0x0800ab53
 800aa78:	0800ab53 	.word	0x0800ab53
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	461a      	mov	r2, r3
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	3302      	adds	r3, #2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800aa94:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	3303      	adds	r3, #3
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	061b      	lsls	r3, r3, #24
 800aa9e:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800aaa0:	79fb      	ldrb	r3, [r7, #7]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4a2e      	ldr	r2, [pc, #184]	; (800ab60 <CDC_Control+0x198>)
 800aaa6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	7911      	ldrb	r1, [r2, #4]
 800aab0:	4a2b      	ldr	r2, [pc, #172]	; (800ab60 <CDC_Control+0x198>)
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	4413      	add	r3, r2
 800aab6:	460a      	mov	r2, r1
 800aab8:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	7951      	ldrb	r1, [r2, #5]
 800aac0:	4a27      	ldr	r2, [pc, #156]	; (800ab60 <CDC_Control+0x198>)
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	4413      	add	r3, r2
 800aac6:	460a      	mov	r2, r1
 800aac8:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	7991      	ldrb	r1, [r2, #6]
 800aad0:	4a23      	ldr	r2, [pc, #140]	; (800ab60 <CDC_Control+0x198>)
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	4413      	add	r3, r2
 800aad6:	460a      	mov	r2, r1
 800aad8:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800aada:	e03b      	b.n	800ab54 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	4a20      	ldr	r2, [pc, #128]	; (800ab60 <CDC_Control+0x198>)
 800aae0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	4a1c      	ldr	r2, [pc, #112]	; (800ab60 <CDC_Control+0x198>)
 800aaee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aaf2:	0a1a      	lsrs	r2, r3, #8
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	4a18      	ldr	r2, [pc, #96]	; (800ab60 <CDC_Control+0x198>)
 800ab00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab04:	0c1a      	lsrs	r2, r3, #16
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	3302      	adds	r3, #2
 800ab0a:	b2d2      	uxtb	r2, r2
 800ab0c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	4a13      	ldr	r2, [pc, #76]	; (800ab60 <CDC_Control+0x198>)
 800ab12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab16:	0e1a      	lsrs	r2, r3, #24
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	3303      	adds	r3, #3
 800ab1c:	b2d2      	uxtb	r2, r2
 800ab1e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	3204      	adds	r2, #4
 800ab26:	490e      	ldr	r1, [pc, #56]	; (800ab60 <CDC_Control+0x198>)
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	440b      	add	r3, r1
 800ab2c:	791b      	ldrb	r3, [r3, #4]
 800ab2e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	3205      	adds	r2, #5
 800ab36:	490a      	ldr	r1, [pc, #40]	; (800ab60 <CDC_Control+0x198>)
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	440b      	add	r3, r1
 800ab3c:	795b      	ldrb	r3, [r3, #5]
 800ab3e:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	3206      	adds	r2, #6
 800ab46:	4906      	ldr	r1, [pc, #24]	; (800ab60 <CDC_Control+0x198>)
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	440b      	add	r3, r1
 800ab4c:	799b      	ldrb	r3, [r3, #6]
 800ab4e:	7013      	strb	r3, [r2, #0]
    break;
 800ab50:	e000      	b.n	800ab54 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab52:	bf00      	nop
  }

  return (USBD_OK);
 800ab54:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bc80      	pop	{r7}
 800ab5e:	4770      	bx	lr
 800ab60:	20000db8 	.word	0x20000db8

0800ab64 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	68b9      	ldr	r1, [r7, #8]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 f823 	bl	800abc8 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	4907      	ldr	r1, [pc, #28]	; (800aba4 <CDC_Receive+0x40>)
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fd23 	bl	800b5d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	4904      	ldr	r1, [pc, #16]	; (800aba4 <CDC_Receive+0x40>)
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fd7e 	bl	800b694 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000a1c 	.word	0x20000a1c

0800aba8 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
 800abb2:	461a      	mov	r2, r3
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	4613      	mov	r3, r2
 800abba:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr

0800abc8 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	6039      	str	r1, [r7, #0]
 800abd2:	71fb      	strb	r3, [r7, #7]
 800abd4:	4613      	mov	r3, r2
 800abd6:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
 800abea:	4a0e      	ldr	r2, [pc, #56]	; (800ac24 <CDC_Transmit+0x5c>)
 800abec:	4413      	add	r3, r2
 800abee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e00d      	b.n	800ac1a <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800abfe:	88bb      	ldrh	r3, [r7, #4]
 800ac00:	79f8      	ldrb	r0, [r7, #7]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	4908      	ldr	r1, [pc, #32]	; (800ac28 <CDC_Transmit+0x60>)
 800ac06:	f000 fcc3 	bl	800b590 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800ac0a:	79fb      	ldrb	r3, [r7, #7]
 800ac0c:	4906      	ldr	r1, [pc, #24]	; (800ac28 <CDC_Transmit+0x60>)
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fcfe 	bl	800b610 <USBD_CDC_TransmitPacket>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000fd8 	.word	0x20000fd8
 800ac28:	20000a1c 	.word	0x20000a1c

0800ac2c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	6039      	str	r1, [r7, #0]
 800ac36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2212      	movs	r2, #18
 800ac3c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800ac3e:	4b03      	ldr	r3, [pc, #12]	; (800ac4c <USBD_DeviceDescriptor+0x20>)
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	20000260 	.word	0x20000260

0800ac50 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	6039      	str	r1, [r7, #0]
 800ac5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2204      	movs	r2, #4
 800ac60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac62:	4b03      	ldr	r3, [pc, #12]	; (800ac70 <USBD_LangIDStrDescriptor+0x20>)
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bc80      	pop	{r7}
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20000274 	.word	0x20000274

0800ac74 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	6039      	str	r1, [r7, #0]
 800ac7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d105      	bne.n	800ac92 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	4907      	ldr	r1, [pc, #28]	; (800aca8 <USBD_ProductStrDescriptor+0x34>)
 800ac8a:	4808      	ldr	r0, [pc, #32]	; (800acac <USBD_ProductStrDescriptor+0x38>)
 800ac8c:	f002 fad9 	bl	800d242 <USBD_GetString>
 800ac90:	e004      	b.n	800ac9c <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	4904      	ldr	r1, [pc, #16]	; (800aca8 <USBD_ProductStrDescriptor+0x34>)
 800ac96:	4805      	ldr	r0, [pc, #20]	; (800acac <USBD_ProductStrDescriptor+0x38>)
 800ac98:	f002 fad3 	bl	800d242 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac9c:	4b02      	ldr	r3, [pc, #8]	; (800aca8 <USBD_ProductStrDescriptor+0x34>)
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20000dc0 	.word	0x20000dc0
 800acac:	0800e614 	.word	0x0800e614

0800acb0 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	6039      	str	r1, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	4904      	ldr	r1, [pc, #16]	; (800acd0 <USBD_ManufacturerStrDescriptor+0x20>)
 800acc0:	4804      	ldr	r0, [pc, #16]	; (800acd4 <USBD_ManufacturerStrDescriptor+0x24>)
 800acc2:	f002 fabe 	bl	800d242 <USBD_GetString>
  return USBD_StrDesc;
 800acc6:	4b02      	ldr	r3, [pc, #8]	; (800acd0 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20000dc0 	.word	0x20000dc0
 800acd4:	0800e62c 	.word	0x0800e62c

0800acd8 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	6039      	str	r1, [r7, #0]
 800ace2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	221a      	movs	r2, #26
 800ace8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acea:	f000 f843 	bl	800ad74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800acee:	4b02      	ldr	r3, [pc, #8]	; (800acf8 <USBD_SerialStrDescriptor+0x20>)
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20000278 	.word	0x20000278

0800acfc <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	6039      	str	r1, [r7, #0]
 800ad06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d105      	bne.n	800ad1a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	4907      	ldr	r1, [pc, #28]	; (800ad30 <USBD_ConfigStrDescriptor+0x34>)
 800ad12:	4808      	ldr	r0, [pc, #32]	; (800ad34 <USBD_ConfigStrDescriptor+0x38>)
 800ad14:	f002 fa95 	bl	800d242 <USBD_GetString>
 800ad18:	e004      	b.n	800ad24 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	4904      	ldr	r1, [pc, #16]	; (800ad30 <USBD_ConfigStrDescriptor+0x34>)
 800ad1e:	4805      	ldr	r0, [pc, #20]	; (800ad34 <USBD_ConfigStrDescriptor+0x38>)
 800ad20:	f002 fa8f 	bl	800d242 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad24:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <USBD_ConfigStrDescriptor+0x34>)
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000dc0 	.word	0x20000dc0
 800ad34:	0800e640 	.word	0x0800e640

0800ad38 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d105      	bne.n	800ad56 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	4907      	ldr	r1, [pc, #28]	; (800ad6c <USBD_InterfaceStrDescriptor+0x34>)
 800ad4e:	4808      	ldr	r0, [pc, #32]	; (800ad70 <USBD_InterfaceStrDescriptor+0x38>)
 800ad50:	f002 fa77 	bl	800d242 <USBD_GetString>
 800ad54:	e004      	b.n	800ad60 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	4904      	ldr	r1, [pc, #16]	; (800ad6c <USBD_InterfaceStrDescriptor+0x34>)
 800ad5a:	4805      	ldr	r0, [pc, #20]	; (800ad70 <USBD_InterfaceStrDescriptor+0x38>)
 800ad5c:	f002 fa71 	bl	800d242 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad60:	4b02      	ldr	r3, [pc, #8]	; (800ad6c <USBD_InterfaceStrDescriptor+0x34>)
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000dc0 	.word	0x20000dc0
 800ad70:	0800e650 	.word	0x0800e650

0800ad74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <Get_SerialNum+0x44>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad80:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <Get_SerialNum+0x48>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad86:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <Get_SerialNum+0x4c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad9a:	2208      	movs	r2, #8
 800ad9c:	4909      	ldr	r1, [pc, #36]	; (800adc4 <Get_SerialNum+0x50>)
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 f814 	bl	800adcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ada4:	2204      	movs	r2, #4
 800ada6:	4908      	ldr	r1, [pc, #32]	; (800adc8 <Get_SerialNum+0x54>)
 800ada8:	68b8      	ldr	r0, [r7, #8]
 800adaa:	f000 f80f 	bl	800adcc <IntToUnicode>
  }
}
 800adae:	bf00      	nop
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	1ffff7e8 	.word	0x1ffff7e8
 800adbc:	1ffff7ec 	.word	0x1ffff7ec
 800adc0:	1ffff7f0 	.word	0x1ffff7f0
 800adc4:	2000027a 	.word	0x2000027a
 800adc8:	2000028a 	.word	0x2000028a

0800adcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800adcc:	b480      	push	{r7}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4613      	mov	r3, r2
 800add8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]
 800ade2:	e027      	b.n	800ae34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	0f1b      	lsrs	r3, r3, #28
 800ade8:	2b09      	cmp	r3, #9
 800adea:	d80b      	bhi.n	800ae04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	0f1b      	lsrs	r3, r3, #28
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	4619      	mov	r1, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	440b      	add	r3, r1
 800adfc:	3230      	adds	r2, #48	; 0x30
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	e00a      	b.n	800ae1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	0f1b      	lsrs	r3, r3, #28
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	4619      	mov	r1, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	440b      	add	r3, r1
 800ae14:	3237      	adds	r2, #55	; 0x37
 800ae16:	b2d2      	uxtb	r2, r2
 800ae18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	3301      	adds	r3, #1
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	4413      	add	r3, r2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	3301      	adds	r3, #1
 800ae32:	75fb      	strb	r3, [r7, #23]
 800ae34:	7dfa      	ldrb	r2, [r7, #23]
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d3d3      	bcc.n	800ade4 <IntToUnicode+0x18>
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bc80      	pop	{r7}
 800ae46:	4770      	bx	lr

0800ae48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	e0c6      	b.n	800afec <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae64:	fb02 f303 	mul.w	r3, r2, r3
 800ae68:	4a65      	ldr	r2, [pc, #404]	; (800b000 <USBD_CDC_Init+0x1b8>)
 800ae6a:	4413      	add	r3, r2
 800ae6c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7c1b      	ldrb	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d13d      	bne.n	800aef2 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	4a62      	ldr	r2, [pc, #392]	; (800b004 <USBD_CDC_Init+0x1bc>)
 800ae7a:	5cd1      	ldrb	r1, [r2, r3]
 800ae7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae80:	2202      	movs	r2, #2
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f002 fbe7 	bl	800d656 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	4a5e      	ldr	r2, [pc, #376]	; (800b004 <USBD_CDC_Init+0x1bc>)
 800ae8c:	5cd3      	ldrb	r3, [r2, r3]
 800ae8e:	f003 020f 	and.w	r2, r3, #15
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	440b      	add	r3, r1
 800ae9e:	3324      	adds	r3, #36	; 0x24
 800aea0:	2201      	movs	r2, #1
 800aea2:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	4a58      	ldr	r2, [pc, #352]	; (800b008 <USBD_CDC_Init+0x1c0>)
 800aea8:	5cd1      	ldrb	r1, [r2, r3]
 800aeaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeae:	2202      	movs	r2, #2
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f002 fbd0 	bl	800d656 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	4a53      	ldr	r2, [pc, #332]	; (800b008 <USBD_CDC_Init+0x1c0>)
 800aeba:	5cd3      	ldrb	r3, [r2, r3]
 800aebc:	f003 020f 	and.w	r2, r3, #15
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	4613      	mov	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	440b      	add	r3, r1
 800aecc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aed0:	2201      	movs	r2, #1
 800aed2:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	4a4d      	ldr	r2, [pc, #308]	; (800b00c <USBD_CDC_Init+0x1c4>)
 800aed8:	5cd3      	ldrb	r3, [r2, r3]
 800aeda:	f003 020f 	and.w	r2, r3, #15
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	440b      	add	r3, r1
 800aeea:	3326      	adds	r3, #38	; 0x26
 800aeec:	2210      	movs	r2, #16
 800aeee:	801a      	strh	r2, [r3, #0]
 800aef0:	e03a      	b.n	800af68 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	4a43      	ldr	r2, [pc, #268]	; (800b004 <USBD_CDC_Init+0x1bc>)
 800aef6:	5cd1      	ldrb	r1, [r2, r3]
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	2202      	movs	r2, #2
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f002 fbaa 	bl	800d656 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	4a3f      	ldr	r2, [pc, #252]	; (800b004 <USBD_CDC_Init+0x1bc>)
 800af06:	5cd3      	ldrb	r3, [r2, r3]
 800af08:	f003 020f 	and.w	r2, r3, #15
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	4613      	mov	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	440b      	add	r3, r1
 800af18:	3324      	adds	r3, #36	; 0x24
 800af1a:	2201      	movs	r2, #1
 800af1c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	4a39      	ldr	r2, [pc, #228]	; (800b008 <USBD_CDC_Init+0x1c0>)
 800af22:	5cd1      	ldrb	r1, [r2, r3]
 800af24:	2340      	movs	r3, #64	; 0x40
 800af26:	2202      	movs	r2, #2
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f002 fb94 	bl	800d656 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	4a35      	ldr	r2, [pc, #212]	; (800b008 <USBD_CDC_Init+0x1c0>)
 800af32:	5cd3      	ldrb	r3, [r2, r3]
 800af34:	f003 020f 	and.w	r2, r3, #15
 800af38:	6879      	ldr	r1, [r7, #4]
 800af3a:	4613      	mov	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af48:	2201      	movs	r2, #1
 800af4a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4a2f      	ldr	r2, [pc, #188]	; (800b00c <USBD_CDC_Init+0x1c4>)
 800af50:	5cd3      	ldrb	r3, [r2, r3]
 800af52:	f003 020f 	and.w	r2, r3, #15
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	4613      	mov	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	440b      	add	r3, r1
 800af62:	3326      	adds	r3, #38	; 0x26
 800af64:	2210      	movs	r2, #16
 800af66:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	4a28      	ldr	r2, [pc, #160]	; (800b00c <USBD_CDC_Init+0x1c4>)
 800af6c:	5cd1      	ldrb	r1, [r2, r3]
 800af6e:	2308      	movs	r3, #8
 800af70:	2203      	movs	r2, #3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f002 fb6f 	bl	800d656 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	4a24      	ldr	r2, [pc, #144]	; (800b00c <USBD_CDC_Init+0x1c4>)
 800af7c:	5cd3      	ldrb	r3, [r2, r3]
 800af7e:	f003 020f 	and.w	r2, r3, #15
 800af82:	6879      	ldr	r1, [r7, #4]
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	3324      	adds	r3, #36	; 0x24
 800af90:	2201      	movs	r2, #1
 800af92:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	7bfa      	ldrb	r2, [r7, #15]
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	7c1b      	ldrb	r3, [r3, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10b      	bne.n	800afd2 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	4a12      	ldr	r2, [pc, #72]	; (800b008 <USBD_CDC_Init+0x1c0>)
 800afbe:	5cd1      	ldrb	r1, [r2, r3]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f002 fc32 	bl	800d834 <USBD_LL_PrepareReceive>
 800afd0:	e009      	b.n	800afe6 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
 800afd4:	4a0c      	ldr	r2, [pc, #48]	; (800b008 <USBD_CDC_Init+0x1c0>)
 800afd6:	5cd1      	ldrb	r1, [r2, r3]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f002 fc27 	bl	800d834 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
 800afe8:	3301      	adds	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f43f af35 	beq.w	800ae5e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20000fd8 	.word	0x20000fd8
 800b004:	20000fc0 	.word	0x20000fc0
 800b008:	20000fc4 	.word	0x20000fc4
 800b00c:	20000fc8 	.word	0x20000fc8

0800b010 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
 800b020:	e057      	b.n	800b0d2 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	4a2f      	ldr	r2, [pc, #188]	; (800b0e4 <USBD_CDC_DeInit+0xd4>)
 800b026:	5cd3      	ldrb	r3, [r2, r3]
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f002 fb39 	bl	800d6a2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4a2c      	ldr	r2, [pc, #176]	; (800b0e4 <USBD_CDC_DeInit+0xd4>)
 800b034:	5cd3      	ldrb	r3, [r2, r3]
 800b036:	f003 020f 	and.w	r2, r3, #15
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	4613      	mov	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	440b      	add	r3, r1
 800b046:	3324      	adds	r3, #36	; 0x24
 800b048:	2200      	movs	r2, #0
 800b04a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	4a26      	ldr	r2, [pc, #152]	; (800b0e8 <USBD_CDC_DeInit+0xd8>)
 800b050:	5cd3      	ldrb	r3, [r2, r3]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f002 fb24 	bl	800d6a2 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
 800b05c:	4a22      	ldr	r2, [pc, #136]	; (800b0e8 <USBD_CDC_DeInit+0xd8>)
 800b05e:	5cd3      	ldrb	r3, [r2, r3]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b074:	2200      	movs	r2, #0
 800b076:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800b078:	7bfb      	ldrb	r3, [r7, #15]
 800b07a:	4a1c      	ldr	r2, [pc, #112]	; (800b0ec <USBD_CDC_DeInit+0xdc>)
 800b07c:	5cd3      	ldrb	r3, [r2, r3]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f002 fb0e 	bl	800d6a2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	4a18      	ldr	r2, [pc, #96]	; (800b0ec <USBD_CDC_DeInit+0xdc>)
 800b08a:	5cd3      	ldrb	r3, [r2, r3]
 800b08c:	f003 020f 	and.w	r2, r3, #15
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	4613      	mov	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	3324      	adds	r3, #36	; 0x24
 800b09e:	2200      	movs	r2, #0
 800b0a0:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	4a11      	ldr	r2, [pc, #68]	; (800b0ec <USBD_CDC_DeInit+0xdc>)
 800b0a6:	5cd3      	ldrb	r3, [r2, r3]
 800b0a8:	f003 020f 	and.w	r2, r3, #15
 800b0ac:	6879      	ldr	r1, [r7, #4]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3326      	adds	r3, #38	; 0x26
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	7bfa      	ldrb	r2, [r7, #15]
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	73fb      	strb	r3, [r7, #15]
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0a4      	beq.n	800b022 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000fc0 	.word	0x20000fc0
 800b0e8:	20000fc4 	.word	0x20000fc4
 800b0ec:	20000fc8 	.word	0x20000fc8

0800b0f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b0f0:	b590      	push	{r4, r7, lr}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b10e:	2300      	movs	r3, #0
 800b110:	757b      	strb	r3, [r7, #21]
 800b112:	e015      	b.n	800b140 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	889b      	ldrh	r3, [r3, #4]
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	7d7b      	ldrb	r3, [r7, #21]
 800b11c:	496d      	ldr	r1, [pc, #436]	; (800b2d4 <USBD_CDC_Setup+0x1e4>)
 800b11e:	5ccb      	ldrb	r3, [r1, r3]
 800b120:	429a      	cmp	r2, r3
 800b122:	d007      	beq.n	800b134 <USBD_CDC_Setup+0x44>
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	889b      	ldrh	r3, [r3, #4]
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	7d7b      	ldrb	r3, [r7, #21]
 800b12c:	496a      	ldr	r1, [pc, #424]	; (800b2d8 <USBD_CDC_Setup+0x1e8>)
 800b12e:	5ccb      	ldrb	r3, [r1, r3]
 800b130:	429a      	cmp	r2, r3
 800b132:	d102      	bne.n	800b13a <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800b134:	7d7b      	ldrb	r3, [r7, #21]
 800b136:	75bb      	strb	r3, [r7, #22]
      break;
 800b138:	e005      	b.n	800b146 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b13a:	7d7b      	ldrb	r3, [r7, #21]
 800b13c:	3301      	adds	r3, #1
 800b13e:	757b      	strb	r3, [r7, #21]
 800b140:	7d7b      	ldrb	r3, [r7, #21]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0e6      	beq.n	800b114 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800b146:	7dbb      	ldrb	r3, [r7, #22]
 800b148:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b14c:	fb02 f303 	mul.w	r3, r2, r3
 800b150:	4a62      	ldr	r2, [pc, #392]	; (800b2dc <USBD_CDC_Setup+0x1ec>)
 800b152:	4413      	add	r3, r2
 800b154:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d04a      	beq.n	800b1f8 <USBD_CDC_Setup+0x108>
 800b162:	2b20      	cmp	r3, #32
 800b164:	f040 80aa 	bne.w	800b2bc <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	88db      	ldrh	r3, [r3, #6]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d038      	beq.n	800b1e2 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b25b      	sxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	da1d      	bge.n	800b1b6 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b180:	689c      	ldr	r4, [r3, #8]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	7859      	ldrb	r1, [r3, #1]
 800b186:	7dbb      	ldrb	r3, [r7, #22]
 800b188:	025b      	lsls	r3, r3, #9
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	441a      	add	r2, r3
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	88db      	ldrh	r3, [r3, #6]
 800b192:	7db8      	ldrb	r0, [r7, #22]
 800b194:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	88db      	ldrh	r3, [r3, #6]
 800b19a:	2b07      	cmp	r3, #7
 800b19c:	bf28      	it	cs
 800b19e:	2307      	movcs	r3, #7
 800b1a0:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800b1a2:	7dbb      	ldrb	r3, [r7, #22]
 800b1a4:	025b      	lsls	r3, r3, #9
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	89fa      	ldrh	r2, [r7, #14]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f002 f8a6 	bl	800d300 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800b1b4:	e089      	b.n	800b2ca <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	785a      	ldrb	r2, [r3, #1]
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	88db      	ldrh	r3, [r3, #6]
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800b1cc:	7dbb      	ldrb	r3, [r7, #22]
 800b1ce:	025b      	lsls	r3, r3, #9
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	18d1      	adds	r1, r2, r3
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	88db      	ldrh	r3, [r3, #6]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f002 f8bc 	bl	800d358 <USBD_CtlPrepareRx>
    break;
 800b1e0:	e073      	b.n	800b2ca <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1e8:	689c      	ldr	r4, [r3, #8]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	7859      	ldrb	r1, [r3, #1]
 800b1ee:	7db8      	ldrb	r0, [r7, #22]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	47a0      	blx	r4
    break;
 800b1f6:	e068      	b.n	800b2ca <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	785b      	ldrb	r3, [r3, #1]
 800b1fc:	2b0b      	cmp	r3, #11
 800b1fe:	d852      	bhi.n	800b2a6 <USBD_CDC_Setup+0x1b6>
 800b200:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <USBD_CDC_Setup+0x118>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b239 	.word	0x0800b239
 800b20c:	0800b2b5 	.word	0x0800b2b5
 800b210:	0800b2a7 	.word	0x0800b2a7
 800b214:	0800b2a7 	.word	0x0800b2a7
 800b218:	0800b2a7 	.word	0x0800b2a7
 800b21c:	0800b2a7 	.word	0x0800b2a7
 800b220:	0800b2a7 	.word	0x0800b2a7
 800b224:	0800b2a7 	.word	0x0800b2a7
 800b228:	0800b2a7 	.word	0x0800b2a7
 800b22c:	0800b2a7 	.word	0x0800b2a7
 800b230:	0800b263 	.word	0x0800b263
 800b234:	0800b28d 	.word	0x0800b28d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b03      	cmp	r3, #3
 800b242:	d107      	bne.n	800b254 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b244:	f107 030a 	add.w	r3, r7, #10
 800b248:	2202      	movs	r2, #2
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f002 f857 	bl	800d300 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b252:	e032      	b.n	800b2ba <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 ffe2 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800b25c:	2303      	movs	r3, #3
 800b25e:	75fb      	strb	r3, [r7, #23]
      break;
 800b260:	e02b      	b.n	800b2ba <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d107      	bne.n	800b27e <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b26e:	f107 030d 	add.w	r3, r7, #13
 800b272:	2201      	movs	r2, #1
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f002 f842 	bl	800d300 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b27c:	e01d      	b.n	800b2ba <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 ffcd 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800b286:	2303      	movs	r3, #3
 800b288:	75fb      	strb	r3, [r7, #23]
      break;
 800b28a:	e016      	b.n	800b2ba <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b03      	cmp	r3, #3
 800b296:	d00f      	beq.n	800b2b8 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f001 ffc0 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b2a4:	e008      	b.n	800b2b8 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 ffb9 	bl	800d220 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b2:	e002      	b.n	800b2ba <USBD_CDC_Setup+0x1ca>
      break;
 800b2b4:	bf00      	nop
 800b2b6:	e008      	b.n	800b2ca <USBD_CDC_Setup+0x1da>
      break;
 800b2b8:	bf00      	nop
    }
    break;
 800b2ba:	e006      	b.n	800b2ca <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 ffae 	bl	800d220 <USBD_CtlError>
    ret = USBD_FAIL;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	75fb      	strb	r3, [r7, #23]
    break;
 800b2c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd90      	pop	{r4, r7, pc}
 800b2d4:	20000fcc 	.word	0x20000fcc
 800b2d8:	20000fd0 	.word	0x20000fd0
 800b2dc:	20000fd8 	.word	0x20000fd8

0800b2e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800b2f6:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	75bb      	strb	r3, [r7, #22]
 800b300:	e00d      	b.n	800b31e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 800b302:	78fa      	ldrb	r2, [r7, #3]
 800b304:	7dbb      	ldrb	r3, [r7, #22]
 800b306:	4934      	ldr	r1, [pc, #208]	; (800b3d8 <USBD_CDC_DataIn+0xf8>)
 800b308:	5ccb      	ldrb	r3, [r1, r3]
 800b30a:	f003 030f 	and.w	r3, r3, #15
 800b30e:	429a      	cmp	r2, r3
 800b310:	d102      	bne.n	800b318 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 800b312:	7dbb      	ldrb	r3, [r7, #22]
 800b314:	75fb      	strb	r3, [r7, #23]
      break;
 800b316:	e005      	b.n	800b324 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b318:	7dbb      	ldrb	r3, [r7, #22]
 800b31a:	3301      	adds	r3, #1
 800b31c:	75bb      	strb	r3, [r7, #22]
 800b31e:	7dbb      	ldrb	r3, [r7, #22]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0ee      	beq.n	800b302 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b32a:	fb02 f303 	mul.w	r3, r2, r3
 800b32e:	4a2b      	ldr	r2, [pc, #172]	; (800b3dc <USBD_CDC_DataIn+0xfc>)
 800b330:	4413      	add	r3, r2
 800b332:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b334:	78fa      	ldrb	r2, [r7, #3]
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	4613      	mov	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	440b      	add	r3, r1
 800b342:	3318      	adds	r3, #24
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d029      	beq.n	800b39e <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b34a:	78fa      	ldrb	r2, [r7, #3]
 800b34c:	6879      	ldr	r1, [r7, #4]
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	440b      	add	r3, r1
 800b358:	3318      	adds	r3, #24
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	78f9      	ldrb	r1, [r7, #3]
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	460b      	mov	r3, r1
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	440b      	add	r3, r1
 800b366:	00db      	lsls	r3, r3, #3
 800b368:	4403      	add	r3, r0
 800b36a:	3338      	adds	r3, #56	; 0x38
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b372:	fb01 f303 	mul.w	r3, r1, r3
 800b376:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d110      	bne.n	800b39e <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	440b      	add	r3, r1
 800b38a:	3318      	adds	r3, #24
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b390:	78f9      	ldrb	r1, [r7, #3]
 800b392:	2300      	movs	r3, #0
 800b394:	2200      	movs	r2, #0
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f002 fa2b 	bl	800d7f2 <USBD_LL_Transmit>
 800b39c:	e016      	b.n	800b3cc <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00c      	beq.n	800b3cc <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3b8:	691c      	ldr	r4, [r3, #16]
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b3c6:	78fb      	ldrb	r3, [r7, #3]
 800b3c8:	7df8      	ldrb	r0, [r7, #23]
 800b3ca:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd90      	pop	{r4, r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000fc0 	.word	0x20000fc0
 800b3dc:	20000fd8 	.word	0x20000fd8

0800b3e0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73bb      	strb	r3, [r7, #14]
 800b3f8:	e00b      	b.n	800b412 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	4a17      	ldr	r2, [pc, #92]	; (800b45c <USBD_CDC_DataOut+0x7c>)
 800b3fe:	5cd3      	ldrb	r3, [r2, r3]
 800b400:	78fa      	ldrb	r2, [r7, #3]
 800b402:	429a      	cmp	r2, r3
 800b404:	d102      	bne.n	800b40c <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	73fb      	strb	r3, [r7, #15]
      break;
 800b40a:	e005      	b.n	800b418 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b40c:	7bbb      	ldrb	r3, [r7, #14]
 800b40e:	3301      	adds	r3, #1
 800b410:	73bb      	strb	r3, [r7, #14]
 800b412:	7bbb      	ldrb	r3, [r7, #14]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0f0      	beq.n	800b3fa <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	4a0f      	ldr	r2, [pc, #60]	; (800b460 <USBD_CDC_DataOut+0x80>)
 800b424:	4413      	add	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f002 fa22 	bl	800d876 <USBD_LL_GetRxDataSize>
 800b432:	4602      	mov	r2, r0
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b44e:	7bf8      	ldrb	r0, [r7, #15]
 800b450:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20000fc4 	.word	0x20000fc4
 800b460:	20000fd8 	.word	0x20000fd8

0800b464 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b470:	2300      	movs	r3, #0
 800b472:	73fb      	strb	r3, [r7, #15]
 800b474:	e02e      	b.n	800b4d4 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b47c:	fb02 f303 	mul.w	r3, r2, r3
 800b480:	4a18      	ldr	r2, [pc, #96]	; (800b4e4 <USBD_CDC_EP0_RxReady+0x80>)
 800b482:	4413      	add	r3, r2
 800b484:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e025      	b.n	800b4dc <USBD_CDC_EP0_RxReady+0x78>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b496:	2b00      	cmp	r3, #0
 800b498:	d019      	beq.n	800b4ce <USBD_CDC_EP0_RxReady+0x6a>
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4a0:	2bff      	cmp	r3, #255	; 0xff
 800b4a2:	d014      	beq.n	800b4ce <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4aa:	689c      	ldr	r4, [r3, #8]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	025b      	lsls	r3, r3, #9
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	441a      	add	r2, r3
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	7bf8      	ldrb	r0, [r7, #15]
 800b4c4:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	22ff      	movs	r2, #255	; 0xff
 800b4ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	73fb      	strb	r3, [r7, #15]
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d0cd      	beq.n	800b476 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd90      	pop	{r4, r7, pc}
 800b4e4:	20000fd8 	.word	0x20000fd8

0800b4e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	224b      	movs	r2, #75	; 0x4b
 800b4f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b4f6:	4b03      	ldr	r3, [pc, #12]	; (800b504 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20000328 	.word	0x20000328

0800b508 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	224b      	movs	r2, #75	; 0x4b
 800b514:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b516:	4b03      	ldr	r3, [pc, #12]	; (800b524 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	200002dc 	.word	0x200002dc

0800b528 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	224b      	movs	r2, #75	; 0x4b
 800b534:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b536:	4b03      	ldr	r3, [pc, #12]	; (800b544 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	20000328 	.word	0x20000328

0800b548 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	220a      	movs	r2, #10
 800b554:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b556:	4b03      	ldr	r3, [pc, #12]	; (800b564 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bc80      	pop	{r7}
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	20000294 	.word	0x20000294

0800b568 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b578:	2303      	movs	r3, #3
 800b57a:	e004      	b.n	800b586 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bc80      	pop	{r7}
 800b58e:	4770      	bx	lr

0800b590 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b590:	b480      	push	{r7}
 800b592:	b087      	sub	sp, #28
 800b594:	af00      	add	r7, sp, #0
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b5aa:	fb02 f303 	mul.w	r3, r2, r3
 800b5ae:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <USBD_CDC_SetTxBuffer+0x40>)
 800b5b0:	4413      	add	r3, r2
 800b5b2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bc80      	pop	{r7}
 800b5ce:	4770      	bx	lr
 800b5d0:	20000fd8 	.word	0x20000fd8

0800b5d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b5ec:	fb02 f303 	mul.w	r3, r2, r3
 800b5f0:	4a06      	ldr	r2, [pc, #24]	; (800b60c <USBD_CDC_SetRxBuffer+0x38>)
 800b5f2:	4413      	add	r3, r2
 800b5f4:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	bc80      	pop	{r7}
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20000fd8 	.word	0x20000fd8

0800b610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	6039      	str	r1, [r7, #0]
 800b61a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b620:	2301      	movs	r3, #1
 800b622:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b62a:	fb02 f303 	mul.w	r3, r2, r3
 800b62e:	4a17      	ldr	r2, [pc, #92]	; (800b68c <USBD_CDC_TransmitPacket+0x7c>)
 800b630:	4413      	add	r3, r2
 800b632:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d121      	bne.n	800b682 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2201      	movs	r2, #1
 800b642:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	4a11      	ldr	r2, [pc, #68]	; (800b690 <USBD_CDC_TransmitPacket+0x80>)
 800b64a:	5cd3      	ldrb	r3, [r2, r3]
 800b64c:	f003 020f 	and.w	r2, r3, #15
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b656:	6838      	ldr	r0, [r7, #0]
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4403      	add	r3, r0
 800b662:	3318      	adds	r3, #24
 800b664:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	4a09      	ldr	r2, [pc, #36]	; (800b690 <USBD_CDC_TransmitPacket+0x80>)
 800b66a:	5cd1      	ldrb	r1, [r2, r3]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b678:	6838      	ldr	r0, [r7, #0]
 800b67a:	f002 f8ba 	bl	800d7f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20000fd8 	.word	0x20000fd8
 800b690:	20000fc0 	.word	0x20000fc0

0800b694 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b6aa:	fb02 f303 	mul.w	r3, r2, r3
 800b6ae:	4a11      	ldr	r2, [pc, #68]	; (800b6f4 <USBD_CDC_ReceivePacket+0x60>)
 800b6b0:	4413      	add	r3, r2
 800b6b2:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	7c1b      	ldrb	r3, [r3, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10b      	bne.n	800b6d4 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	4a0e      	ldr	r2, [pc, #56]	; (800b6f8 <USBD_CDC_ReceivePacket+0x64>)
 800b6c0:	5cd1      	ldrb	r1, [r2, r3]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6cc:	6838      	ldr	r0, [r7, #0]
 800b6ce:	f002 f8b1 	bl	800d834 <USBD_LL_PrepareReceive>
 800b6d2:	e009      	b.n	800b6e8 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	4a08      	ldr	r2, [pc, #32]	; (800b6f8 <USBD_CDC_ReceivePacket+0x64>)
 800b6d8:	5cd1      	ldrb	r1, [r2, r3]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6e0:	2340      	movs	r3, #64	; 0x40
 800b6e2:	6838      	ldr	r0, [r7, #0]
 800b6e4:	f002 f8a6 	bl	800d834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000fd8 	.word	0x20000fd8
 800b6f8:	20000fc4 	.word	0x20000fc4

0800b6fc <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	461a      	mov	r2, r3
 800b70a:	4603      	mov	r3, r0
 800b70c:	70fb      	strb	r3, [r7, #3]
 800b70e:	460b      	mov	r3, r1
 800b710:	70bb      	strb	r3, [r7, #2]
 800b712:	4613      	mov	r3, r2
 800b714:	707b      	strb	r3, [r7, #1]
  desc += 9;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3309      	adds	r3, #9
 800b71a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
 800b720:	e05b      	b.n	800b7da <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3302      	adds	r3, #2
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3310      	adds	r3, #16
 800b72e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b732:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	330a      	adds	r3, #10
 800b738:	78fa      	ldrb	r2, [r7, #3]
 800b73a:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	331a      	adds	r3, #26
 800b740:	78ba      	ldrb	r2, [r7, #2]
 800b742:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3322      	adds	r3, #34	; 0x22
 800b748:	78fa      	ldrb	r2, [r7, #3]
 800b74a:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3323      	adds	r3, #35	; 0x23
 800b750:	78ba      	ldrb	r2, [r7, #2]
 800b752:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3326      	adds	r3, #38	; 0x26
 800b758:	7e3a      	ldrb	r2, [r7, #24]
 800b75a:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	332d      	adds	r3, #45	; 0x2d
 800b760:	78ba      	ldrb	r2, [r7, #2]
 800b762:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3336      	adds	r3, #54	; 0x36
 800b768:	7f3a      	ldrb	r2, [r7, #28]
 800b76a:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	333d      	adds	r3, #61	; 0x3d
 800b770:	787a      	ldrb	r2, [r7, #1]
 800b772:	701a      	strb	r2, [r3, #0]

    desc += 66;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3342      	adds	r3, #66	; 0x42
 800b778:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	491b      	ldr	r1, [pc, #108]	; (800b7ec <USBD_Update_CDC_ACM_DESC+0xf0>)
 800b77e:	787a      	ldrb	r2, [r7, #1]
 800b780:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 800b782:	7bfb      	ldrb	r3, [r7, #15]
 800b784:	491a      	ldr	r1, [pc, #104]	; (800b7f0 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800b786:	7f3a      	ldrb	r2, [r7, #28]
 800b788:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	4919      	ldr	r1, [pc, #100]	; (800b7f4 <USBD_Update_CDC_ACM_DESC+0xf8>)
 800b78e:	7e3a      	ldrb	r2, [r7, #24]
 800b790:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	4918      	ldr	r1, [pc, #96]	; (800b7f8 <USBD_Update_CDC_ACM_DESC+0xfc>)
 800b796:	78fa      	ldrb	r2, [r7, #3]
 800b798:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	4917      	ldr	r1, [pc, #92]	; (800b7fc <USBD_Update_CDC_ACM_DESC+0x100>)
 800b79e:	78ba      	ldrb	r2, [r7, #2]
 800b7a0:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	4916      	ldr	r1, [pc, #88]	; (800b800 <USBD_Update_CDC_ACM_DESC+0x104>)
 800b7a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b7aa:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 800b7ac:	787b      	ldrb	r3, [r7, #1]
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 800b7b2:	787b      	ldrb	r3, [r7, #1]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800b7b8:	7f3b      	ldrb	r3, [r7, #28]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	773b      	strb	r3, [r7, #28]
    str_idx++;
 800b7be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800b7c8:	78fb      	ldrb	r3, [r7, #3]
 800b7ca:	3302      	adds	r3, #2
 800b7cc:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 800b7ce:	78fb      	ldrb	r3, [r7, #3]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	73fb      	strb	r3, [r7, #15]
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0a0      	beq.n	800b722 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 800b7e0:	bf00      	nop
 800b7e2:	bf00      	nop
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bc80      	pop	{r7}
 800b7ea:	4770      	bx	lr
 800b7ec:	20000fc0 	.word	0x20000fc0
 800b7f0:	20000fc4 	.word	0x20000fc4
 800b7f4:	20000fc8 	.word	0x20000fc8
 800b7f8:	20000fcc 	.word	0x20000fcc
 800b7fc:	20000fd0 	.word	0x20000fd0
 800b800:	20000fd4 	.word	0x20000fd4

0800b804 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 800b810:	4b08      	ldr	r3, [pc, #32]	; (800b834 <USBD_COMPOSITE_Init+0x30>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	4611      	mov	r1, r2
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 800b81c:	4b06      	ldr	r3, [pc, #24]	; (800b838 <USBD_COMPOSITE_Init+0x34>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	78fa      	ldrb	r2, [r7, #3]
 800b822:	4611      	mov	r1, r2
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200002a0 	.word	0x200002a0
 800b838:	200003c0 	.word	0x200003c0

0800b83c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800b848:	4b08      	ldr	r3, [pc, #32]	; (800b86c <USBD_COMPOSITE_DeInit+0x30>)
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	78fa      	ldrb	r2, [r7, #3]
 800b84e:	4611      	mov	r1, r2
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 800b854:	4b06      	ldr	r3, [pc, #24]	; (800b870 <USBD_COMPOSITE_DeInit+0x34>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	78fa      	ldrb	r2, [r7, #3]
 800b85a:	4611      	mov	r1, r2
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	200002a0 	.word	0x200002a0
 800b870:	200003c0 	.word	0x200003c0

0800b874 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
 800b882:	e019      	b.n	800b8b8 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	889b      	ldrh	r3, [r3, #4]
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	4915      	ldr	r1, [pc, #84]	; (800b8e4 <USBD_COMPOSITE_Setup+0x70>)
 800b88e:	5ccb      	ldrb	r3, [r1, r3]
 800b890:	429a      	cmp	r2, r3
 800b892:	d007      	beq.n	800b8a4 <USBD_COMPOSITE_Setup+0x30>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	889b      	ldrh	r3, [r3, #4]
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	4912      	ldr	r1, [pc, #72]	; (800b8e8 <USBD_COMPOSITE_Setup+0x74>)
 800b89e:	5ccb      	ldrb	r3, [r1, r3]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d106      	bne.n	800b8b2 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800b8a4:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <USBD_COMPOSITE_Setup+0x78>)
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	e014      	b.n	800b8dc <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d0e2      	beq.n	800b884 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	889b      	ldrh	r3, [r3, #4]
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b0a      	ldr	r3, [pc, #40]	; (800b8f0 <USBD_COMPOSITE_Setup+0x7c>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d106      	bne.n	800b8da <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <USBD_COMPOSITE_Setup+0x80>)
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	e000      	b.n	800b8dc <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800b8da:	2303      	movs	r3, #3
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	20000fcc 	.word	0x20000fcc
 800b8e8:	20000fd0 	.word	0x20000fd0
 800b8ec:	200002a0 	.word	0x200002a0
 800b8f0:	200012fc 	.word	0x200012fc
 800b8f4:	200003c0 	.word	0x200003c0

0800b8f8 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]
 800b908:	e01a      	b.n	800b940 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	4918      	ldr	r1, [pc, #96]	; (800b970 <USBD_COMPOSITE_DataIn+0x78>)
 800b910:	5ccb      	ldrb	r3, [r1, r3]
 800b912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b916:	429a      	cmp	r2, r3
 800b918:	d007      	beq.n	800b92a <USBD_COMPOSITE_DataIn+0x32>
 800b91a:	78fa      	ldrb	r2, [r7, #3]
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	4915      	ldr	r1, [pc, #84]	; (800b974 <USBD_COMPOSITE_DataIn+0x7c>)
 800b920:	5ccb      	ldrb	r3, [r1, r3]
 800b922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b926:	429a      	cmp	r2, r3
 800b928:	d107      	bne.n	800b93a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800b92a:	4b13      	ldr	r3, [pc, #76]	; (800b978 <USBD_COMPOSITE_DataIn+0x80>)
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	78fa      	ldrb	r2, [r7, #3]
 800b930:	4611      	mov	r1, r2
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	4798      	blx	r3
 800b936:	4603      	mov	r3, r0
 800b938:	e015      	b.n	800b966 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	3301      	adds	r3, #1
 800b93e:	73fb      	strb	r3, [r7, #15]
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0e1      	beq.n	800b90a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 800b946:	78fa      	ldrb	r2, [r7, #3]
 800b948:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <USBD_COMPOSITE_DataIn+0x84>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b950:	429a      	cmp	r2, r3
 800b952:	d107      	bne.n	800b964 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 800b954:	4b0a      	ldr	r3, [pc, #40]	; (800b980 <USBD_COMPOSITE_DataIn+0x88>)
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	78fa      	ldrb	r2, [r7, #3]
 800b95a:	4611      	mov	r1, r2
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	4798      	blx	r3
 800b960:	4603      	mov	r3, r0
 800b962:	e000      	b.n	800b966 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800b964:	2303      	movs	r3, #3
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000fc0 	.word	0x20000fc0
 800b974:	20000fc8 	.word	0x20000fc8
 800b978:	200002a0 	.word	0x200002a0
 800b97c:	200003be 	.word	0x200003be
 800b980:	200003c0 	.word	0x200003c0

0800b984 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800b98c:	4b04      	ldr	r3, [pc, #16]	; (800b9a0 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	200002a0 	.word	0x200002a0

0800b9a4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bc80      	pop	{r7}
 800b9b6:	4770      	bx	lr

0800b9b8 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bc80      	pop	{r7}
 800b9ca:	4770      	bx	lr

0800b9cc <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bc80      	pop	{r7}
 800b9e2:	4770      	bx	lr

0800b9e4 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bc80      	pop	{r7}
 800b9fa:	4770      	bx	lr

0800b9fc <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73fb      	strb	r3, [r7, #15]
 800ba0c:	e010      	b.n	800ba30 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	4a0b      	ldr	r2, [pc, #44]	; (800ba40 <USBD_COMPOSITE_DataOut+0x44>)
 800ba12:	5cd3      	ldrb	r3, [r2, r3]
 800ba14:	78fa      	ldrb	r2, [r7, #3]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d107      	bne.n	800ba2a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800ba1a:	4b0a      	ldr	r3, [pc, #40]	; (800ba44 <USBD_COMPOSITE_DataOut+0x48>)
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	78fa      	ldrb	r2, [r7, #3]
 800ba20:	4611      	mov	r1, r2
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	e006      	b.n	800ba38 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	73fb      	strb	r3, [r7, #15]
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0eb      	beq.n	800ba0e <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800ba36:	2303      	movs	r3, #3
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	20000fc4 	.word	0x20000fc4
 800ba44:	200002a0 	.word	0x200002a0

0800ba48 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2264      	movs	r2, #100	; 0x64
 800ba54:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800ba56:	4b03      	ldr	r3, [pc, #12]	; (800ba64 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc80      	pop	{r7}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20001258 	.word	0x20001258

0800ba68 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2264      	movs	r2, #100	; 0x64
 800ba74:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800ba76:	4b03      	ldr	r3, [pc, #12]	; (800ba84 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bc80      	pop	{r7}
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	200011f4 	.word	0x200011f4

0800ba88 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2264      	movs	r2, #100	; 0x64
 800ba94:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800ba96:	4b03      	ldr	r3, [pc, #12]	; (800baa4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bc80      	pop	{r7}
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	20001258 	.word	0x20001258

0800baa8 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	220a      	movs	r2, #10
 800bab4:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800bab6:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	bc80      	pop	{r7}
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	200003b4 	.word	0x200003b4

0800bac8 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	; 0x28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	460b      	mov	r3, r1
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800bad6:	4b20      	ldr	r3, [pc, #128]	; (800bb58 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	7afa      	ldrb	r2, [r7, #11]
 800badc:	429a      	cmp	r2, r3
 800bade:	d836      	bhi.n	800bb4e <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800bae0:	2300      	movs	r3, #0
 800bae2:	617b      	str	r3, [r7, #20]
 800bae4:	f107 0318 	add.w	r3, r7, #24
 800bae8:	2200      	movs	r2, #0
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	605a      	str	r2, [r3, #4]
 800baee:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800baf6:	e01a      	b.n	800bb2e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800baf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bafc:	4a17      	ldr	r2, [pc, #92]	; (800bb5c <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800bafe:	5cd3      	ldrb	r3, [r2, r3]
 800bb00:	7afa      	ldrb	r2, [r7, #11]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d10e      	bne.n	800bb24 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800bb06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb0a:	f107 0014 	add.w	r0, r7, #20
 800bb0e:	4a14      	ldr	r2, [pc, #80]	; (800bb60 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800bb10:	2110      	movs	r1, #16
 800bb12:	f002 f82b 	bl	800db6c <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800bb16:	f107 0314 	add.w	r3, r7, #20
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	4911      	ldr	r1, [pc, #68]	; (800bb64 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f001 fb8f 	bl	800d242 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb28:	3301      	adds	r3, #1
 800bb2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0e0      	beq.n	800baf8 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 800bb36:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	7afa      	ldrb	r2, [r7, #11]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d104      	bne.n	800bb4a <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	4908      	ldr	r1, [pc, #32]	; (800bb64 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800bb44:	4809      	ldr	r0, [pc, #36]	; (800bb6c <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800bb46:	f001 fb7c 	bl	800d242 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800bb4a:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800bb4c:	e000      	b.n	800bb50 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800bb4e:	2300      	movs	r3, #0
  }
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3728      	adds	r7, #40	; 0x28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	200003b0 	.word	0x200003b0
 800bb5c:	20000fd4 	.word	0x20000fd4
 800bb60:	0800e664 	.word	0x0800e664
 800bb64:	200012bc 	.word	0x200012bc
 800bb68:	200012fd 	.word	0x200012fd
 800bb6c:	0800e674 	.word	0x0800e674

0800bb70 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800bb70:	b590      	push	{r4, r7, lr}
 800bb72:	b089      	sub	sp, #36	; 0x24
 800bb74:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800bb7e:	2381      	movs	r3, #129	; 0x81
 800bb80:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800bb82:	2301      	movs	r3, #1
 800bb84:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800bb86:	2300      	movs	r3, #0
 800bb88:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 800bb8a:	4b6f      	ldr	r3, [pc, #444]	; (800bd48 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	1d3a      	adds	r2, r7, #4
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 800bb96:	4b6d      	ldr	r3, [pc, #436]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	7afa      	ldrb	r2, [r7, #11]
 800bb9c:	7a79      	ldrb	r1, [r7, #9]
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f000 faf0 	bl	800c184 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3309      	adds	r3, #9
 800bba8:	88ba      	ldrh	r2, [r7, #4]
 800bbaa:	3a09      	subs	r2, #9
 800bbac:	4619      	mov	r1, r3
 800bbae:	4868      	ldr	r0, [pc, #416]	; (800bd50 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 800bbb0:	f001 feda 	bl	800d968 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 800bbb4:	4b64      	ldr	r3, [pc, #400]	; (800bd48 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 800bbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb8:	1d3a      	adds	r2, r7, #4
 800bbba:	4610      	mov	r0, r2
 800bbbc:	4798      	blx	r3
 800bbbe:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 800bbc0:	4b62      	ldr	r3, [pc, #392]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	7afa      	ldrb	r2, [r7, #11]
 800bbc6:	7a79      	ldrb	r1, [r7, #9]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 fadb 	bl	800c184 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3309      	adds	r3, #9
 800bbd2:	88ba      	ldrh	r2, [r7, #4]
 800bbd4:	3a09      	subs	r2, #9
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	485e      	ldr	r0, [pc, #376]	; (800bd54 <USBD_COMPOSITE_Mount_Class+0x1e4>)
 800bbda:	f001 fec5 	bl	800d968 <memcpy>

  in_ep_track += 1;
 800bbde:	7afb      	ldrb	r3, [r7, #11]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 800bbe4:	7a7b      	ldrb	r3, [r7, #9]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800bbea:	4b58      	ldr	r3, [pc, #352]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b56      	ldr	r3, [pc, #344]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bbf4:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800bbf6:	4b58      	ldr	r3, [pc, #352]	; (800bd58 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	1d3a      	adds	r2, r7, #4
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800bc02:	7a7b      	ldrb	r3, [r7, #9]
 800bc04:	3301      	adds	r3, #1
 800bc06:	b2d8      	uxtb	r0, r3
 800bc08:	7afb      	ldrb	r3, [r7, #11]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	4a4f      	ldr	r2, [pc, #316]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bc10:	7812      	ldrb	r2, [r2, #0]
 800bc12:	7afc      	ldrb	r4, [r7, #11]
 800bc14:	7a79      	ldrb	r1, [r7, #9]
 800bc16:	9202      	str	r2, [sp, #8]
 800bc18:	7aba      	ldrb	r2, [r7, #10]
 800bc1a:	9201      	str	r2, [sp, #4]
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4623      	mov	r3, r4
 800bc20:	4602      	mov	r2, r0
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f7ff fd6a 	bl	800b6fc <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3309      	adds	r3, #9
 800bc2c:	88ba      	ldrh	r2, [r7, #4]
 800bc2e:	3a09      	subs	r2, #9
 800bc30:	4619      	mov	r1, r3
 800bc32:	484a      	ldr	r0, [pc, #296]	; (800bd5c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800bc34:	f001 fe98 	bl	800d968 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800bc38:	4b47      	ldr	r3, [pc, #284]	; (800bd58 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 800bc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3c:	1d3a      	adds	r2, r7, #4
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4798      	blx	r3
 800bc42:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800bc44:	7a7b      	ldrb	r3, [r7, #9]
 800bc46:	3301      	adds	r3, #1
 800bc48:	b2d8      	uxtb	r0, r3
 800bc4a:	7afb      	ldrb	r3, [r7, #11]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	4a3e      	ldr	r2, [pc, #248]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bc52:	7812      	ldrb	r2, [r2, #0]
 800bc54:	7afc      	ldrb	r4, [r7, #11]
 800bc56:	7a79      	ldrb	r1, [r7, #9]
 800bc58:	9202      	str	r2, [sp, #8]
 800bc5a:	7aba      	ldrb	r2, [r7, #10]
 800bc5c:	9201      	str	r2, [sp, #4]
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	4623      	mov	r3, r4
 800bc62:	4602      	mov	r2, r0
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f7ff fd49 	bl	800b6fc <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3309      	adds	r3, #9
 800bc6e:	88ba      	ldrh	r2, [r7, #4]
 800bc70:	3a09      	subs	r2, #9
 800bc72:	4619      	mov	r1, r3
 800bc74:	483a      	ldr	r0, [pc, #232]	; (800bd60 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800bc76:	f001 fe77 	bl	800d968 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800bc7a:	7afb      	ldrb	r3, [r7, #11]
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800bc80:	7abb      	ldrb	r3, [r7, #10]
 800bc82:	3301      	adds	r3, #1
 800bc84:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800bc86:	7a7b      	ldrb	r3, [r7, #9]
 800bc88:	3302      	adds	r3, #2
 800bc8a:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800bc8c:	4b2f      	ldr	r3, [pc, #188]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	3301      	adds	r3, #1
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	4b2d      	ldr	r3, [pc, #180]	; (800bd4c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bc96:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800bc98:	2364      	movs	r3, #100	; 0x64
 800bc9a:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800bc9c:	4b31      	ldr	r3, [pc, #196]	; (800bd64 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800bc9e:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2209      	movs	r2, #9
 800bca4:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	2202      	movs	r2, #2
 800bcac:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	3302      	adds	r3, #2
 800bcb2:	88fa      	ldrh	r2, [r7, #6]
 800bcb4:	b2d2      	uxtb	r2, r2
 800bcb6:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	0a1b      	lsrs	r3, r3, #8
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3303      	adds	r3, #3
 800bcc2:	b2d2      	uxtb	r2, r2
 800bcc4:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	7a7a      	ldrb	r2, [r7, #9]
 800bccc:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3305      	adds	r3, #5
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3306      	adds	r3, #6
 800bcda:	2200      	movs	r2, #0
 800bcdc:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3307      	adds	r3, #7
 800bce2:	22c0      	movs	r2, #192	; 0xc0
 800bce4:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3308      	adds	r3, #8
 800bcea:	2232      	movs	r2, #50	; 0x32
 800bcec:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800bcee:	4b1e      	ldr	r3, [pc, #120]	; (800bd68 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800bcf0:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2209      	movs	r2, #9
 800bcf6:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3302      	adds	r3, #2
 800bd04:	88fa      	ldrh	r2, [r7, #6]
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	0a1b      	lsrs	r3, r3, #8
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3303      	adds	r3, #3
 800bd14:	b2d2      	uxtb	r2, r2
 800bd16:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	7a7a      	ldrb	r2, [r7, #9]
 800bd1e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	3305      	adds	r3, #5
 800bd24:	2201      	movs	r2, #1
 800bd26:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3306      	adds	r3, #6
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3307      	adds	r3, #7
 800bd34:	22c0      	movs	r2, #192	; 0xc0
 800bd36:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	2232      	movs	r2, #50	; 0x32
 800bd3e:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800bd40:	bf00      	nop
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd90      	pop	{r4, r7, pc}
 800bd48:	200003c0 	.word	0x200003c0
 800bd4c:	200003b0 	.word	0x200003b0
 800bd50:	200011fd 	.word	0x200011fd
 800bd54:	20001261 	.word	0x20001261
 800bd58:	200002a0 	.word	0x200002a0
 800bd5c:	20001216 	.word	0x20001216
 800bd60:	2000127a 	.word	0x2000127a
 800bd64:	20001258 	.word	0x20001258
 800bd68:	200011f4 	.word	0x200011f4

0800bd6c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 800bd78:	4b24      	ldr	r3, [pc, #144]	; (800be0c <USBD_HID_Init+0xa0>)
 800bd7a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d105      	bne.n	800bd8e <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	e03a      	b.n	800be04 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7c1b      	ldrb	r3, [r3, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10d      	bne.n	800bdba <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 800bd9e:	4b1c      	ldr	r3, [pc, #112]	; (800be10 <USBD_HID_Init+0xa4>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	f003 020f 	and.w	r2, r3, #15
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	440b      	add	r3, r1
 800bdb2:	3326      	adds	r3, #38	; 0x26
 800bdb4:	2207      	movs	r2, #7
 800bdb6:	801a      	strh	r2, [r3, #0]
 800bdb8:	e00c      	b.n	800bdd4 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 800bdba:	4b15      	ldr	r3, [pc, #84]	; (800be10 <USBD_HID_Init+0xa4>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	f003 020f 	and.w	r2, r3, #15
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	440b      	add	r3, r1
 800bdce:	3326      	adds	r3, #38	; 0x26
 800bdd0:	220a      	movs	r2, #10
 800bdd2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	; (800be10 <USBD_HID_Init+0xa4>)
 800bdd6:	7819      	ldrb	r1, [r3, #0]
 800bdd8:	2308      	movs	r3, #8
 800bdda:	2203      	movs	r2, #3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f001 fc3a 	bl	800d656 <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 800bde2:	4b0b      	ldr	r3, [pc, #44]	; (800be10 <USBD_HID_Init+0xa4>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	f003 020f 	and.w	r2, r3, #15
 800bdea:	6879      	ldr	r1, [r7, #4]
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	440b      	add	r3, r1
 800bdf6:	3324      	adds	r3, #36	; 0x24
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20001300 	.word	0x20001300
 800be10:	200003be 	.word	0x200003be

0800be14 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 800be20:	4b16      	ldr	r3, [pc, #88]	; (800be7c <USBD_HID_DeInit+0x68>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	4619      	mov	r1, r3
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f001 fc3b 	bl	800d6a2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 800be2c:	4b13      	ldr	r3, [pc, #76]	; (800be7c <USBD_HID_DeInit+0x68>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	f003 020f 	and.w	r2, r3, #15
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	440b      	add	r3, r1
 800be40:	3324      	adds	r3, #36	; 0x24
 800be42:	2200      	movs	r2, #0
 800be44:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 800be46:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <USBD_HID_DeInit+0x68>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	f003 020f 	and.w	r2, r3, #15
 800be4e:	6879      	ldr	r1, [r7, #4]
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	3326      	adds	r3, #38	; 0x26
 800be5c:	2200      	movs	r2, #0
 800be5e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }

  return (uint8_t)USBD_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	200003be 	.word	0x200003be

0800be80 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be90:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e0e8      	b.n	800c076 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800beac:	2b00      	cmp	r3, #0
 800beae:	d046      	beq.n	800bf3e <USBD_HID_Setup+0xbe>
 800beb0:	2b20      	cmp	r3, #32
 800beb2:	f040 80d8 	bne.w	800c066 <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	3b02      	subs	r3, #2
 800bebc:	2b09      	cmp	r3, #9
 800bebe:	d836      	bhi.n	800bf2e <USBD_HID_Setup+0xae>
 800bec0:	a201      	add	r2, pc, #4	; (adr r2, 800bec8 <USBD_HID_Setup+0x48>)
 800bec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec6:	bf00      	nop
 800bec8:	0800bf1f 	.word	0x0800bf1f
 800becc:	0800beff 	.word	0x0800beff
 800bed0:	0800bf2f 	.word	0x0800bf2f
 800bed4:	0800bf2f 	.word	0x0800bf2f
 800bed8:	0800bf2f 	.word	0x0800bf2f
 800bedc:	0800bf2f 	.word	0x0800bf2f
 800bee0:	0800bf2f 	.word	0x0800bf2f
 800bee4:	0800bf2f 	.word	0x0800bf2f
 800bee8:	0800bf0d 	.word	0x0800bf0d
 800beec:	0800bef1 	.word	0x0800bef1
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	885b      	ldrh	r3, [r3, #2]
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	461a      	mov	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	601a      	str	r2, [r3, #0]
      break;
 800befc:	e01e      	b.n	800bf3c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2201      	movs	r2, #1
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 f9fb 	bl	800d300 <USBD_CtlSendData>
      break;
 800bf0a:	e017      	b.n	800bf3c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	885b      	ldrh	r3, [r3, #2]
 800bf10:	0a1b      	lsrs	r3, r3, #8
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	461a      	mov	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	605a      	str	r2, [r3, #4]
      break;
 800bf1c:	e00e      	b.n	800bf3c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3304      	adds	r3, #4
 800bf22:	2201      	movs	r2, #1
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f001 f9ea 	bl	800d300 <USBD_CtlSendData>
      break;
 800bf2c:	e006      	b.n	800bf3c <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 f975 	bl	800d220 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf36:	2303      	movs	r3, #3
 800bf38:	75fb      	strb	r3, [r7, #23]
      break;
 800bf3a:	bf00      	nop
    }
    break;
 800bf3c:	e09a      	b.n	800c074 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	785b      	ldrb	r3, [r3, #1]
 800bf42:	2b0b      	cmp	r3, #11
 800bf44:	f200 8086 	bhi.w	800c054 <USBD_HID_Setup+0x1d4>
 800bf48:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <USBD_HID_Setup+0xd0>)
 800bf4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4e:	bf00      	nop
 800bf50:	0800bf81 	.word	0x0800bf81
 800bf54:	0800c063 	.word	0x0800c063
 800bf58:	0800c055 	.word	0x0800c055
 800bf5c:	0800c055 	.word	0x0800c055
 800bf60:	0800c055 	.word	0x0800c055
 800bf64:	0800c055 	.word	0x0800c055
 800bf68:	0800bfab 	.word	0x0800bfab
 800bf6c:	0800c055 	.word	0x0800c055
 800bf70:	0800c055 	.word	0x0800c055
 800bf74:	0800c055 	.word	0x0800c055
 800bf78:	0800c003 	.word	0x0800c003
 800bf7c:	0800c02d 	.word	0x0800c02d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d107      	bne.n	800bf9c <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf8c:	f107 030a 	add.w	r3, r7, #10
 800bf90:	2202      	movs	r2, #2
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f001 f9b3 	bl	800d300 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bf9a:	e063      	b.n	800c064 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f001 f93e 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	75fb      	strb	r3, [r7, #23]
      break;
 800bfa8:	e05c      	b.n	800c064 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	885b      	ldrh	r3, [r3, #2]
 800bfae:	0a1b      	lsrs	r3, r3, #8
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	2b22      	cmp	r3, #34	; 0x22
 800bfb4:	d108      	bne.n	800bfc8 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	88db      	ldrh	r3, [r3, #6]
 800bfba:	2b3f      	cmp	r3, #63	; 0x3f
 800bfbc:	bf28      	it	cs
 800bfbe:	233f      	movcs	r3, #63	; 0x3f
 800bfc0:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 800bfc2:	4b2f      	ldr	r3, [pc, #188]	; (800c080 <USBD_HID_Setup+0x200>)
 800bfc4:	613b      	str	r3, [r7, #16]
 800bfc6:	e015      	b.n	800bff4 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	885b      	ldrh	r3, [r3, #2]
 800bfcc:	0a1b      	lsrs	r3, r3, #8
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2b21      	cmp	r3, #33	; 0x21
 800bfd2:	d108      	bne.n	800bfe6 <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 800bfd4:	4b2b      	ldr	r3, [pc, #172]	; (800c084 <USBD_HID_Setup+0x204>)
 800bfd6:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	88db      	ldrh	r3, [r3, #6]
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	bf28      	it	cs
 800bfe0:	2309      	movcs	r3, #9
 800bfe2:	82bb      	strh	r3, [r7, #20]
 800bfe4:	e006      	b.n	800bff4 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f001 f919 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800bfee:	2303      	movs	r3, #3
 800bff0:	75fb      	strb	r3, [r7, #23]
        break;
 800bff2:	e037      	b.n	800c064 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bff4:	8abb      	ldrh	r3, [r7, #20]
 800bff6:	461a      	mov	r2, r3
 800bff8:	6939      	ldr	r1, [r7, #16]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f001 f980 	bl	800d300 <USBD_CtlSendData>
      break;
 800c000:	e030      	b.n	800c064 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	d107      	bne.n	800c01e <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3308      	adds	r3, #8
 800c012:	2201      	movs	r2, #1
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 f972 	bl	800d300 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c01c:	e022      	b.n	800c064 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f001 f8fd 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800c026:	2303      	movs	r3, #3
 800c028:	75fb      	strb	r3, [r7, #23]
      break;
 800c02a:	e01b      	b.n	800c064 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b03      	cmp	r3, #3
 800c036:	d106      	bne.n	800c046 <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	885b      	ldrh	r3, [r3, #2]
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	461a      	mov	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c044:	e00e      	b.n	800c064 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 f8e9 	bl	800d220 <USBD_CtlError>
        ret = USBD_FAIL;
 800c04e:	2303      	movs	r3, #3
 800c050:	75fb      	strb	r3, [r7, #23]
      break;
 800c052:	e007      	b.n	800c064 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f001 f8e2 	bl	800d220 <USBD_CtlError>
      ret = USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	75fb      	strb	r3, [r7, #23]
      break;
 800c060:	e000      	b.n	800c064 <USBD_HID_Setup+0x1e4>
      break;
 800c062:	bf00      	nop
    }
    break;
 800c064:	e006      	b.n	800c074 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 f8d9 	bl	800d220 <USBD_CtlError>
    ret = USBD_FAIL;
 800c06e:	2303      	movs	r3, #3
 800c070:	75fb      	strb	r3, [r7, #23]
    break;
 800c072:	bf00      	nop
  }

  return (uint8_t)ret;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	2000045c 	.word	0x2000045c
 800c084:	20000444 	.word	0x20000444

0800c088 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2222      	movs	r2, #34	; 0x22
 800c094:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 800c096:	4b03      	ldr	r3, [pc, #12]	; (800c0a4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800c098:	4618      	mov	r0, r3
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bc80      	pop	{r7}
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	200003fc 	.word	0x200003fc

0800c0a8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2222      	movs	r2, #34	; 0x22
 800c0b4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 800c0b6:	4b03      	ldr	r3, [pc, #12]	; (800c0c4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bc80      	pop	{r7}
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	20000420 	.word	0x20000420

0800c0c8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2222      	movs	r2, #34	; 0x22
 800c0d4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 800c0d6:	4b03      	ldr	r3, [pc, #12]	; (800c0e4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	200003fc 	.word	0x200003fc

0800c0e8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr
	...

0800c10c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	220a      	movs	r2, #10
 800c118:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800c11a:	4b03      	ldr	r3, [pc, #12]	; (800c128 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	bc80      	pop	{r7}
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	20000450 	.word	0x20000450

0800c12c <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4613      	mov	r3, r2
 800c138:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c140:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	e014      	b.n	800c176 <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b03      	cmp	r3, #3
 800c156:	d10d      	bne.n	800c174 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	7b1b      	ldrb	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	2201      	movs	r2, #1
 800c164:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 800c166:	4b06      	ldr	r3, [pc, #24]	; (800c180 <USBD_HID_Keybaord_SendReport+0x54>)
 800c168:	7819      	ldrb	r1, [r3, #0]
 800c16a:	88fb      	ldrh	r3, [r7, #6]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f001 fb3f 	bl	800d7f2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	200003be 	.word	0x200003be

0800c184 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	4608      	mov	r0, r1
 800c18e:	4611      	mov	r1, r2
 800c190:	461a      	mov	r2, r3
 800c192:	4603      	mov	r3, r0
 800c194:	70fb      	strb	r3, [r7, #3]
 800c196:	460b      	mov	r3, r1
 800c198:	70bb      	strb	r3, [r7, #2]
 800c19a:	4613      	mov	r3, r2
 800c19c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	330b      	adds	r3, #11
 800c1a2:	78fa      	ldrb	r2, [r7, #3]
 800c1a4:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3311      	adds	r3, #17
 800c1aa:	787a      	ldrb	r2, [r7, #1]
 800c1ac:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	331d      	adds	r3, #29
 800c1b2:	78ba      	ldrb	r2, [r7, #2]
 800c1b4:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 800c1b6:	4a07      	ldr	r2, [pc, #28]	; (800c1d4 <USBD_Update_HID_KBD_DESC+0x50>)
 800c1b8:	78bb      	ldrb	r3, [r7, #2]
 800c1ba:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 800c1bc:	4a06      	ldr	r2, [pc, #24]	; (800c1d8 <USBD_Update_HID_KBD_DESC+0x54>)
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 800c1c2:	4a06      	ldr	r2, [pc, #24]	; (800c1dc <USBD_Update_HID_KBD_DESC+0x58>)
 800c1c4:	787b      	ldrb	r3, [r7, #1]
 800c1c6:	7013      	strb	r3, [r2, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bc80      	pop	{r7}
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	200003be 	.word	0x200003be
 800c1d8:	200012fc 	.word	0x200012fc
 800c1dc:	200012fd 	.word	0x200012fd

0800c1e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e01b      	b.n	800c230 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	79fa      	ldrb	r2, [r7, #7]
 800c222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f001 f97d 	bl	800d524 <USBD_LL_Init>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3718      	adds	r7, #24
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e02d      	b.n	800c2ac <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	7c1b      	ldrb	r3, [r3, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d112      	bne.n	800c286 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01e      	beq.n	800c2aa <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c274:	f107 020e 	add.w	r2, r7, #14
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	4602      	mov	r2, r0
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c284:	e011      	b.n	800c2aa <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00b      	beq.n	800c2aa <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	f107 020e 	add.w	r2, r7, #14
 800c29e:	4610      	mov	r0, r2
 800c2a0:	4798      	blx	r3
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f001 f9af 	bl	800d620 <USBD_LL_Start>
 800c2c2:	4603      	mov	r3, r0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bc80      	pop	{r7}
 800c2de:	4770      	bx	lr

0800c2e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d009      	beq.n	800c30e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	78fa      	ldrb	r2, [r7, #3]
 800c304:	4611      	mov	r1, r2
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	4798      	blx	r3
 800c30a:	4603      	mov	r3, r0
 800c30c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	78fa      	ldrb	r2, [r7, #3]
 800c338:	4611      	mov	r1, r2
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	4798      	blx	r3
  }

  return USBD_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 ff26 	bl	800d1ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c36e:	461a      	mov	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c37c:	f003 031f 	and.w	r3, r3, #31
 800c380:	2b02      	cmp	r3, #2
 800c382:	d01a      	beq.n	800c3ba <USBD_LL_SetupStage+0x72>
 800c384:	2b02      	cmp	r3, #2
 800c386:	d822      	bhi.n	800c3ce <USBD_LL_SetupStage+0x86>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <USBD_LL_SetupStage+0x4a>
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d00a      	beq.n	800c3a6 <USBD_LL_SetupStage+0x5e>
 800c390:	e01d      	b.n	800c3ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f9e6 	bl	800c76c <USBD_StdDevReq>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a4:	e020      	b.n	800c3e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fa4a 	bl	800c848 <USBD_StdItfReq>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c3b8:	e016      	b.n	800c3e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fa89 	bl	800c8da <USBD_StdEPReq>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800c3cc:	e00c      	b.n	800c3e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	4619      	mov	r1, r3
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 f97f 	bl	800d6e0 <USBD_LL_StallEP>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3e6:	bf00      	nop
  }

  return ret;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b086      	sub	sp, #24
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d138      	bne.n	800c478 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c40c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c414:	2b03      	cmp	r3, #3
 800c416:	d14a      	bne.n	800c4ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	429a      	cmp	r2, r3
 800c422:	d913      	bls.n	800c44c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	689a      	ldr	r2, [r3, #8]
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	1ad2      	subs	r2, r2, r3
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	68da      	ldr	r2, [r3, #12]
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	4293      	cmp	r3, r2
 800c43c:	bf28      	it	cs
 800c43e:	4613      	movcs	r3, r2
 800c440:	461a      	mov	r2, r3
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f000 ffa4 	bl	800d392 <USBD_CtlContinueRx>
 800c44a:	e030      	b.n	800c4ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b03      	cmp	r3, #3
 800c456:	d10b      	bne.n	800c470 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d005      	beq.n	800c470 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f000 ff9f 	bl	800d3b4 <USBD_CtlSendStatus>
 800c476:	e01a      	b.n	800c4ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b03      	cmp	r3, #3
 800c482:	d114      	bne.n	800c4ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00e      	beq.n	800c4ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	7afa      	ldrb	r2, [r7, #11]
 800c49a:	4611      	mov	r1, r2
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	4798      	blx	r3
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	e000      	b.n	800c4b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	607a      	str	r2, [r7, #4]
 800c4c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4c6:	7afb      	ldrb	r3, [r7, #11]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d16b      	bne.n	800c5a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3314      	adds	r3, #20
 800c4d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d156      	bne.n	800c58a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	689a      	ldr	r2, [r3, #8]
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d914      	bls.n	800c512 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	689a      	ldr	r2, [r3, #8]
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	1ad2      	subs	r2, r2, r3
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 ff19 	bl	800d336 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c504:	2300      	movs	r3, #0
 800c506:	2200      	movs	r2, #0
 800c508:	2100      	movs	r1, #0
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f001 f992 	bl	800d834 <USBD_LL_PrepareReceive>
 800c510:	e03b      	b.n	800c58a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	68da      	ldr	r2, [r3, #12]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d11c      	bne.n	800c558 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c526:	429a      	cmp	r2, r3
 800c528:	d316      	bcc.n	800c558 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c534:	429a      	cmp	r2, r3
 800c536:	d20f      	bcs.n	800c558 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c538:	2200      	movs	r2, #0
 800c53a:	2100      	movs	r1, #0
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 fefa 	bl	800d336 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c54a:	2300      	movs	r3, #0
 800c54c:	2200      	movs	r2, #0
 800c54e:	2100      	movs	r1, #0
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f001 f96f 	bl	800d834 <USBD_LL_PrepareReceive>
 800c556:	e018      	b.n	800c58a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b03      	cmp	r3, #3
 800c562:	d10b      	bne.n	800c57c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c57c:	2180      	movs	r1, #128	; 0x80
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f001 f8ae 	bl	800d6e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f000 ff28 	bl	800d3da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c590:	2b01      	cmp	r3, #1
 800c592:	d122      	bne.n	800c5da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f7ff fe99 	bl	800c2cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c5a2:	e01a      	b.n	800c5da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d114      	bne.n	800c5da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00e      	beq.n	800c5da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	7afa      	ldrb	r2, [r7, #11]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	4798      	blx	r3
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	e000      	b.n	800c5dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3718      	adds	r7, #24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	e02a      	b.n	800c66e <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d009      	beq.n	800c638 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	6852      	ldr	r2, [r2, #4]
 800c630:	b2d2      	uxtb	r2, r2
 800c632:	4611      	mov	r1, r2
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c638:	2340      	movs	r3, #64	; 0x40
 800c63a:	2200      	movs	r2, #0
 800c63c:	2100      	movs	r1, #0
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 f809 	bl	800d656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2240      	movs	r2, #64	; 0x40
 800c650:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c654:	2340      	movs	r3, #64	; 0x40
 800c656:	2200      	movs	r2, #0
 800c658:	2180      	movs	r1, #128	; 0x80
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fffb 	bl	800d656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2240      	movs	r2, #64	; 0x40
 800c66a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	78fa      	ldrb	r2, [r7, #3]
 800c686:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	bc80      	pop	{r7}
 800c692:	4770      	bx	lr

0800c694 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bc80      	pop	{r7}
 800c6bc:	4770      	bx	lr

0800c6be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d106      	bne.n	800c6e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc80      	pop	{r7}
 800c6ea:	4770      	bx	lr

0800c6ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c6fe:	2303      	movs	r3, #3
 800c700:	e012      	b.n	800c728 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d10b      	bne.n	800c726 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d005      	beq.n	800c726 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c720:	69db      	ldr	r3, [r3, #28]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	3301      	adds	r3, #1
 800c746:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c74e:	8a3b      	ldrh	r3, [r7, #16]
 800c750:	021b      	lsls	r3, r3, #8
 800c752:	b21a      	sxth	r2, r3
 800c754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c758:	4313      	orrs	r3, r2
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c75e:	89fb      	ldrh	r3, [r7, #14]
}
 800c760:	4618      	mov	r0, r3
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	bc80      	pop	{r7}
 800c768:	4770      	bx	lr
	...

0800c76c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c782:	2b40      	cmp	r3, #64	; 0x40
 800c784:	d005      	beq.n	800c792 <USBD_StdDevReq+0x26>
 800c786:	2b40      	cmp	r3, #64	; 0x40
 800c788:	d853      	bhi.n	800c832 <USBD_StdDevReq+0xc6>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <USBD_StdDevReq+0x3a>
 800c78e:	2b20      	cmp	r3, #32
 800c790:	d14f      	bne.n	800c832 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	4798      	blx	r3
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a4:	e04a      	b.n	800c83c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	785b      	ldrb	r3, [r3, #1]
 800c7aa:	2b09      	cmp	r3, #9
 800c7ac:	d83b      	bhi.n	800c826 <USBD_StdDevReq+0xba>
 800c7ae:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <USBD_StdDevReq+0x48>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c809 	.word	0x0800c809
 800c7b8:	0800c81d 	.word	0x0800c81d
 800c7bc:	0800c827 	.word	0x0800c827
 800c7c0:	0800c813 	.word	0x0800c813
 800c7c4:	0800c827 	.word	0x0800c827
 800c7c8:	0800c7e7 	.word	0x0800c7e7
 800c7cc:	0800c7dd 	.word	0x0800c7dd
 800c7d0:	0800c827 	.word	0x0800c827
 800c7d4:	0800c7ff 	.word	0x0800c7ff
 800c7d8:	0800c7f1 	.word	0x0800c7f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f9de 	bl	800cba0 <USBD_GetDescriptor>
          break;
 800c7e4:	e024      	b.n	800c830 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fb55 	bl	800ce98 <USBD_SetAddress>
          break;
 800c7ee:	e01f      	b.n	800c830 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fb94 	bl	800cf20 <USBD_SetConfig>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
          break;
 800c7fc:	e018      	b.n	800c830 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fc33 	bl	800d06c <USBD_GetConfig>
          break;
 800c806:	e013      	b.n	800c830 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fc64 	bl	800d0d8 <USBD_GetStatus>
          break;
 800c810:	e00e      	b.n	800c830 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fc93 	bl	800d140 <USBD_SetFeature>
          break;
 800c81a:	e009      	b.n	800c830 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fca2 	bl	800d168 <USBD_ClrFeature>
          break;
 800c824:	e004      	b.n	800c830 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fcf9 	bl	800d220 <USBD_CtlError>
          break;
 800c82e:	bf00      	nop
      }
      break;
 800c830:	e004      	b.n	800c83c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fcf3 	bl	800d220 <USBD_CtlError>
      break;
 800c83a:	bf00      	nop
  }

  return ret;
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop

0800c848 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c85e:	2b40      	cmp	r3, #64	; 0x40
 800c860:	d005      	beq.n	800c86e <USBD_StdItfReq+0x26>
 800c862:	2b40      	cmp	r3, #64	; 0x40
 800c864:	d82f      	bhi.n	800c8c6 <USBD_StdItfReq+0x7e>
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <USBD_StdItfReq+0x26>
 800c86a:	2b20      	cmp	r3, #32
 800c86c:	d12b      	bne.n	800c8c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c874:	b2db      	uxtb	r3, r3
 800c876:	3b01      	subs	r3, #1
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d81d      	bhi.n	800c8b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	889b      	ldrh	r3, [r3, #4]
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b0f      	cmp	r3, #15
 800c884:	d813      	bhi.n	800c8ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	4798      	blx	r3
 800c894:	4603      	mov	r3, r0
 800c896:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	88db      	ldrh	r3, [r3, #6]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d110      	bne.n	800c8c2 <USBD_StdItfReq+0x7a>
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10d      	bne.n	800c8c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fd84 	bl	800d3b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c8ac:	e009      	b.n	800c8c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 fcb5 	bl	800d220 <USBD_CtlError>
          break;
 800c8b6:	e004      	b.n	800c8c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fcb0 	bl	800d220 <USBD_CtlError>
          break;
 800c8c0:	e000      	b.n	800c8c4 <USBD_StdItfReq+0x7c>
          break;
 800c8c2:	bf00      	nop
      }
      break;
 800c8c4:	e004      	b.n	800c8d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fca9 	bl	800d220 <USBD_CtlError>
      break;
 800c8ce:	bf00      	nop
  }

  return ret;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	889b      	ldrh	r3, [r3, #4]
 800c8ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8f6:	2b40      	cmp	r3, #64	; 0x40
 800c8f8:	d007      	beq.n	800c90a <USBD_StdEPReq+0x30>
 800c8fa:	2b40      	cmp	r3, #64	; 0x40
 800c8fc:	f200 8145 	bhi.w	800cb8a <USBD_StdEPReq+0x2b0>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00c      	beq.n	800c91e <USBD_StdEPReq+0x44>
 800c904:	2b20      	cmp	r3, #32
 800c906:	f040 8140 	bne.w	800cb8a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	4798      	blx	r3
 800c918:	4603      	mov	r3, r0
 800c91a:	73fb      	strb	r3, [r7, #15]
      break;
 800c91c:	e13a      	b.n	800cb94 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	785b      	ldrb	r3, [r3, #1]
 800c922:	2b03      	cmp	r3, #3
 800c924:	d007      	beq.n	800c936 <USBD_StdEPReq+0x5c>
 800c926:	2b03      	cmp	r3, #3
 800c928:	f300 8129 	bgt.w	800cb7e <USBD_StdEPReq+0x2a4>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d07f      	beq.n	800ca30 <USBD_StdEPReq+0x156>
 800c930:	2b01      	cmp	r3, #1
 800c932:	d03c      	beq.n	800c9ae <USBD_StdEPReq+0xd4>
 800c934:	e123      	b.n	800cb7e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d002      	beq.n	800c948 <USBD_StdEPReq+0x6e>
 800c942:	2b03      	cmp	r3, #3
 800c944:	d016      	beq.n	800c974 <USBD_StdEPReq+0x9a>
 800c946:	e02c      	b.n	800c9a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00d      	beq.n	800c96a <USBD_StdEPReq+0x90>
 800c94e:	7bbb      	ldrb	r3, [r7, #14]
 800c950:	2b80      	cmp	r3, #128	; 0x80
 800c952:	d00a      	beq.n	800c96a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fec1 	bl	800d6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c95e:	2180      	movs	r1, #128	; 0x80
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 febd 	bl	800d6e0 <USBD_LL_StallEP>
 800c966:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c968:	e020      	b.n	800c9ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fc57 	bl	800d220 <USBD_CtlError>
              break;
 800c972:	e01b      	b.n	800c9ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	885b      	ldrh	r3, [r3, #2]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10e      	bne.n	800c99a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00b      	beq.n	800c99a <USBD_StdEPReq+0xc0>
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	2b80      	cmp	r3, #128	; 0x80
 800c986:	d008      	beq.n	800c99a <USBD_StdEPReq+0xc0>
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	88db      	ldrh	r3, [r3, #6]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d104      	bne.n	800c99a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	4619      	mov	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fea3 	bl	800d6e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fd0a 	bl	800d3b4 <USBD_CtlSendStatus>

              break;
 800c9a0:	e004      	b.n	800c9ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fc3b 	bl	800d220 <USBD_CtlError>
              break;
 800c9aa:	bf00      	nop
          }
          break;
 800c9ac:	e0ec      	b.n	800cb88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d002      	beq.n	800c9c0 <USBD_StdEPReq+0xe6>
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d016      	beq.n	800c9ec <USBD_StdEPReq+0x112>
 800c9be:	e030      	b.n	800ca22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9c0:	7bbb      	ldrb	r3, [r7, #14]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00d      	beq.n	800c9e2 <USBD_StdEPReq+0x108>
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	2b80      	cmp	r3, #128	; 0x80
 800c9ca:	d00a      	beq.n	800c9e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fe85 	bl	800d6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9d6:	2180      	movs	r1, #128	; 0x80
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fe81 	bl	800d6e0 <USBD_LL_StallEP>
 800c9de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9e0:	e025      	b.n	800ca2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fc1b 	bl	800d220 <USBD_CtlError>
              break;
 800c9ea:	e020      	b.n	800ca2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	885b      	ldrh	r3, [r3, #2]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d11b      	bne.n	800ca2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d004      	beq.n	800ca08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ca00:	4619      	mov	r1, r3
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fe8b 	bl	800d71e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fcd3 	bl	800d3b4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	4798      	blx	r3
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ca20:	e004      	b.n	800ca2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fbfb 	bl	800d220 <USBD_CtlError>
              break;
 800ca2a:	e000      	b.n	800ca2e <USBD_StdEPReq+0x154>
              break;
 800ca2c:	bf00      	nop
          }
          break;
 800ca2e:	e0ab      	b.n	800cb88 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d002      	beq.n	800ca42 <USBD_StdEPReq+0x168>
 800ca3c:	2b03      	cmp	r3, #3
 800ca3e:	d032      	beq.n	800caa6 <USBD_StdEPReq+0x1cc>
 800ca40:	e097      	b.n	800cb72 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca42:	7bbb      	ldrb	r3, [r7, #14]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d007      	beq.n	800ca58 <USBD_StdEPReq+0x17e>
 800ca48:	7bbb      	ldrb	r3, [r7, #14]
 800ca4a:	2b80      	cmp	r3, #128	; 0x80
 800ca4c:	d004      	beq.n	800ca58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fbe5 	bl	800d220 <USBD_CtlError>
                break;
 800ca56:	e091      	b.n	800cb7c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	da0b      	bge.n	800ca78 <USBD_StdEPReq+0x19e>
 800ca60:	7bbb      	ldrb	r3, [r7, #14]
 800ca62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca66:	4613      	mov	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	4413      	add	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	3310      	adds	r3, #16
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	4413      	add	r3, r2
 800ca74:	3304      	adds	r3, #4
 800ca76:	e00b      	b.n	800ca90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca78:	7bbb      	ldrb	r3, [r7, #14]
 800ca7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	3304      	adds	r3, #4
 800ca90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fc2e 	bl	800d300 <USBD_CtlSendData>
              break;
 800caa4:	e06a      	b.n	800cb7c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800caa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	da11      	bge.n	800cad2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800caae:	7bbb      	ldrb	r3, [r7, #14]
 800cab0:	f003 020f 	and.w	r2, r3, #15
 800cab4:	6879      	ldr	r1, [r7, #4]
 800cab6:	4613      	mov	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	440b      	add	r3, r1
 800cac0:	3324      	adds	r3, #36	; 0x24
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d117      	bne.n	800caf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fba8 	bl	800d220 <USBD_CtlError>
                  break;
 800cad0:	e054      	b.n	800cb7c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	f003 020f 	and.w	r2, r3, #15
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	440b      	add	r3, r1
 800cae4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d104      	bne.n	800caf8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fb95 	bl	800d220 <USBD_CtlError>
                  break;
 800caf6:	e041      	b.n	800cb7c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	da0b      	bge.n	800cb18 <USBD_StdEPReq+0x23e>
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
 800cb02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb06:	4613      	mov	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	3310      	adds	r3, #16
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	4413      	add	r3, r2
 800cb14:	3304      	adds	r3, #4
 800cb16:	e00b      	b.n	800cb30 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb1e:	4613      	mov	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	3304      	adds	r3, #4
 800cb30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb32:	7bbb      	ldrb	r3, [r7, #14]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <USBD_StdEPReq+0x264>
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	2b80      	cmp	r3, #128	; 0x80
 800cb3c:	d103      	bne.n	800cb46 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2200      	movs	r2, #0
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	e00e      	b.n	800cb64 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fe06 	bl	800d75c <USBD_LL_IsStallEP>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	e002      	b.n	800cb64 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	2202      	movs	r2, #2
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 fbc8 	bl	800d300 <USBD_CtlSendData>
              break;
 800cb70:	e004      	b.n	800cb7c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fb53 	bl	800d220 <USBD_CtlError>
              break;
 800cb7a:	bf00      	nop
          }
          break;
 800cb7c:	e004      	b.n	800cb88 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fb4d 	bl	800d220 <USBD_CtlError>
          break;
 800cb86:	bf00      	nop
      }
      break;
 800cb88:	e004      	b.n	800cb94 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fb47 	bl	800d220 <USBD_CtlError>
      break;
 800cb92:	bf00      	nop
  }

  return ret;
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
	...

0800cba0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	885b      	ldrh	r3, [r3, #2]
 800cbba:	0a1b      	lsrs	r3, r3, #8
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	2b06      	cmp	r3, #6
 800cbc2:	f200 813b 	bhi.w	800ce3c <USBD_GetDescriptor+0x29c>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <USBD_GetDescriptor+0x2c>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbe9 	.word	0x0800cbe9
 800cbd0:	0800cc01 	.word	0x0800cc01
 800cbd4:	0800cc41 	.word	0x0800cc41
 800cbd8:	0800ce3d 	.word	0x0800ce3d
 800cbdc:	0800ce3d 	.word	0x0800ce3d
 800cbe0:	0800cddd 	.word	0x0800cddd
 800cbe4:	0800ce09 	.word	0x0800ce09
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	7c12      	ldrb	r2, [r2, #16]
 800cbf4:	f107 0108 	add.w	r1, r7, #8
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	4798      	blx	r3
 800cbfc:	60f8      	str	r0, [r7, #12]
      break;
 800cbfe:	e125      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	7c1b      	ldrb	r3, [r3, #16]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10d      	bne.n	800cc24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc10:	f107 0208 	add.w	r2, r7, #8
 800cc14:	4610      	mov	r0, r2
 800cc16:	4798      	blx	r3
 800cc18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	2202      	movs	r2, #2
 800cc20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc22:	e113      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	f107 0208 	add.w	r2, r7, #8
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
 800cc34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	701a      	strb	r2, [r3, #0]
      break;
 800cc3e:	e105      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	885b      	ldrh	r3, [r3, #2]
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b05      	cmp	r3, #5
 800cc48:	f200 80ac 	bhi.w	800cda4 <USBD_GetDescriptor+0x204>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <USBD_GetDescriptor+0xb4>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc6d 	.word	0x0800cc6d
 800cc58:	0800cca1 	.word	0x0800cca1
 800cc5c:	0800ccd5 	.word	0x0800ccd5
 800cc60:	0800cd09 	.word	0x0800cd09
 800cc64:	0800cd3d 	.word	0x0800cd3d
 800cc68:	0800cd71 	.word	0x0800cd71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	7c12      	ldrb	r2, [r2, #16]
 800cc84:	f107 0108 	add.w	r1, r7, #8
 800cc88:	4610      	mov	r0, r2
 800cc8a:	4798      	blx	r3
 800cc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc8e:	e0a4      	b.n	800cdda <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fac4 	bl	800d220 <USBD_CtlError>
            err++;
 800cc98:	7afb      	ldrb	r3, [r7, #11]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	72fb      	strb	r3, [r7, #11]
          break;
 800cc9e:	e09c      	b.n	800cdda <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00b      	beq.n	800ccc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	7c12      	ldrb	r2, [r2, #16]
 800ccb8:	f107 0108 	add.w	r1, r7, #8
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	4798      	blx	r3
 800ccc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccc2:	e08a      	b.n	800cdda <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 faaa 	bl	800d220 <USBD_CtlError>
            err++;
 800cccc:	7afb      	ldrb	r3, [r7, #11]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	72fb      	strb	r3, [r7, #11]
          break;
 800ccd2:	e082      	b.n	800cdda <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00b      	beq.n	800ccf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	7c12      	ldrb	r2, [r2, #16]
 800ccec:	f107 0108 	add.w	r1, r7, #8
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4798      	blx	r3
 800ccf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccf6:	e070      	b.n	800cdda <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fa90 	bl	800d220 <USBD_CtlError>
            err++;
 800cd00:	7afb      	ldrb	r3, [r7, #11]
 800cd02:	3301      	adds	r3, #1
 800cd04:	72fb      	strb	r3, [r7, #11]
          break;
 800cd06:	e068      	b.n	800cdda <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	7c12      	ldrb	r2, [r2, #16]
 800cd20:	f107 0108 	add.w	r1, r7, #8
 800cd24:	4610      	mov	r0, r2
 800cd26:	4798      	blx	r3
 800cd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd2a:	e056      	b.n	800cdda <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fa76 	bl	800d220 <USBD_CtlError>
            err++;
 800cd34:	7afb      	ldrb	r3, [r7, #11]
 800cd36:	3301      	adds	r3, #1
 800cd38:	72fb      	strb	r3, [r7, #11]
          break;
 800cd3a:	e04e      	b.n	800cdda <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00b      	beq.n	800cd60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd4e:	695b      	ldr	r3, [r3, #20]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	7c12      	ldrb	r2, [r2, #16]
 800cd54:	f107 0108 	add.w	r1, r7, #8
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4798      	blx	r3
 800cd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd5e:	e03c      	b.n	800cdda <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fa5c 	bl	800d220 <USBD_CtlError>
            err++;
 800cd68:	7afb      	ldrb	r3, [r7, #11]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd6e:	e034      	b.n	800cdda <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00b      	beq.n	800cd94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	7c12      	ldrb	r2, [r2, #16]
 800cd88:	f107 0108 	add.w	r1, r7, #8
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	4798      	blx	r3
 800cd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd92:	e022      	b.n	800cdda <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fa42 	bl	800d220 <USBD_CtlError>
            err++;
 800cd9c:	7afb      	ldrb	r3, [r7, #11]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	72fb      	strb	r3, [r7, #11]
          break;
 800cda2:	e01a      	b.n	800cdda <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00c      	beq.n	800cdca <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	8852      	ldrh	r2, [r2, #2]
 800cdbc:	b2d1      	uxtb	r1, r2
 800cdbe:	f107 0208 	add.w	r2, r7, #8
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	4798      	blx	r3
 800cdc6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800cdc8:	e006      	b.n	800cdd8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fa27 	bl	800d220 <USBD_CtlError>
            err++;
 800cdd2:	7afb      	ldrb	r3, [r7, #11]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	72fb      	strb	r3, [r7, #11]
          break;
 800cdd8:	bf00      	nop
      }
      break;
 800cdda:	e037      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7c1b      	ldrb	r3, [r3, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d109      	bne.n	800cdf8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdec:	f107 0208 	add.w	r2, r7, #8
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
 800cdf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdf6:	e029      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fa10 	bl	800d220 <USBD_CtlError>
        err++;
 800ce00:	7afb      	ldrb	r3, [r7, #11]
 800ce02:	3301      	adds	r3, #1
 800ce04:	72fb      	strb	r3, [r7, #11]
      break;
 800ce06:	e021      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7c1b      	ldrb	r3, [r3, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10d      	bne.n	800ce2c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce18:	f107 0208 	add.w	r2, r7, #8
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	4798      	blx	r3
 800ce20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	3301      	adds	r3, #1
 800ce26:	2207      	movs	r2, #7
 800ce28:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce2a:	e00f      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f9f6 	bl	800d220 <USBD_CtlError>
        err++;
 800ce34:	7afb      	ldrb	r3, [r7, #11]
 800ce36:	3301      	adds	r3, #1
 800ce38:	72fb      	strb	r3, [r7, #11]
      break;
 800ce3a:	e007      	b.n	800ce4c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f9ee 	bl	800d220 <USBD_CtlError>
      err++;
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	3301      	adds	r3, #1
 800ce48:	72fb      	strb	r3, [r7, #11]
      break;
 800ce4a:	bf00      	nop
  }

  if (err != 0U)
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d11e      	bne.n	800ce90 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	88db      	ldrh	r3, [r3, #6]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d016      	beq.n	800ce88 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800ce5a:	893b      	ldrh	r3, [r7, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00e      	beq.n	800ce7e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	88da      	ldrh	r2, [r3, #6]
 800ce64:	893b      	ldrh	r3, [r7, #8]
 800ce66:	4293      	cmp	r3, r2
 800ce68:	bf28      	it	cs
 800ce6a:	4613      	movcs	r3, r2
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce70:	893b      	ldrh	r3, [r7, #8]
 800ce72:	461a      	mov	r2, r3
 800ce74:	68f9      	ldr	r1, [r7, #12]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fa42 	bl	800d300 <USBD_CtlSendData>
 800ce7c:	e009      	b.n	800ce92 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f9cd 	bl	800d220 <USBD_CtlError>
 800ce86:	e004      	b.n	800ce92 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fa93 	bl	800d3b4 <USBD_CtlSendStatus>
 800ce8e:	e000      	b.n	800ce92 <USBD_GetDescriptor+0x2f2>
    return;
 800ce90:	bf00      	nop
  }
}
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	889b      	ldrh	r3, [r3, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d131      	bne.n	800cf0e <USBD_SetAddress+0x76>
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	88db      	ldrh	r3, [r3, #6]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d12d      	bne.n	800cf0e <USBD_SetAddress+0x76>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	885b      	ldrh	r3, [r3, #2]
 800ceb6:	2b7f      	cmp	r3, #127	; 0x7f
 800ceb8:	d829      	bhi.n	800cf0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	885b      	ldrh	r3, [r3, #2]
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d104      	bne.n	800cedc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f9a3 	bl	800d220 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceda:	e01d      	b.n	800cf18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	7bfa      	ldrb	r2, [r7, #15]
 800cee0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 fc63 	bl	800d7b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fa60 	bl	800d3b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d004      	beq.n	800cf04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2202      	movs	r2, #2
 800cefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf02:	e009      	b.n	800cf18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf0c:	e004      	b.n	800cf18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf0e:	6839      	ldr	r1, [r7, #0]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f985 	bl	800d220 <USBD_CtlError>
  }
}
 800cf16:	bf00      	nop
 800cf18:	bf00      	nop
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	885b      	ldrh	r3, [r3, #2]
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	4b4c      	ldr	r3, [pc, #304]	; (800d068 <USBD_SetConfig+0x148>)
 800cf36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf38:	4b4b      	ldr	r3, [pc, #300]	; (800d068 <USBD_SetConfig+0x148>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d905      	bls.n	800cf4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f96c 	bl	800d220 <USBD_CtlError>
    return USBD_FAIL;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e088      	b.n	800d05e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d002      	beq.n	800cf5e <USBD_SetConfig+0x3e>
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d025      	beq.n	800cfa8 <USBD_SetConfig+0x88>
 800cf5c:	e071      	b.n	800d042 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf5e:	4b42      	ldr	r3, [pc, #264]	; (800d068 <USBD_SetConfig+0x148>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d01c      	beq.n	800cfa0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf66:	4b40      	ldr	r3, [pc, #256]	; (800d068 <USBD_SetConfig+0x148>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf70:	4b3d      	ldr	r3, [pc, #244]	; (800d068 <USBD_SetConfig+0x148>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff f9b2 	bl	800c2e0 <USBD_SetClassConfig>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d004      	beq.n	800cf90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f949 	bl	800d220 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf8e:	e065      	b.n	800d05c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fa0f 	bl	800d3b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2203      	movs	r2, #3
 800cf9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf9e:	e05d      	b.n	800d05c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fa07 	bl	800d3b4 <USBD_CtlSendStatus>
      break;
 800cfa6:	e059      	b.n	800d05c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cfa8:	4b2f      	ldr	r3, [pc, #188]	; (800d068 <USBD_SetConfig+0x148>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d112      	bne.n	800cfd6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cfb8:	4b2b      	ldr	r3, [pc, #172]	; (800d068 <USBD_SetConfig+0x148>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfc2:	4b29      	ldr	r3, [pc, #164]	; (800d068 <USBD_SetConfig+0x148>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7ff f9a5 	bl	800c318 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f9f0 	bl	800d3b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfd4:	e042      	b.n	800d05c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cfd6:	4b24      	ldr	r3, [pc, #144]	; (800d068 <USBD_SetConfig+0x148>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d02a      	beq.n	800d03a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff f993 	bl	800c318 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cff2:	4b1d      	ldr	r3, [pc, #116]	; (800d068 <USBD_SetConfig+0x148>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	461a      	mov	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cffc:	4b1a      	ldr	r3, [pc, #104]	; (800d068 <USBD_SetConfig+0x148>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff f96c 	bl	800c2e0 <USBD_SetClassConfig>
 800d008:	4603      	mov	r3, r0
 800d00a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00f      	beq.n	800d032 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f903 	bl	800d220 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	4619      	mov	r1, r3
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff f978 	bl	800c318 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2202      	movs	r2, #2
 800d02c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d030:	e014      	b.n	800d05c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 f9be 	bl	800d3b4 <USBD_CtlSendStatus>
      break;
 800d038:	e010      	b.n	800d05c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f9ba 	bl	800d3b4 <USBD_CtlSendStatus>
      break;
 800d040:	e00c      	b.n	800d05c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f8eb 	bl	800d220 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d04a:	4b07      	ldr	r3, [pc, #28]	; (800d068 <USBD_SetConfig+0x148>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	4619      	mov	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff f961 	bl	800c318 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d056:	2303      	movs	r3, #3
 800d058:	73fb      	strb	r3, [r7, #15]
      break;
 800d05a:	bf00      	nop
  }

  return ret;
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20001310 	.word	0x20001310

0800d06c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	88db      	ldrh	r3, [r3, #6]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d004      	beq.n	800d088 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f8cd 	bl	800d220 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d086:	e023      	b.n	800d0d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b02      	cmp	r3, #2
 800d092:	dc02      	bgt.n	800d09a <USBD_GetConfig+0x2e>
 800d094:	2b00      	cmp	r3, #0
 800d096:	dc03      	bgt.n	800d0a0 <USBD_GetConfig+0x34>
 800d098:	e015      	b.n	800d0c6 <USBD_GetConfig+0x5a>
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d00b      	beq.n	800d0b6 <USBD_GetConfig+0x4a>
 800d09e:	e012      	b.n	800d0c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f926 	bl	800d300 <USBD_CtlSendData>
        break;
 800d0b4:	e00c      	b.n	800d0d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f91e 	bl	800d300 <USBD_CtlSendData>
        break;
 800d0c4:	e004      	b.n	800d0d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f8a9 	bl	800d220 <USBD_CtlError>
        break;
 800d0ce:	bf00      	nop
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d81e      	bhi.n	800d12e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	88db      	ldrh	r3, [r3, #6]
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d004      	beq.n	800d102 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 f890 	bl	800d220 <USBD_CtlError>
        break;
 800d100:	e01a      	b.n	800d138 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d005      	beq.n	800d11e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f043 0202 	orr.w	r2, r3, #2
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	330c      	adds	r3, #12
 800d122:	2202      	movs	r2, #2
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f8ea 	bl	800d300 <USBD_CtlSendData>
      break;
 800d12c:	e004      	b.n	800d138 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f875 	bl	800d220 <USBD_CtlError>
      break;
 800d136:	bf00      	nop
  }
}
 800d138:	bf00      	nop
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	885b      	ldrh	r3, [r3, #2]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d106      	bne.n	800d160 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f92a 	bl	800d3b4 <USBD_CtlSendStatus>
  }
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	3b01      	subs	r3, #1
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d80b      	bhi.n	800d198 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	885b      	ldrh	r3, [r3, #2]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d10c      	bne.n	800d1a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f90f 	bl	800d3b4 <USBD_CtlSendStatus>
      }
      break;
 800d196:	e004      	b.n	800d1a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f840 	bl	800d220 <USBD_CtlError>
      break;
 800d1a0:	e000      	b.n	800d1a4 <USBD_ClrFeature+0x3c>
      break;
 800d1a2:	bf00      	nop
  }
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	781a      	ldrb	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	781a      	ldrb	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f7ff faaa 	bl	800c730 <SWAPBYTE>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	461a      	mov	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f7ff fa9d 	bl	800c730 <SWAPBYTE>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3301      	adds	r3, #1
 800d202:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	3301      	adds	r3, #1
 800d208:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7ff fa90 	bl	800c730 <SWAPBYTE>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	80da      	strh	r2, [r3, #6]
}
 800d218:	bf00      	nop
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d22a:	2180      	movs	r1, #128	; 0x80
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fa57 	bl	800d6e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d232:	2100      	movs	r1, #0
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa53 	bl	800d6e0 <USBD_LL_StallEP>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b086      	sub	sp, #24
 800d246:	af00      	add	r7, sp, #0
 800d248:	60f8      	str	r0, [r7, #12]
 800d24a:	60b9      	str	r1, [r7, #8]
 800d24c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d24e:	2300      	movs	r3, #0
 800d250:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d036      	beq.n	800d2c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d25c:	6938      	ldr	r0, [r7, #16]
 800d25e:	f000 f836 	bl	800d2ce <USBD_GetLen>
 800d262:	4603      	mov	r3, r0
 800d264:	3301      	adds	r3, #1
 800d266:	b29b      	uxth	r3, r3
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d270:	7dfb      	ldrb	r3, [r7, #23]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	4413      	add	r3, r2
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	7812      	ldrb	r2, [r2, #0]
 800d27a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	3301      	adds	r3, #1
 800d280:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	4413      	add	r3, r2
 800d288:	2203      	movs	r2, #3
 800d28a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d28c:	7dfb      	ldrb	r3, [r7, #23]
 800d28e:	3301      	adds	r3, #1
 800d290:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d292:	e013      	b.n	800d2bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	4413      	add	r3, r2
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	7812      	ldrb	r2, [r2, #0]
 800d29e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	613b      	str	r3, [r7, #16]
    idx++;
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2b6:	7dfb      	ldrb	r3, [r7, #23]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e7      	bne.n	800d294 <USBD_GetString+0x52>
 800d2c4:	e000      	b.n	800d2c8 <USBD_GetString+0x86>
    return;
 800d2c6:	bf00      	nop
  }
}
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b085      	sub	sp, #20
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2de:	e005      	b.n	800d2ec <USBD_GetLen+0x1e>
  {
    len++;
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1f5      	bne.n	800d2e0 <USBD_GetLen+0x12>
  }

  return len;
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bc80      	pop	{r7}
 800d2fe:	4770      	bx	lr

0800d300 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2202      	movs	r2, #2
 800d310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	2100      	movs	r1, #0
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f000 fa63 	bl	800d7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	60f8      	str	r0, [r7, #12]
 800d33e:	60b9      	str	r1, [r7, #8]
 800d340:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	2100      	movs	r1, #0
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 fa52 	bl	800d7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2203      	movs	r2, #3
 800d368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68ba      	ldr	r2, [r7, #8]
 800d380:	2100      	movs	r1, #0
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f000 fa56 	bl	800d834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d392:	b580      	push	{r7, lr}
 800d394:	b084      	sub	sp, #16
 800d396:	af00      	add	r7, sp, #0
 800d398:	60f8      	str	r0, [r7, #12]
 800d39a:	60b9      	str	r1, [r7, #8]
 800d39c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f000 fa45 	bl	800d834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2204      	movs	r2, #4
 800d3c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fa11 	bl	800d7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2205      	movs	r2, #5
 800d3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fa1f 	bl	800d834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d414:	4619      	mov	r1, r3
 800d416:	4610      	mov	r0, r2
 800d418:	f7fe ff96 	bl	800c348 <USBD_LL_SetupStage>
}
 800d41c:	bf00      	nop
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d436:	78fa      	ldrb	r2, [r7, #3]
 800d438:	6879      	ldr	r1, [r7, #4]
 800d43a:	4613      	mov	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4413      	add	r3, r2
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	440b      	add	r3, r1
 800d444:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	78fb      	ldrb	r3, [r7, #3]
 800d44c:	4619      	mov	r1, r3
 800d44e:	f7fe ffd0 	bl	800c3f2 <USBD_LL_DataOutStage>
}
 800d452:	bf00      	nop
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b082      	sub	sp, #8
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	460b      	mov	r3, r1
 800d464:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d46c:	78fa      	ldrb	r2, [r7, #3]
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	4613      	mov	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	4413      	add	r3, r2
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	440b      	add	r3, r1
 800d47a:	333c      	adds	r3, #60	; 0x3c
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	78fb      	ldrb	r3, [r7, #3]
 800d480:	4619      	mov	r1, r3
 800d482:	f7ff f819 	bl	800c4b8 <USBD_LL_DataInStage>
}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b082      	sub	sp, #8
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff f925 	bl	800c6ec <USBD_LL_SOF>
}
 800d4a2:	bf00      	nop
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d102      	bne.n	800d4c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800d4be:	2301      	movs	r3, #1
 800d4c0:	73fb      	strb	r3, [r7, #15]
 800d4c2:	e001      	b.n	800d4c8 <HAL_PCD_ResetCallback+0x1e>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 800d4c4:	f7f4 fb3e 	bl	8001b44 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d4ce:	7bfa      	ldrb	r2, [r7, #15]
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7ff f8cf 	bl	800c676 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff f880 	bl	800c5e4 <USBD_LL_Reset>
}
 800d4e4:	bf00      	nop
 800d4e6:	3710      	adds	r7, #16
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff f8ca 	bl	800c694 <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff f8d1 	bl	800c6be <USBD_LL_Resume>
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800d52c:	4b36      	ldr	r3, [pc, #216]	; (800d608 <USBD_LL_Init+0xe4>)
 800d52e:	4a37      	ldr	r2, [pc, #220]	; (800d60c <USBD_LL_Init+0xe8>)
 800d530:	601a      	str	r2, [r3, #0]
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d161      	bne.n	800d5fe <USBD_LL_Init+0xda>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800d53a:	4b33      	ldr	r3, [pc, #204]	; (800d608 <USBD_LL_Init+0xe4>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    pdev->pData = hpcd_USB_OTG_PTR;
 800d544:	4b30      	ldr	r3, [pc, #192]	; (800d608 <USBD_LL_Init+0xe4>)
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

    /* @see HAL_PCD_Init() usb_otg.c generated by cube **/

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/
 800d54e:	2340      	movs	r3, #64	; 0x40
 800d550:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d558:	89fb      	ldrh	r3, [r7, #14]
 800d55a:	2200      	movs	r2, #0
 800d55c:	2100      	movs	r1, #0
 800d55e:	f7f8 fb90 	bl	8005c82 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800d562:	89fb      	ldrh	r3, [r7, #14]
 800d564:	3340      	adds	r3, #64	; 0x40
 800d566:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d56e:	89fb      	ldrh	r3, [r7, #14]
 800d570:	2200      	movs	r2, #0
 800d572:	2180      	movs	r1, #128	; 0x80
 800d574:	f7f8 fb85 	bl	8005c82 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800d578:	89fb      	ldrh	r3, [r7, #14]
 800d57a:	3340      	adds	r3, #64	; 0x40
 800d57c:	81fb      	strh	r3, [r7, #14]
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_MOUSE_IN_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d584:	4b22      	ldr	r3, [pc, #136]	; (800d610 <USBD_LL_Init+0xec>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	b299      	uxth	r1, r3
 800d58a:	89fb      	ldrh	r3, [r7, #14]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f7f8 fb78 	bl	8005c82 <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 800d592:	89fb      	ldrh	r3, [r7, #14]
 800d594:	3308      	adds	r3, #8
 800d596:	81fb      	strh	r3, [r7, #14]
    pma_track += 128;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, PRNT_OUT_EP, PCD_SNG_BUF, pma_track);
    pma_track += 128;
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800d598:	2300      	movs	r3, #0
 800d59a:	737b      	strb	r3, [r7, #13]
 800d59c:	e02c      	b.n	800d5f8 <USBD_LL_Init+0xd4>
    {
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_IN_EP[i], PCD_SNG_BUF, pma_track);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d5a4:	7b7b      	ldrb	r3, [r7, #13]
 800d5a6:	4a1b      	ldr	r2, [pc, #108]	; (800d614 <USBD_LL_Init+0xf0>)
 800d5a8:	5cd3      	ldrb	r3, [r2, r3]
 800d5aa:	b299      	uxth	r1, r3
 800d5ac:	89fb      	ldrh	r3, [r7, #14]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f7f8 fb67 	bl	8005c82 <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 800d5b4:	89fb      	ldrh	r3, [r7, #14]
 800d5b6:	3330      	adds	r3, #48	; 0x30
 800d5b8:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_OUT_EP[i], PCD_SNG_BUF, pma_track);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d5c0:	7b7b      	ldrb	r3, [r7, #13]
 800d5c2:	4a15      	ldr	r2, [pc, #84]	; (800d618 <USBD_LL_Init+0xf4>)
 800d5c4:	5cd3      	ldrb	r3, [r2, r3]
 800d5c6:	b299      	uxth	r1, r3
 800d5c8:	89fb      	ldrh	r3, [r7, #14]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f7f8 fb59 	bl	8005c82 <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 800d5d0:	89fb      	ldrh	r3, [r7, #14]
 800d5d2:	3330      	adds	r3, #48	; 0x30
 800d5d4:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_CMD_EP[i], PCD_SNG_BUF, pma_track);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d5dc:	7b7b      	ldrb	r3, [r7, #13]
 800d5de:	4a0f      	ldr	r2, [pc, #60]	; (800d61c <USBD_LL_Init+0xf8>)
 800d5e0:	5cd3      	ldrb	r3, [r2, r3]
 800d5e2:	b299      	uxth	r1, r3
 800d5e4:	89fb      	ldrh	r3, [r7, #14]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f7f8 fb4b 	bl	8005c82 <HAL_PCDEx_PMAConfig>
      pma_track += 8;
 800d5ec:	89fb      	ldrh	r3, [r7, #14]
 800d5ee:	3308      	adds	r3, #8
 800d5f0:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800d5f2:	7b7b      	ldrb	r3, [r7, #13]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	737b      	strb	r3, [r7, #13]
 800d5f8:	7b7b      	ldrb	r3, [r7, #13]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d0cf      	beq.n	800d59e <USBD_LL_Init+0x7a>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20001314 	.word	0x20001314
 800d60c:	20000704 	.word	0x20000704
 800d610:	200003be 	.word	0x200003be
 800d614:	20000fc0 	.word	0x20000fc0
 800d618:	20000fc4 	.word	0x20000fc4
 800d61c:	20000fc8 	.word	0x20000fc8

0800d620 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d636:	4618      	mov	r0, r3
 800d638:	f7f6 ffad 	bl	8004596 <HAL_PCD_Start>
 800d63c:	4603      	mov	r3, r0
 800d63e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d640:	7bfb      	ldrb	r3, [r7, #15]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 f92a 	bl	800d89c <USBD_Get_USB_Status>
 800d648:	4603      	mov	r3, r0
 800d64a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	4608      	mov	r0, r1
 800d660:	4611      	mov	r1, r2
 800d662:	461a      	mov	r2, r3
 800d664:	4603      	mov	r3, r0
 800d666:	70fb      	strb	r3, [r7, #3]
 800d668:	460b      	mov	r3, r1
 800d66a:	70bb      	strb	r3, [r7, #2]
 800d66c:	4613      	mov	r3, r2
 800d66e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d67e:	78bb      	ldrb	r3, [r7, #2]
 800d680:	883a      	ldrh	r2, [r7, #0]
 800d682:	78f9      	ldrb	r1, [r7, #3]
 800d684:	f7f7 f925 	bl	80048d2 <HAL_PCD_EP_Open>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f904 	bl	800d89c <USBD_Get_USB_Status>
 800d694:	4603      	mov	r3, r0
 800d696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d698:	7bbb      	ldrb	r3, [r7, #14]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d6bc:	78fa      	ldrb	r2, [r7, #3]
 800d6be:	4611      	mov	r1, r2
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7f7 f96c 	bl	800499e <HAL_PCD_EP_Close>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 f8e5 	bl	800d89c <USBD_Get_USB_Status>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d6fa:	78fa      	ldrb	r2, [r7, #3]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7f7 fa2c 	bl	8004b5c <HAL_PCD_EP_SetStall>
 800d704:	4603      	mov	r3, r0
 800d706:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f000 f8c6 	bl	800d89c <USBD_Get_USB_Status>
 800d710:	4603      	mov	r3, r0
 800d712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d714:	7bbb      	ldrb	r3, [r7, #14]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b084      	sub	sp, #16
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
 800d726:	460b      	mov	r3, r1
 800d728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d738:	78fa      	ldrb	r2, [r7, #3]
 800d73a:	4611      	mov	r1, r2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f7 fa6d 	bl	8004c1c <HAL_PCD_EP_ClrStall>
 800d742:	4603      	mov	r3, r0
 800d744:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 f8a7 	bl	800d89c <USBD_Get_USB_Status>
 800d74e:	4603      	mov	r3, r0
 800d750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d752:	7bbb      	ldrb	r3, [r7, #14]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d76e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800d770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d774:	2b00      	cmp	r3, #0
 800d776:	da0c      	bge.n	800d792 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d778:	78fb      	ldrb	r3, [r7, #3]
 800d77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d77e:	68f9      	ldr	r1, [r7, #12]
 800d780:	1c5a      	adds	r2, r3, #1
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	00db      	lsls	r3, r3, #3
 800d78a:	440b      	add	r3, r1
 800d78c:	3302      	adds	r3, #2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	e00b      	b.n	800d7aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d792:	78fb      	ldrb	r3, [r7, #3]
 800d794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d798:	68f9      	ldr	r1, [r7, #12]
 800d79a:	4613      	mov	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	440b      	add	r3, r1
 800d7a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d7a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3714      	adds	r7, #20
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bc80      	pop	{r7}
 800d7b2:	4770      	bx	lr

0800d7b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f7 f858 	bl	8004888 <HAL_PCD_SetAddress>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f85c 	bl	800d89c <USBD_Get_USB_Status>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b086      	sub	sp, #24
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	460b      	mov	r3, r1
 800d800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d810:	7af9      	ldrb	r1, [r7, #11]
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	f7f7 f95e 	bl	8004ad6 <HAL_PCD_EP_Transmit>
 800d81a:	4603      	mov	r3, r0
 800d81c:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	4618      	mov	r0, r3
 800d822:	f000 f83b 	bl	800d89c <USBD_Get_USB_Status>
 800d826:	4603      	mov	r3, r0
 800d828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d82a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	607a      	str	r2, [r7, #4]
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	460b      	mov	r3, r1
 800d842:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800d852:	7af9      	ldrb	r1, [r7, #11]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	f7f7 f8e9 	bl	8004a2e <HAL_PCD_EP_Receive>
 800d85c:	4603      	mov	r3, r0
 800d85e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800d860:	7dfb      	ldrb	r3, [r7, #23]
 800d862:	4618      	mov	r0, r3
 800d864:	f000 f81a 	bl	800d89c <USBD_Get_USB_Status>
 800d868:	4603      	mov	r3, r0
 800d86a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d86c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3718      	adds	r7, #24
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b082      	sub	sp, #8
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	460b      	mov	r3, r1
 800d880:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800d888:	78fa      	ldrb	r2, [r7, #3]
 800d88a:	4611      	mov	r1, r2
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f7 f90b 	bl	8004aa8 <HAL_PCD_EP_GetRxCount>
 800d892:	4603      	mov	r3, r0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	2b03      	cmp	r3, #3
 800d8ae:	d817      	bhi.n	800d8e0 <USBD_Get_USB_Status+0x44>
 800d8b0:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <USBD_Get_USB_Status+0x1c>)
 800d8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b6:	bf00      	nop
 800d8b8:	0800d8c9 	.word	0x0800d8c9
 800d8bc:	0800d8cf 	.word	0x0800d8cf
 800d8c0:	0800d8d5 	.word	0x0800d8d5
 800d8c4:	0800d8db 	.word	0x0800d8db
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d8cc:	e00b      	b.n	800d8e6 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d2:	e008      	b.n	800d8e6 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d8:	e005      	b.n	800d8e6 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800d8da:	2303      	movs	r3, #3
 800d8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8de:	e002      	b.n	800d8e6 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e4:	bf00      	nop
  }
  return usb_status;
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bc80      	pop	{r7}
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop

0800d8f4 <__errno>:
 800d8f4:	4b01      	ldr	r3, [pc, #4]	; (800d8fc <__errno+0x8>)
 800d8f6:	6818      	ldr	r0, [r3, #0]
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	2000049c 	.word	0x2000049c

0800d900 <__libc_init_array>:
 800d900:	b570      	push	{r4, r5, r6, lr}
 800d902:	2600      	movs	r6, #0
 800d904:	4d0c      	ldr	r5, [pc, #48]	; (800d938 <__libc_init_array+0x38>)
 800d906:	4c0d      	ldr	r4, [pc, #52]	; (800d93c <__libc_init_array+0x3c>)
 800d908:	1b64      	subs	r4, r4, r5
 800d90a:	10a4      	asrs	r4, r4, #2
 800d90c:	42a6      	cmp	r6, r4
 800d90e:	d109      	bne.n	800d924 <__libc_init_array+0x24>
 800d910:	f000 fcca 	bl	800e2a8 <_init>
 800d914:	2600      	movs	r6, #0
 800d916:	4d0a      	ldr	r5, [pc, #40]	; (800d940 <__libc_init_array+0x40>)
 800d918:	4c0a      	ldr	r4, [pc, #40]	; (800d944 <__libc_init_array+0x44>)
 800d91a:	1b64      	subs	r4, r4, r5
 800d91c:	10a4      	asrs	r4, r4, #2
 800d91e:	42a6      	cmp	r6, r4
 800d920:	d105      	bne.n	800d92e <__libc_init_array+0x2e>
 800d922:	bd70      	pop	{r4, r5, r6, pc}
 800d924:	f855 3b04 	ldr.w	r3, [r5], #4
 800d928:	4798      	blx	r3
 800d92a:	3601      	adds	r6, #1
 800d92c:	e7ee      	b.n	800d90c <__libc_init_array+0xc>
 800d92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d932:	4798      	blx	r3
 800d934:	3601      	adds	r6, #1
 800d936:	e7f2      	b.n	800d91e <__libc_init_array+0x1e>
 800d938:	0800e7d4 	.word	0x0800e7d4
 800d93c:	0800e7d4 	.word	0x0800e7d4
 800d940:	0800e7d4 	.word	0x0800e7d4
 800d944:	0800e7d8 	.word	0x0800e7d8

0800d948 <malloc>:
 800d948:	4b02      	ldr	r3, [pc, #8]	; (800d954 <malloc+0xc>)
 800d94a:	4601      	mov	r1, r0
 800d94c:	6818      	ldr	r0, [r3, #0]
 800d94e:	f000 b889 	b.w	800da64 <_malloc_r>
 800d952:	bf00      	nop
 800d954:	2000049c 	.word	0x2000049c

0800d958 <free>:
 800d958:	4b02      	ldr	r3, [pc, #8]	; (800d964 <free+0xc>)
 800d95a:	4601      	mov	r1, r0
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	f000 b819 	b.w	800d994 <_free_r>
 800d962:	bf00      	nop
 800d964:	2000049c 	.word	0x2000049c

0800d968 <memcpy>:
 800d968:	440a      	add	r2, r1
 800d96a:	4291      	cmp	r1, r2
 800d96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d970:	d100      	bne.n	800d974 <memcpy+0xc>
 800d972:	4770      	bx	lr
 800d974:	b510      	push	{r4, lr}
 800d976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d97a:	4291      	cmp	r1, r2
 800d97c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d980:	d1f9      	bne.n	800d976 <memcpy+0xe>
 800d982:	bd10      	pop	{r4, pc}

0800d984 <memset>:
 800d984:	4603      	mov	r3, r0
 800d986:	4402      	add	r2, r0
 800d988:	4293      	cmp	r3, r2
 800d98a:	d100      	bne.n	800d98e <memset+0xa>
 800d98c:	4770      	bx	lr
 800d98e:	f803 1b01 	strb.w	r1, [r3], #1
 800d992:	e7f9      	b.n	800d988 <memset+0x4>

0800d994 <_free_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4605      	mov	r5, r0
 800d998:	2900      	cmp	r1, #0
 800d99a:	d040      	beq.n	800da1e <_free_r+0x8a>
 800d99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9a0:	1f0c      	subs	r4, r1, #4
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	bfb8      	it	lt
 800d9a6:	18e4      	addlt	r4, r4, r3
 800d9a8:	f000 f91e 	bl	800dbe8 <__malloc_lock>
 800d9ac:	4a1c      	ldr	r2, [pc, #112]	; (800da20 <_free_r+0x8c>)
 800d9ae:	6813      	ldr	r3, [r2, #0]
 800d9b0:	b933      	cbnz	r3, 800d9c0 <_free_r+0x2c>
 800d9b2:	6063      	str	r3, [r4, #4]
 800d9b4:	6014      	str	r4, [r2, #0]
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9bc:	f000 b91a 	b.w	800dbf4 <__malloc_unlock>
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	d908      	bls.n	800d9d6 <_free_r+0x42>
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	1821      	adds	r1, r4, r0
 800d9c8:	428b      	cmp	r3, r1
 800d9ca:	bf01      	itttt	eq
 800d9cc:	6819      	ldreq	r1, [r3, #0]
 800d9ce:	685b      	ldreq	r3, [r3, #4]
 800d9d0:	1809      	addeq	r1, r1, r0
 800d9d2:	6021      	streq	r1, [r4, #0]
 800d9d4:	e7ed      	b.n	800d9b2 <_free_r+0x1e>
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	b10b      	cbz	r3, 800d9e0 <_free_r+0x4c>
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	d9fa      	bls.n	800d9d6 <_free_r+0x42>
 800d9e0:	6811      	ldr	r1, [r2, #0]
 800d9e2:	1850      	adds	r0, r2, r1
 800d9e4:	42a0      	cmp	r0, r4
 800d9e6:	d10b      	bne.n	800da00 <_free_r+0x6c>
 800d9e8:	6820      	ldr	r0, [r4, #0]
 800d9ea:	4401      	add	r1, r0
 800d9ec:	1850      	adds	r0, r2, r1
 800d9ee:	4283      	cmp	r3, r0
 800d9f0:	6011      	str	r1, [r2, #0]
 800d9f2:	d1e0      	bne.n	800d9b6 <_free_r+0x22>
 800d9f4:	6818      	ldr	r0, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	4401      	add	r1, r0
 800d9fa:	6011      	str	r1, [r2, #0]
 800d9fc:	6053      	str	r3, [r2, #4]
 800d9fe:	e7da      	b.n	800d9b6 <_free_r+0x22>
 800da00:	d902      	bls.n	800da08 <_free_r+0x74>
 800da02:	230c      	movs	r3, #12
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	e7d6      	b.n	800d9b6 <_free_r+0x22>
 800da08:	6820      	ldr	r0, [r4, #0]
 800da0a:	1821      	adds	r1, r4, r0
 800da0c:	428b      	cmp	r3, r1
 800da0e:	bf01      	itttt	eq
 800da10:	6819      	ldreq	r1, [r3, #0]
 800da12:	685b      	ldreq	r3, [r3, #4]
 800da14:	1809      	addeq	r1, r1, r0
 800da16:	6021      	streq	r1, [r4, #0]
 800da18:	6063      	str	r3, [r4, #4]
 800da1a:	6054      	str	r4, [r2, #4]
 800da1c:	e7cb      	b.n	800d9b6 <_free_r+0x22>
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	20001318 	.word	0x20001318

0800da24 <sbrk_aligned>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	4e0e      	ldr	r6, [pc, #56]	; (800da60 <sbrk_aligned+0x3c>)
 800da28:	460c      	mov	r4, r1
 800da2a:	6831      	ldr	r1, [r6, #0]
 800da2c:	4605      	mov	r5, r0
 800da2e:	b911      	cbnz	r1, 800da36 <sbrk_aligned+0x12>
 800da30:	f000 f88c 	bl	800db4c <_sbrk_r>
 800da34:	6030      	str	r0, [r6, #0]
 800da36:	4621      	mov	r1, r4
 800da38:	4628      	mov	r0, r5
 800da3a:	f000 f887 	bl	800db4c <_sbrk_r>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	d00a      	beq.n	800da58 <sbrk_aligned+0x34>
 800da42:	1cc4      	adds	r4, r0, #3
 800da44:	f024 0403 	bic.w	r4, r4, #3
 800da48:	42a0      	cmp	r0, r4
 800da4a:	d007      	beq.n	800da5c <sbrk_aligned+0x38>
 800da4c:	1a21      	subs	r1, r4, r0
 800da4e:	4628      	mov	r0, r5
 800da50:	f000 f87c 	bl	800db4c <_sbrk_r>
 800da54:	3001      	adds	r0, #1
 800da56:	d101      	bne.n	800da5c <sbrk_aligned+0x38>
 800da58:	f04f 34ff 	mov.w	r4, #4294967295
 800da5c:	4620      	mov	r0, r4
 800da5e:	bd70      	pop	{r4, r5, r6, pc}
 800da60:	2000131c 	.word	0x2000131c

0800da64 <_malloc_r>:
 800da64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da68:	1ccd      	adds	r5, r1, #3
 800da6a:	f025 0503 	bic.w	r5, r5, #3
 800da6e:	3508      	adds	r5, #8
 800da70:	2d0c      	cmp	r5, #12
 800da72:	bf38      	it	cc
 800da74:	250c      	movcc	r5, #12
 800da76:	2d00      	cmp	r5, #0
 800da78:	4607      	mov	r7, r0
 800da7a:	db01      	blt.n	800da80 <_malloc_r+0x1c>
 800da7c:	42a9      	cmp	r1, r5
 800da7e:	d905      	bls.n	800da8c <_malloc_r+0x28>
 800da80:	230c      	movs	r3, #12
 800da82:	2600      	movs	r6, #0
 800da84:	603b      	str	r3, [r7, #0]
 800da86:	4630      	mov	r0, r6
 800da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da8c:	4e2e      	ldr	r6, [pc, #184]	; (800db48 <_malloc_r+0xe4>)
 800da8e:	f000 f8ab 	bl	800dbe8 <__malloc_lock>
 800da92:	6833      	ldr	r3, [r6, #0]
 800da94:	461c      	mov	r4, r3
 800da96:	bb34      	cbnz	r4, 800dae6 <_malloc_r+0x82>
 800da98:	4629      	mov	r1, r5
 800da9a:	4638      	mov	r0, r7
 800da9c:	f7ff ffc2 	bl	800da24 <sbrk_aligned>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	4604      	mov	r4, r0
 800daa4:	d14d      	bne.n	800db42 <_malloc_r+0xde>
 800daa6:	6834      	ldr	r4, [r6, #0]
 800daa8:	4626      	mov	r6, r4
 800daaa:	2e00      	cmp	r6, #0
 800daac:	d140      	bne.n	800db30 <_malloc_r+0xcc>
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	4631      	mov	r1, r6
 800dab2:	4638      	mov	r0, r7
 800dab4:	eb04 0803 	add.w	r8, r4, r3
 800dab8:	f000 f848 	bl	800db4c <_sbrk_r>
 800dabc:	4580      	cmp	r8, r0
 800dabe:	d13a      	bne.n	800db36 <_malloc_r+0xd2>
 800dac0:	6821      	ldr	r1, [r4, #0]
 800dac2:	3503      	adds	r5, #3
 800dac4:	1a6d      	subs	r5, r5, r1
 800dac6:	f025 0503 	bic.w	r5, r5, #3
 800daca:	3508      	adds	r5, #8
 800dacc:	2d0c      	cmp	r5, #12
 800dace:	bf38      	it	cc
 800dad0:	250c      	movcc	r5, #12
 800dad2:	4638      	mov	r0, r7
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7ff ffa5 	bl	800da24 <sbrk_aligned>
 800dada:	3001      	adds	r0, #1
 800dadc:	d02b      	beq.n	800db36 <_malloc_r+0xd2>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	442b      	add	r3, r5
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	e00e      	b.n	800db04 <_malloc_r+0xa0>
 800dae6:	6822      	ldr	r2, [r4, #0]
 800dae8:	1b52      	subs	r2, r2, r5
 800daea:	d41e      	bmi.n	800db2a <_malloc_r+0xc6>
 800daec:	2a0b      	cmp	r2, #11
 800daee:	d916      	bls.n	800db1e <_malloc_r+0xba>
 800daf0:	1961      	adds	r1, r4, r5
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	6025      	str	r5, [r4, #0]
 800daf6:	bf18      	it	ne
 800daf8:	6059      	strne	r1, [r3, #4]
 800dafa:	6863      	ldr	r3, [r4, #4]
 800dafc:	bf08      	it	eq
 800dafe:	6031      	streq	r1, [r6, #0]
 800db00:	5162      	str	r2, [r4, r5]
 800db02:	604b      	str	r3, [r1, #4]
 800db04:	4638      	mov	r0, r7
 800db06:	f104 060b 	add.w	r6, r4, #11
 800db0a:	f000 f873 	bl	800dbf4 <__malloc_unlock>
 800db0e:	f026 0607 	bic.w	r6, r6, #7
 800db12:	1d23      	adds	r3, r4, #4
 800db14:	1af2      	subs	r2, r6, r3
 800db16:	d0b6      	beq.n	800da86 <_malloc_r+0x22>
 800db18:	1b9b      	subs	r3, r3, r6
 800db1a:	50a3      	str	r3, [r4, r2]
 800db1c:	e7b3      	b.n	800da86 <_malloc_r+0x22>
 800db1e:	6862      	ldr	r2, [r4, #4]
 800db20:	42a3      	cmp	r3, r4
 800db22:	bf0c      	ite	eq
 800db24:	6032      	streq	r2, [r6, #0]
 800db26:	605a      	strne	r2, [r3, #4]
 800db28:	e7ec      	b.n	800db04 <_malloc_r+0xa0>
 800db2a:	4623      	mov	r3, r4
 800db2c:	6864      	ldr	r4, [r4, #4]
 800db2e:	e7b2      	b.n	800da96 <_malloc_r+0x32>
 800db30:	4634      	mov	r4, r6
 800db32:	6876      	ldr	r6, [r6, #4]
 800db34:	e7b9      	b.n	800daaa <_malloc_r+0x46>
 800db36:	230c      	movs	r3, #12
 800db38:	4638      	mov	r0, r7
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	f000 f85a 	bl	800dbf4 <__malloc_unlock>
 800db40:	e7a1      	b.n	800da86 <_malloc_r+0x22>
 800db42:	6025      	str	r5, [r4, #0]
 800db44:	e7de      	b.n	800db04 <_malloc_r+0xa0>
 800db46:	bf00      	nop
 800db48:	20001318 	.word	0x20001318

0800db4c <_sbrk_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	2300      	movs	r3, #0
 800db50:	4d05      	ldr	r5, [pc, #20]	; (800db68 <_sbrk_r+0x1c>)
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	f7f4 f9aa 	bl	8001eb0 <_sbrk>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_sbrk_r+0x1a>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_sbrk_r+0x1a>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	20001320 	.word	0x20001320

0800db6c <sniprintf>:
 800db6c:	b40c      	push	{r2, r3}
 800db6e:	b530      	push	{r4, r5, lr}
 800db70:	4b17      	ldr	r3, [pc, #92]	; (800dbd0 <sniprintf+0x64>)
 800db72:	1e0c      	subs	r4, r1, #0
 800db74:	681d      	ldr	r5, [r3, #0]
 800db76:	b09d      	sub	sp, #116	; 0x74
 800db78:	da08      	bge.n	800db8c <sniprintf+0x20>
 800db7a:	238b      	movs	r3, #139	; 0x8b
 800db7c:	f04f 30ff 	mov.w	r0, #4294967295
 800db80:	602b      	str	r3, [r5, #0]
 800db82:	b01d      	add	sp, #116	; 0x74
 800db84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db88:	b002      	add	sp, #8
 800db8a:	4770      	bx	lr
 800db8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db94:	bf0c      	ite	eq
 800db96:	4623      	moveq	r3, r4
 800db98:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	9307      	str	r3, [sp, #28]
 800dba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dba4:	9002      	str	r0, [sp, #8]
 800dba6:	9006      	str	r0, [sp, #24]
 800dba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbac:	4628      	mov	r0, r5
 800dbae:	ab21      	add	r3, sp, #132	; 0x84
 800dbb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dbb2:	a902      	add	r1, sp, #8
 800dbb4:	9301      	str	r3, [sp, #4]
 800dbb6:	f000 f87f 	bl	800dcb8 <_svfiprintf_r>
 800dbba:	1c43      	adds	r3, r0, #1
 800dbbc:	bfbc      	itt	lt
 800dbbe:	238b      	movlt	r3, #139	; 0x8b
 800dbc0:	602b      	strlt	r3, [r5, #0]
 800dbc2:	2c00      	cmp	r4, #0
 800dbc4:	d0dd      	beq.n	800db82 <sniprintf+0x16>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	9b02      	ldr	r3, [sp, #8]
 800dbca:	701a      	strb	r2, [r3, #0]
 800dbcc:	e7d9      	b.n	800db82 <sniprintf+0x16>
 800dbce:	bf00      	nop
 800dbd0:	2000049c 	.word	0x2000049c

0800dbd4 <toupper>:
 800dbd4:	4b03      	ldr	r3, [pc, #12]	; (800dbe4 <toupper+0x10>)
 800dbd6:	5cc3      	ldrb	r3, [r0, r3]
 800dbd8:	f003 0303 	and.w	r3, r3, #3
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	bf08      	it	eq
 800dbe0:	3820      	subeq	r0, #32
 800dbe2:	4770      	bx	lr
 800dbe4:	0800e6a1 	.word	0x0800e6a1

0800dbe8 <__malloc_lock>:
 800dbe8:	4801      	ldr	r0, [pc, #4]	; (800dbf0 <__malloc_lock+0x8>)
 800dbea:	f000 bafb 	b.w	800e1e4 <__retarget_lock_acquire_recursive>
 800dbee:	bf00      	nop
 800dbf0:	20001324 	.word	0x20001324

0800dbf4 <__malloc_unlock>:
 800dbf4:	4801      	ldr	r0, [pc, #4]	; (800dbfc <__malloc_unlock+0x8>)
 800dbf6:	f000 baf6 	b.w	800e1e6 <__retarget_lock_release_recursive>
 800dbfa:	bf00      	nop
 800dbfc:	20001324 	.word	0x20001324

0800dc00 <__ssputs_r>:
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	688e      	ldr	r6, [r1, #8]
 800dc06:	4682      	mov	sl, r0
 800dc08:	429e      	cmp	r6, r3
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	461f      	mov	r7, r3
 800dc10:	d838      	bhi.n	800dc84 <__ssputs_r+0x84>
 800dc12:	898a      	ldrh	r2, [r1, #12]
 800dc14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc18:	d032      	beq.n	800dc80 <__ssputs_r+0x80>
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	6909      	ldr	r1, [r1, #16]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	eba5 0901 	sub.w	r9, r5, r1
 800dc24:	6965      	ldr	r5, [r4, #20]
 800dc26:	444b      	add	r3, r9
 800dc28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc30:	106d      	asrs	r5, r5, #1
 800dc32:	429d      	cmp	r5, r3
 800dc34:	bf38      	it	cc
 800dc36:	461d      	movcc	r5, r3
 800dc38:	0553      	lsls	r3, r2, #21
 800dc3a:	d531      	bpl.n	800dca0 <__ssputs_r+0xa0>
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	f7ff ff11 	bl	800da64 <_malloc_r>
 800dc42:	4606      	mov	r6, r0
 800dc44:	b950      	cbnz	r0, 800dc5c <__ssputs_r+0x5c>
 800dc46:	230c      	movs	r3, #12
 800dc48:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4c:	f8ca 3000 	str.w	r3, [sl]
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5c:	464a      	mov	r2, r9
 800dc5e:	6921      	ldr	r1, [r4, #16]
 800dc60:	f7ff fe82 	bl	800d968 <memcpy>
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc6e:	81a3      	strh	r3, [r4, #12]
 800dc70:	6126      	str	r6, [r4, #16]
 800dc72:	444e      	add	r6, r9
 800dc74:	6026      	str	r6, [r4, #0]
 800dc76:	463e      	mov	r6, r7
 800dc78:	6165      	str	r5, [r4, #20]
 800dc7a:	eba5 0509 	sub.w	r5, r5, r9
 800dc7e:	60a5      	str	r5, [r4, #8]
 800dc80:	42be      	cmp	r6, r7
 800dc82:	d900      	bls.n	800dc86 <__ssputs_r+0x86>
 800dc84:	463e      	mov	r6, r7
 800dc86:	4632      	mov	r2, r6
 800dc88:	4641      	mov	r1, r8
 800dc8a:	6820      	ldr	r0, [r4, #0]
 800dc8c:	f000 faba 	bl	800e204 <memmove>
 800dc90:	68a3      	ldr	r3, [r4, #8]
 800dc92:	2000      	movs	r0, #0
 800dc94:	1b9b      	subs	r3, r3, r6
 800dc96:	60a3      	str	r3, [r4, #8]
 800dc98:	6823      	ldr	r3, [r4, #0]
 800dc9a:	4433      	add	r3, r6
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	e7db      	b.n	800dc58 <__ssputs_r+0x58>
 800dca0:	462a      	mov	r2, r5
 800dca2:	f000 fac9 	bl	800e238 <_realloc_r>
 800dca6:	4606      	mov	r6, r0
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d1e1      	bne.n	800dc70 <__ssputs_r+0x70>
 800dcac:	4650      	mov	r0, sl
 800dcae:	6921      	ldr	r1, [r4, #16]
 800dcb0:	f7ff fe70 	bl	800d994 <_free_r>
 800dcb4:	e7c7      	b.n	800dc46 <__ssputs_r+0x46>
	...

0800dcb8 <_svfiprintf_r>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	4698      	mov	r8, r3
 800dcbe:	898b      	ldrh	r3, [r1, #12]
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	061b      	lsls	r3, r3, #24
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	4614      	mov	r4, r2
 800dcc8:	b09d      	sub	sp, #116	; 0x74
 800dcca:	d50e      	bpl.n	800dcea <_svfiprintf_r+0x32>
 800dccc:	690b      	ldr	r3, [r1, #16]
 800dcce:	b963      	cbnz	r3, 800dcea <_svfiprintf_r+0x32>
 800dcd0:	2140      	movs	r1, #64	; 0x40
 800dcd2:	f7ff fec7 	bl	800da64 <_malloc_r>
 800dcd6:	6028      	str	r0, [r5, #0]
 800dcd8:	6128      	str	r0, [r5, #16]
 800dcda:	b920      	cbnz	r0, 800dce6 <_svfiprintf_r+0x2e>
 800dcdc:	230c      	movs	r3, #12
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	e0d1      	b.n	800de8a <_svfiprintf_r+0x1d2>
 800dce6:	2340      	movs	r3, #64	; 0x40
 800dce8:	616b      	str	r3, [r5, #20]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9309      	str	r3, [sp, #36]	; 0x24
 800dcee:	2320      	movs	r3, #32
 800dcf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcf4:	2330      	movs	r3, #48	; 0x30
 800dcf6:	f04f 0901 	mov.w	r9, #1
 800dcfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dea4 <_svfiprintf_r+0x1ec>
 800dd02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd06:	4623      	mov	r3, r4
 800dd08:	469a      	mov	sl, r3
 800dd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0e:	b10a      	cbz	r2, 800dd14 <_svfiprintf_r+0x5c>
 800dd10:	2a25      	cmp	r2, #37	; 0x25
 800dd12:	d1f9      	bne.n	800dd08 <_svfiprintf_r+0x50>
 800dd14:	ebba 0b04 	subs.w	fp, sl, r4
 800dd18:	d00b      	beq.n	800dd32 <_svfiprintf_r+0x7a>
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4638      	mov	r0, r7
 800dd22:	f7ff ff6d 	bl	800dc00 <__ssputs_r>
 800dd26:	3001      	adds	r0, #1
 800dd28:	f000 80aa 	beq.w	800de80 <_svfiprintf_r+0x1c8>
 800dd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd2e:	445a      	add	r2, fp
 800dd30:	9209      	str	r2, [sp, #36]	; 0x24
 800dd32:	f89a 3000 	ldrb.w	r3, [sl]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 80a2 	beq.w	800de80 <_svfiprintf_r+0x1c8>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd46:	f10a 0a01 	add.w	sl, sl, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	9307      	str	r3, [sp, #28]
 800dd4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd52:	931a      	str	r3, [sp, #104]	; 0x68
 800dd54:	4654      	mov	r4, sl
 800dd56:	2205      	movs	r2, #5
 800dd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5c:	4851      	ldr	r0, [pc, #324]	; (800dea4 <_svfiprintf_r+0x1ec>)
 800dd5e:	f000 fa43 	bl	800e1e8 <memchr>
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	b9d8      	cbnz	r0, 800dd9e <_svfiprintf_r+0xe6>
 800dd66:	06d0      	lsls	r0, r2, #27
 800dd68:	bf44      	itt	mi
 800dd6a:	2320      	movmi	r3, #32
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd70:	0711      	lsls	r1, r2, #28
 800dd72:	bf44      	itt	mi
 800dd74:	232b      	movmi	r3, #43	; 0x2b
 800dd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd80:	d015      	beq.n	800ddae <_svfiprintf_r+0xf6>
 800dd82:	4654      	mov	r4, sl
 800dd84:	2000      	movs	r0, #0
 800dd86:	f04f 0c0a 	mov.w	ip, #10
 800dd8a:	9a07      	ldr	r2, [sp, #28]
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd92:	3b30      	subs	r3, #48	; 0x30
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d94e      	bls.n	800de36 <_svfiprintf_r+0x17e>
 800dd98:	b1b0      	cbz	r0, 800ddc8 <_svfiprintf_r+0x110>
 800dd9a:	9207      	str	r2, [sp, #28]
 800dd9c:	e014      	b.n	800ddc8 <_svfiprintf_r+0x110>
 800dd9e:	eba0 0308 	sub.w	r3, r0, r8
 800dda2:	fa09 f303 	lsl.w	r3, r9, r3
 800dda6:	4313      	orrs	r3, r2
 800dda8:	46a2      	mov	sl, r4
 800ddaa:	9304      	str	r3, [sp, #16]
 800ddac:	e7d2      	b.n	800dd54 <_svfiprintf_r+0x9c>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	1d19      	adds	r1, r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bfbb      	ittet	lt
 800ddba:	425b      	neglt	r3, r3
 800ddbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc0:	9307      	strge	r3, [sp, #28]
 800ddc2:	9307      	strlt	r3, [sp, #28]
 800ddc4:	bfb8      	it	lt
 800ddc6:	9204      	strlt	r2, [sp, #16]
 800ddc8:	7823      	ldrb	r3, [r4, #0]
 800ddca:	2b2e      	cmp	r3, #46	; 0x2e
 800ddcc:	d10c      	bne.n	800dde8 <_svfiprintf_r+0x130>
 800ddce:	7863      	ldrb	r3, [r4, #1]
 800ddd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd2:	d135      	bne.n	800de40 <_svfiprintf_r+0x188>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	3402      	adds	r4, #2
 800ddd8:	1d1a      	adds	r2, r3, #4
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	9203      	str	r2, [sp, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfb8      	it	lt
 800dde2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dde6:	9305      	str	r3, [sp, #20]
 800dde8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800dea8 <_svfiprintf_r+0x1f0>
 800ddec:	2203      	movs	r2, #3
 800ddee:	4650      	mov	r0, sl
 800ddf0:	7821      	ldrb	r1, [r4, #0]
 800ddf2:	f000 f9f9 	bl	800e1e8 <memchr>
 800ddf6:	b140      	cbz	r0, 800de0a <_svfiprintf_r+0x152>
 800ddf8:	2340      	movs	r3, #64	; 0x40
 800ddfa:	eba0 000a 	sub.w	r0, r0, sl
 800ddfe:	fa03 f000 	lsl.w	r0, r3, r0
 800de02:	9b04      	ldr	r3, [sp, #16]
 800de04:	3401      	adds	r4, #1
 800de06:	4303      	orrs	r3, r0
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0e:	2206      	movs	r2, #6
 800de10:	4826      	ldr	r0, [pc, #152]	; (800deac <_svfiprintf_r+0x1f4>)
 800de12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de16:	f000 f9e7 	bl	800e1e8 <memchr>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d038      	beq.n	800de90 <_svfiprintf_r+0x1d8>
 800de1e:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <_svfiprintf_r+0x1f8>)
 800de20:	bb1b      	cbnz	r3, 800de6a <_svfiprintf_r+0x1b2>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	3307      	adds	r3, #7
 800de26:	f023 0307 	bic.w	r3, r3, #7
 800de2a:	3308      	adds	r3, #8
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de30:	4433      	add	r3, r6
 800de32:	9309      	str	r3, [sp, #36]	; 0x24
 800de34:	e767      	b.n	800dd06 <_svfiprintf_r+0x4e>
 800de36:	460c      	mov	r4, r1
 800de38:	2001      	movs	r0, #1
 800de3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800de3e:	e7a5      	b.n	800dd8c <_svfiprintf_r+0xd4>
 800de40:	2300      	movs	r3, #0
 800de42:	f04f 0c0a 	mov.w	ip, #10
 800de46:	4619      	mov	r1, r3
 800de48:	3401      	adds	r4, #1
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	4620      	mov	r0, r4
 800de4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de52:	3a30      	subs	r2, #48	; 0x30
 800de54:	2a09      	cmp	r2, #9
 800de56:	d903      	bls.n	800de60 <_svfiprintf_r+0x1a8>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0c5      	beq.n	800dde8 <_svfiprintf_r+0x130>
 800de5c:	9105      	str	r1, [sp, #20]
 800de5e:	e7c3      	b.n	800dde8 <_svfiprintf_r+0x130>
 800de60:	4604      	mov	r4, r0
 800de62:	2301      	movs	r3, #1
 800de64:	fb0c 2101 	mla	r1, ip, r1, r2
 800de68:	e7f0      	b.n	800de4c <_svfiprintf_r+0x194>
 800de6a:	ab03      	add	r3, sp, #12
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	462a      	mov	r2, r5
 800de70:	4638      	mov	r0, r7
 800de72:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <_svfiprintf_r+0x1fc>)
 800de74:	a904      	add	r1, sp, #16
 800de76:	f3af 8000 	nop.w
 800de7a:	1c42      	adds	r2, r0, #1
 800de7c:	4606      	mov	r6, r0
 800de7e:	d1d6      	bne.n	800de2e <_svfiprintf_r+0x176>
 800de80:	89ab      	ldrh	r3, [r5, #12]
 800de82:	065b      	lsls	r3, r3, #25
 800de84:	f53f af2c 	bmi.w	800dce0 <_svfiprintf_r+0x28>
 800de88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de8a:	b01d      	add	sp, #116	; 0x74
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	ab03      	add	r3, sp, #12
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	462a      	mov	r2, r5
 800de96:	4638      	mov	r0, r7
 800de98:	4b06      	ldr	r3, [pc, #24]	; (800deb4 <_svfiprintf_r+0x1fc>)
 800de9a:	a904      	add	r1, sp, #16
 800de9c:	f000 f87c 	bl	800df98 <_printf_i>
 800dea0:	e7eb      	b.n	800de7a <_svfiprintf_r+0x1c2>
 800dea2:	bf00      	nop
 800dea4:	0800e7a1 	.word	0x0800e7a1
 800dea8:	0800e7a7 	.word	0x0800e7a7
 800deac:	0800e7ab 	.word	0x0800e7ab
 800deb0:	00000000 	.word	0x00000000
 800deb4:	0800dc01 	.word	0x0800dc01

0800deb8 <_printf_common>:
 800deb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800debc:	4616      	mov	r6, r2
 800debe:	4699      	mov	r9, r3
 800dec0:	688a      	ldr	r2, [r1, #8]
 800dec2:	690b      	ldr	r3, [r1, #16]
 800dec4:	4607      	mov	r7, r0
 800dec6:	4293      	cmp	r3, r2
 800dec8:	bfb8      	it	lt
 800deca:	4613      	movlt	r3, r2
 800decc:	6033      	str	r3, [r6, #0]
 800dece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ded2:	460c      	mov	r4, r1
 800ded4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ded8:	b10a      	cbz	r2, 800dede <_printf_common+0x26>
 800deda:	3301      	adds	r3, #1
 800dedc:	6033      	str	r3, [r6, #0]
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	0699      	lsls	r1, r3, #26
 800dee2:	bf42      	ittt	mi
 800dee4:	6833      	ldrmi	r3, [r6, #0]
 800dee6:	3302      	addmi	r3, #2
 800dee8:	6033      	strmi	r3, [r6, #0]
 800deea:	6825      	ldr	r5, [r4, #0]
 800deec:	f015 0506 	ands.w	r5, r5, #6
 800def0:	d106      	bne.n	800df00 <_printf_common+0x48>
 800def2:	f104 0a19 	add.w	sl, r4, #25
 800def6:	68e3      	ldr	r3, [r4, #12]
 800def8:	6832      	ldr	r2, [r6, #0]
 800defa:	1a9b      	subs	r3, r3, r2
 800defc:	42ab      	cmp	r3, r5
 800defe:	dc28      	bgt.n	800df52 <_printf_common+0x9a>
 800df00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df04:	1e13      	subs	r3, r2, #0
 800df06:	6822      	ldr	r2, [r4, #0]
 800df08:	bf18      	it	ne
 800df0a:	2301      	movne	r3, #1
 800df0c:	0692      	lsls	r2, r2, #26
 800df0e:	d42d      	bmi.n	800df6c <_printf_common+0xb4>
 800df10:	4649      	mov	r1, r9
 800df12:	4638      	mov	r0, r7
 800df14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df18:	47c0      	blx	r8
 800df1a:	3001      	adds	r0, #1
 800df1c:	d020      	beq.n	800df60 <_printf_common+0xa8>
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	68e5      	ldr	r5, [r4, #12]
 800df22:	f003 0306 	and.w	r3, r3, #6
 800df26:	2b04      	cmp	r3, #4
 800df28:	bf18      	it	ne
 800df2a:	2500      	movne	r5, #0
 800df2c:	6832      	ldr	r2, [r6, #0]
 800df2e:	f04f 0600 	mov.w	r6, #0
 800df32:	68a3      	ldr	r3, [r4, #8]
 800df34:	bf08      	it	eq
 800df36:	1aad      	subeq	r5, r5, r2
 800df38:	6922      	ldr	r2, [r4, #16]
 800df3a:	bf08      	it	eq
 800df3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df40:	4293      	cmp	r3, r2
 800df42:	bfc4      	itt	gt
 800df44:	1a9b      	subgt	r3, r3, r2
 800df46:	18ed      	addgt	r5, r5, r3
 800df48:	341a      	adds	r4, #26
 800df4a:	42b5      	cmp	r5, r6
 800df4c:	d11a      	bne.n	800df84 <_printf_common+0xcc>
 800df4e:	2000      	movs	r0, #0
 800df50:	e008      	b.n	800df64 <_printf_common+0xac>
 800df52:	2301      	movs	r3, #1
 800df54:	4652      	mov	r2, sl
 800df56:	4649      	mov	r1, r9
 800df58:	4638      	mov	r0, r7
 800df5a:	47c0      	blx	r8
 800df5c:	3001      	adds	r0, #1
 800df5e:	d103      	bne.n	800df68 <_printf_common+0xb0>
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df68:	3501      	adds	r5, #1
 800df6a:	e7c4      	b.n	800def6 <_printf_common+0x3e>
 800df6c:	2030      	movs	r0, #48	; 0x30
 800df6e:	18e1      	adds	r1, r4, r3
 800df70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df7a:	4422      	add	r2, r4
 800df7c:	3302      	adds	r3, #2
 800df7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df82:	e7c5      	b.n	800df10 <_printf_common+0x58>
 800df84:	2301      	movs	r3, #1
 800df86:	4622      	mov	r2, r4
 800df88:	4649      	mov	r1, r9
 800df8a:	4638      	mov	r0, r7
 800df8c:	47c0      	blx	r8
 800df8e:	3001      	adds	r0, #1
 800df90:	d0e6      	beq.n	800df60 <_printf_common+0xa8>
 800df92:	3601      	adds	r6, #1
 800df94:	e7d9      	b.n	800df4a <_printf_common+0x92>
	...

0800df98 <_printf_i>:
 800df98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df9c:	7e0f      	ldrb	r7, [r1, #24]
 800df9e:	4691      	mov	r9, r2
 800dfa0:	2f78      	cmp	r7, #120	; 0x78
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	469a      	mov	sl, r3
 800dfa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dfae:	d807      	bhi.n	800dfc0 <_printf_i+0x28>
 800dfb0:	2f62      	cmp	r7, #98	; 0x62
 800dfb2:	d80a      	bhi.n	800dfca <_printf_i+0x32>
 800dfb4:	2f00      	cmp	r7, #0
 800dfb6:	f000 80d9 	beq.w	800e16c <_printf_i+0x1d4>
 800dfba:	2f58      	cmp	r7, #88	; 0x58
 800dfbc:	f000 80a4 	beq.w	800e108 <_printf_i+0x170>
 800dfc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfc8:	e03a      	b.n	800e040 <_printf_i+0xa8>
 800dfca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfce:	2b15      	cmp	r3, #21
 800dfd0:	d8f6      	bhi.n	800dfc0 <_printf_i+0x28>
 800dfd2:	a101      	add	r1, pc, #4	; (adr r1, 800dfd8 <_printf_i+0x40>)
 800dfd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dfd8:	0800e031 	.word	0x0800e031
 800dfdc:	0800e045 	.word	0x0800e045
 800dfe0:	0800dfc1 	.word	0x0800dfc1
 800dfe4:	0800dfc1 	.word	0x0800dfc1
 800dfe8:	0800dfc1 	.word	0x0800dfc1
 800dfec:	0800dfc1 	.word	0x0800dfc1
 800dff0:	0800e045 	.word	0x0800e045
 800dff4:	0800dfc1 	.word	0x0800dfc1
 800dff8:	0800dfc1 	.word	0x0800dfc1
 800dffc:	0800dfc1 	.word	0x0800dfc1
 800e000:	0800dfc1 	.word	0x0800dfc1
 800e004:	0800e153 	.word	0x0800e153
 800e008:	0800e075 	.word	0x0800e075
 800e00c:	0800e135 	.word	0x0800e135
 800e010:	0800dfc1 	.word	0x0800dfc1
 800e014:	0800dfc1 	.word	0x0800dfc1
 800e018:	0800e175 	.word	0x0800e175
 800e01c:	0800dfc1 	.word	0x0800dfc1
 800e020:	0800e075 	.word	0x0800e075
 800e024:	0800dfc1 	.word	0x0800dfc1
 800e028:	0800dfc1 	.word	0x0800dfc1
 800e02c:	0800e13d 	.word	0x0800e13d
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	1d1a      	adds	r2, r3, #4
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	602a      	str	r2, [r5, #0]
 800e038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e03c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e040:	2301      	movs	r3, #1
 800e042:	e0a4      	b.n	800e18e <_printf_i+0x1f6>
 800e044:	6820      	ldr	r0, [r4, #0]
 800e046:	6829      	ldr	r1, [r5, #0]
 800e048:	0606      	lsls	r6, r0, #24
 800e04a:	f101 0304 	add.w	r3, r1, #4
 800e04e:	d50a      	bpl.n	800e066 <_printf_i+0xce>
 800e050:	680e      	ldr	r6, [r1, #0]
 800e052:	602b      	str	r3, [r5, #0]
 800e054:	2e00      	cmp	r6, #0
 800e056:	da03      	bge.n	800e060 <_printf_i+0xc8>
 800e058:	232d      	movs	r3, #45	; 0x2d
 800e05a:	4276      	negs	r6, r6
 800e05c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e060:	230a      	movs	r3, #10
 800e062:	485e      	ldr	r0, [pc, #376]	; (800e1dc <_printf_i+0x244>)
 800e064:	e019      	b.n	800e09a <_printf_i+0x102>
 800e066:	680e      	ldr	r6, [r1, #0]
 800e068:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	bf18      	it	ne
 800e070:	b236      	sxthne	r6, r6
 800e072:	e7ef      	b.n	800e054 <_printf_i+0xbc>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	6820      	ldr	r0, [r4, #0]
 800e078:	1d19      	adds	r1, r3, #4
 800e07a:	6029      	str	r1, [r5, #0]
 800e07c:	0601      	lsls	r1, r0, #24
 800e07e:	d501      	bpl.n	800e084 <_printf_i+0xec>
 800e080:	681e      	ldr	r6, [r3, #0]
 800e082:	e002      	b.n	800e08a <_printf_i+0xf2>
 800e084:	0646      	lsls	r6, r0, #25
 800e086:	d5fb      	bpl.n	800e080 <_printf_i+0xe8>
 800e088:	881e      	ldrh	r6, [r3, #0]
 800e08a:	2f6f      	cmp	r7, #111	; 0x6f
 800e08c:	bf0c      	ite	eq
 800e08e:	2308      	moveq	r3, #8
 800e090:	230a      	movne	r3, #10
 800e092:	4852      	ldr	r0, [pc, #328]	; (800e1dc <_printf_i+0x244>)
 800e094:	2100      	movs	r1, #0
 800e096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e09a:	6865      	ldr	r5, [r4, #4]
 800e09c:	2d00      	cmp	r5, #0
 800e09e:	bfa8      	it	ge
 800e0a0:	6821      	ldrge	r1, [r4, #0]
 800e0a2:	60a5      	str	r5, [r4, #8]
 800e0a4:	bfa4      	itt	ge
 800e0a6:	f021 0104 	bicge.w	r1, r1, #4
 800e0aa:	6021      	strge	r1, [r4, #0]
 800e0ac:	b90e      	cbnz	r6, 800e0b2 <_printf_i+0x11a>
 800e0ae:	2d00      	cmp	r5, #0
 800e0b0:	d04d      	beq.n	800e14e <_printf_i+0x1b6>
 800e0b2:	4615      	mov	r5, r2
 800e0b4:	fbb6 f1f3 	udiv	r1, r6, r3
 800e0b8:	fb03 6711 	mls	r7, r3, r1, r6
 800e0bc:	5dc7      	ldrb	r7, [r0, r7]
 800e0be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e0c2:	4637      	mov	r7, r6
 800e0c4:	42bb      	cmp	r3, r7
 800e0c6:	460e      	mov	r6, r1
 800e0c8:	d9f4      	bls.n	800e0b4 <_printf_i+0x11c>
 800e0ca:	2b08      	cmp	r3, #8
 800e0cc:	d10b      	bne.n	800e0e6 <_printf_i+0x14e>
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	07de      	lsls	r6, r3, #31
 800e0d2:	d508      	bpl.n	800e0e6 <_printf_i+0x14e>
 800e0d4:	6923      	ldr	r3, [r4, #16]
 800e0d6:	6861      	ldr	r1, [r4, #4]
 800e0d8:	4299      	cmp	r1, r3
 800e0da:	bfde      	ittt	le
 800e0dc:	2330      	movle	r3, #48	; 0x30
 800e0de:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e0e6:	1b52      	subs	r2, r2, r5
 800e0e8:	6122      	str	r2, [r4, #16]
 800e0ea:	464b      	mov	r3, r9
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	4640      	mov	r0, r8
 800e0f0:	f8cd a000 	str.w	sl, [sp]
 800e0f4:	aa03      	add	r2, sp, #12
 800e0f6:	f7ff fedf 	bl	800deb8 <_printf_common>
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	d14c      	bne.n	800e198 <_printf_i+0x200>
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	b004      	add	sp, #16
 800e104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e108:	4834      	ldr	r0, [pc, #208]	; (800e1dc <_printf_i+0x244>)
 800e10a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e10e:	6829      	ldr	r1, [r5, #0]
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	f851 6b04 	ldr.w	r6, [r1], #4
 800e116:	6029      	str	r1, [r5, #0]
 800e118:	061d      	lsls	r5, r3, #24
 800e11a:	d514      	bpl.n	800e146 <_printf_i+0x1ae>
 800e11c:	07df      	lsls	r7, r3, #31
 800e11e:	bf44      	itt	mi
 800e120:	f043 0320 	orrmi.w	r3, r3, #32
 800e124:	6023      	strmi	r3, [r4, #0]
 800e126:	b91e      	cbnz	r6, 800e130 <_printf_i+0x198>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	f023 0320 	bic.w	r3, r3, #32
 800e12e:	6023      	str	r3, [r4, #0]
 800e130:	2310      	movs	r3, #16
 800e132:	e7af      	b.n	800e094 <_printf_i+0xfc>
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	f043 0320 	orr.w	r3, r3, #32
 800e13a:	6023      	str	r3, [r4, #0]
 800e13c:	2378      	movs	r3, #120	; 0x78
 800e13e:	4828      	ldr	r0, [pc, #160]	; (800e1e0 <_printf_i+0x248>)
 800e140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e144:	e7e3      	b.n	800e10e <_printf_i+0x176>
 800e146:	0659      	lsls	r1, r3, #25
 800e148:	bf48      	it	mi
 800e14a:	b2b6      	uxthmi	r6, r6
 800e14c:	e7e6      	b.n	800e11c <_printf_i+0x184>
 800e14e:	4615      	mov	r5, r2
 800e150:	e7bb      	b.n	800e0ca <_printf_i+0x132>
 800e152:	682b      	ldr	r3, [r5, #0]
 800e154:	6826      	ldr	r6, [r4, #0]
 800e156:	1d18      	adds	r0, r3, #4
 800e158:	6961      	ldr	r1, [r4, #20]
 800e15a:	6028      	str	r0, [r5, #0]
 800e15c:	0635      	lsls	r5, r6, #24
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	d501      	bpl.n	800e166 <_printf_i+0x1ce>
 800e162:	6019      	str	r1, [r3, #0]
 800e164:	e002      	b.n	800e16c <_printf_i+0x1d4>
 800e166:	0670      	lsls	r0, r6, #25
 800e168:	d5fb      	bpl.n	800e162 <_printf_i+0x1ca>
 800e16a:	8019      	strh	r1, [r3, #0]
 800e16c:	2300      	movs	r3, #0
 800e16e:	4615      	mov	r5, r2
 800e170:	6123      	str	r3, [r4, #16]
 800e172:	e7ba      	b.n	800e0ea <_printf_i+0x152>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	2100      	movs	r1, #0
 800e178:	1d1a      	adds	r2, r3, #4
 800e17a:	602a      	str	r2, [r5, #0]
 800e17c:	681d      	ldr	r5, [r3, #0]
 800e17e:	6862      	ldr	r2, [r4, #4]
 800e180:	4628      	mov	r0, r5
 800e182:	f000 f831 	bl	800e1e8 <memchr>
 800e186:	b108      	cbz	r0, 800e18c <_printf_i+0x1f4>
 800e188:	1b40      	subs	r0, r0, r5
 800e18a:	6060      	str	r0, [r4, #4]
 800e18c:	6863      	ldr	r3, [r4, #4]
 800e18e:	6123      	str	r3, [r4, #16]
 800e190:	2300      	movs	r3, #0
 800e192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e196:	e7a8      	b.n	800e0ea <_printf_i+0x152>
 800e198:	462a      	mov	r2, r5
 800e19a:	4649      	mov	r1, r9
 800e19c:	4640      	mov	r0, r8
 800e19e:	6923      	ldr	r3, [r4, #16]
 800e1a0:	47d0      	blx	sl
 800e1a2:	3001      	adds	r0, #1
 800e1a4:	d0ab      	beq.n	800e0fe <_printf_i+0x166>
 800e1a6:	6823      	ldr	r3, [r4, #0]
 800e1a8:	079b      	lsls	r3, r3, #30
 800e1aa:	d413      	bmi.n	800e1d4 <_printf_i+0x23c>
 800e1ac:	68e0      	ldr	r0, [r4, #12]
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	4298      	cmp	r0, r3
 800e1b2:	bfb8      	it	lt
 800e1b4:	4618      	movlt	r0, r3
 800e1b6:	e7a4      	b.n	800e102 <_printf_i+0x16a>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	4632      	mov	r2, r6
 800e1bc:	4649      	mov	r1, r9
 800e1be:	4640      	mov	r0, r8
 800e1c0:	47d0      	blx	sl
 800e1c2:	3001      	adds	r0, #1
 800e1c4:	d09b      	beq.n	800e0fe <_printf_i+0x166>
 800e1c6:	3501      	adds	r5, #1
 800e1c8:	68e3      	ldr	r3, [r4, #12]
 800e1ca:	9903      	ldr	r1, [sp, #12]
 800e1cc:	1a5b      	subs	r3, r3, r1
 800e1ce:	42ab      	cmp	r3, r5
 800e1d0:	dcf2      	bgt.n	800e1b8 <_printf_i+0x220>
 800e1d2:	e7eb      	b.n	800e1ac <_printf_i+0x214>
 800e1d4:	2500      	movs	r5, #0
 800e1d6:	f104 0619 	add.w	r6, r4, #25
 800e1da:	e7f5      	b.n	800e1c8 <_printf_i+0x230>
 800e1dc:	0800e7b2 	.word	0x0800e7b2
 800e1e0:	0800e7c3 	.word	0x0800e7c3

0800e1e4 <__retarget_lock_acquire_recursive>:
 800e1e4:	4770      	bx	lr

0800e1e6 <__retarget_lock_release_recursive>:
 800e1e6:	4770      	bx	lr

0800e1e8 <memchr>:
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	b510      	push	{r4, lr}
 800e1ec:	b2c9      	uxtb	r1, r1
 800e1ee:	4402      	add	r2, r0
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	d101      	bne.n	800e1fa <memchr+0x12>
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	e003      	b.n	800e202 <memchr+0x1a>
 800e1fa:	7804      	ldrb	r4, [r0, #0]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	428c      	cmp	r4, r1
 800e200:	d1f6      	bne.n	800e1f0 <memchr+0x8>
 800e202:	bd10      	pop	{r4, pc}

0800e204 <memmove>:
 800e204:	4288      	cmp	r0, r1
 800e206:	b510      	push	{r4, lr}
 800e208:	eb01 0402 	add.w	r4, r1, r2
 800e20c:	d902      	bls.n	800e214 <memmove+0x10>
 800e20e:	4284      	cmp	r4, r0
 800e210:	4623      	mov	r3, r4
 800e212:	d807      	bhi.n	800e224 <memmove+0x20>
 800e214:	1e43      	subs	r3, r0, #1
 800e216:	42a1      	cmp	r1, r4
 800e218:	d008      	beq.n	800e22c <memmove+0x28>
 800e21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e222:	e7f8      	b.n	800e216 <memmove+0x12>
 800e224:	4601      	mov	r1, r0
 800e226:	4402      	add	r2, r0
 800e228:	428a      	cmp	r2, r1
 800e22a:	d100      	bne.n	800e22e <memmove+0x2a>
 800e22c:	bd10      	pop	{r4, pc}
 800e22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e236:	e7f7      	b.n	800e228 <memmove+0x24>

0800e238 <_realloc_r>:
 800e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23c:	4680      	mov	r8, r0
 800e23e:	4614      	mov	r4, r2
 800e240:	460e      	mov	r6, r1
 800e242:	b921      	cbnz	r1, 800e24e <_realloc_r+0x16>
 800e244:	4611      	mov	r1, r2
 800e246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e24a:	f7ff bc0b 	b.w	800da64 <_malloc_r>
 800e24e:	b92a      	cbnz	r2, 800e25c <_realloc_r+0x24>
 800e250:	f7ff fba0 	bl	800d994 <_free_r>
 800e254:	4625      	mov	r5, r4
 800e256:	4628      	mov	r0, r5
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	f000 f81b 	bl	800e296 <_malloc_usable_size_r>
 800e260:	4284      	cmp	r4, r0
 800e262:	4607      	mov	r7, r0
 800e264:	d802      	bhi.n	800e26c <_realloc_r+0x34>
 800e266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e26a:	d812      	bhi.n	800e292 <_realloc_r+0x5a>
 800e26c:	4621      	mov	r1, r4
 800e26e:	4640      	mov	r0, r8
 800e270:	f7ff fbf8 	bl	800da64 <_malloc_r>
 800e274:	4605      	mov	r5, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	d0ed      	beq.n	800e256 <_realloc_r+0x1e>
 800e27a:	42bc      	cmp	r4, r7
 800e27c:	4622      	mov	r2, r4
 800e27e:	4631      	mov	r1, r6
 800e280:	bf28      	it	cs
 800e282:	463a      	movcs	r2, r7
 800e284:	f7ff fb70 	bl	800d968 <memcpy>
 800e288:	4631      	mov	r1, r6
 800e28a:	4640      	mov	r0, r8
 800e28c:	f7ff fb82 	bl	800d994 <_free_r>
 800e290:	e7e1      	b.n	800e256 <_realloc_r+0x1e>
 800e292:	4635      	mov	r5, r6
 800e294:	e7df      	b.n	800e256 <_realloc_r+0x1e>

0800e296 <_malloc_usable_size_r>:
 800e296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e29a:	1f18      	subs	r0, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	bfbc      	itt	lt
 800e2a0:	580b      	ldrlt	r3, [r1, r0]
 800e2a2:	18c0      	addlt	r0, r0, r3
 800e2a4:	4770      	bx	lr
	...

0800e2a8 <_init>:
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2aa:	bf00      	nop
 800e2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ae:	bc08      	pop	{r3}
 800e2b0:	469e      	mov	lr, r3
 800e2b2:	4770      	bx	lr

0800e2b4 <_fini>:
 800e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b6:	bf00      	nop
 800e2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ba:	bc08      	pop	{r3}
 800e2bc:	469e      	mov	lr, r3
 800e2be:	4770      	bx	lr
